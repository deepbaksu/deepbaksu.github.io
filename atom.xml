<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://deepbaksu.github.io</id>
    <title>딥백수</title>
    <link href="https://deepbaksu.github.io" />
    <updated>2021-05-29T06:47:46.000Z</updated>
    <category term="Mo Kweon" />
    <category term="go" />
    <category term="golang" />
    <category term="dependency injection" />
    <category term="wire" />
    <category term="uber-go" />
    <category term="fx" />
    <category term="Hyunggi Chang" />
    <category term="AI" />
    <category term="딥러닝" />
    <category term="로보틱스" />
    <category term="YouTube" />
    <category term="News" />
    <category term="Hyunseok Jeong" />
    <category term="Software Architecture" />
    <category term="Agile" />
    <category term="Architect" />
    <category term="Jinyoung Song" />
    <category term="데이터분석" />
    <category term="통계분석" />
    <category term="통계학" />
    <category term="통계역사" />
    <category term="비트코인" />
    <category term="제국주의" />
    <category term="미래전망" />
    <category term="플랫폼전략" />
    <category term="디지털자산" />
    <category term="microservice" />
    <category term="CQRS" />
    <category term="architecture" />
    <category term="software engineering" />
    <category term="선지원" />
    <category term="후고민" />
    <category term="선지원 후고민" />
    <category term="실험" />
    <category term="Apply Driven Study" />
    <category term="생존" />
    <category term="멘토링" />
    <category term="용기" />
    <category term="free web server" />
    <category term="heroku" />
    <category term="aws" />
    <category term="gcp" />
    <category term="netlify" />
    <category term="github actions" />
    <category term="구글애널리틱스" />
    <category term="GA" />
    <category term="Google Analytics" />
    <category term="Data Analysis" />
    <category term="Web Log Analysis" />
    <category term="Happy working" />
    <category term="Mindfulness" />
    <category term="Noble Eightfold Path" />
    <category term="gRPC" />
    <category term="Go" />
    <category term="REST" />
    <category term="존버" />
    <category term="jonber" />
    <category term="딥백수" />
    <category term="회고" />
    <category term="bluehole" />
    <category term="krafton" />
    <category term="communication" />
    <category term="GitHub CLI" />
    <category term="Gist" />
    <category term="Leaning by Doing" />
    <category term="Repo" />
    <category term="Alias" />
    <category term="습관" />
    <category term="중용" />
    <category term="꾸준함" />
    <category term="성실" />
    <category term="대화" />
    <category term="비폭력대화" />
    <category term="Golang" />
    <category term="Slice" />
    <category term="example" />
    <category term="Windows" />
    <category term="PowerShell" />
    <category term="PowerShell script" />
    <category term="Git" />
    <category term="Prompt" />
    <category term="Martin Fowler" />
    <category term="Refactoring" />
    <category term="Principles" />
    <category term="파이썬" />
    <category term="실무" />
    <category term="데이터분석 실무" />
    <category term="네트워크 분석" />
    <category term="최적화" />
    <category term="시뮬레이션" />
    <category term="자연어처리" />
    <category term="회귀" />
    <category term="예측 분석" />
    <category term="semantic release" />
    <category term="semantic version" />
    <category term="slack" />
    <category term="bot" />
    <category term="oauth" />
    <category term="Github Action" />
    <category term="Slack" />
    <category term="Automation" />
    <category term="자동화" />
    <category term="cron" />
    <category term="Seunghwan Chang" />
    <category term="English" />
    <category term="would" />
    <category term="ppt" />
    <category term="발표" />
    <category term="consulting" />
    <category term="보고서" />
    <category term="파워포인트" />
    <category term="PT고자" />
    <category term="ppt고자" />
    <category term="ppt공포" />
    <category term="슬라이드" />
    <category term="Martin Hwang" />
    <category term="Ray" />
    <category term="distributed computing" />
    <category term="parallel computing" />
    <entry>
        <id>https://deepbaksu.github.io/2021/05/29/semantic-release/</id>
        <title>컨벤셔널 커밋을 이용한 CHANGELOG 및 시멘틱 버저닝(Semantic Versioning) 자동화</title>
        <link rel="alternate" href="https://deepbaksu.github.io/2021/05/29/semantic-release/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/2021/05/29/semantic-release/github-release-with-changelog.png&#34; alt=&#34;시멘틱 릴리즈를 통한 CHANGELOG 및 GitHub Release 자동화&#34; /&gt;&lt;/p&gt;
&lt;p&gt;시맨틱 버전(semantic version)이라는 단어를 들어 보았을 것이다. 개념은 어렵지 않지만 막상 시맨틱 버전에 맞추어 릴리즈 하기란 쉽지 않다. 왜냐하면 그동안 커밋 목록들을 살펴보고 호환성을 깨트리는 커밋이 있었는지 확인하고 버전을 결정해야 되기 때문이다. 그래서, 이 글에서는 &lt;a href=&#34;https://semantic-release.gitbook.io/semantic-release/&#34;&gt;시맨틱 릴리즈(semantic release)&lt;/a&gt;라는 도구를 사용하여 시맨틱 버전을 자동화 하는 방법을 소개하고 있다. 시멘틱 릴리즈가 무엇인지 설명하기에 앞서 시멘틱 버전이 무엇인지 알아야 한다.&lt;/p&gt;
&lt;h2 id=&#34;시멘틱-버전&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#시멘틱-버전&#34;&gt;&lt;/a&gt; 시멘틱 버전&lt;/h2&gt;
&lt;p&gt;시멘틱 버전이란 소프트웨어 패키지의 버전을 관리하는 프로토콜을 의미한다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;#123;MAJOR&amp;#125;.&amp;#123;MINOR&amp;#125;.&amp;#123;PATCH&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;로 나누어&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;기존 버전과 호환되지 않게 API가 바뀌면 “MAJOR 버전”을 올리고,&lt;/li&gt;
&lt;li&gt;기존 버전과 호환되면서 새로운 기능을 추가할 때는 “MINOR 버전”을 올리고,&lt;/li&gt;
&lt;li&gt;기존 버전과 호환되면서 버그를 수정한 것이라면 “PATCH 버전”을 올린다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;정식배포 전 버전이나 빌드 메타데이터를 위한 라벨을 덧붙이는 방법도 있다.&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;0.0.1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1.0.0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1.0.1-pre&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1.0.1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;시맨틱 릴리즈&lt;/em&gt; 란 커밋 메시지를 일관적으로 작성하여 이 &lt;em&gt;시맨틱 버전&lt;/em&gt; 을 자동화 해주는 도구이다.&lt;/p&gt;
&lt;h2 id=&#34;컨벤셔널-커밋&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#컨벤셔널-커밋&#34;&gt;&lt;/a&gt; 컨벤셔널 커밋&lt;/h2&gt;
&lt;p&gt;이때 커밋 메시지를 일관적으로 작성한다는 것은 AngularJS 커밋메시지 규칙을 바탕으로한 컨벤셔널 커밋(&lt;a href=&#34;https://www.conventionalcommits.org&#34;&gt;https://www.conventionalcommits.org&lt;/a&gt;)을 의미한다.&lt;/p&gt;
&lt;p&gt;컨벤션널 커밋은 사람과 기계 모두 이해할 수 있는 커밋메시지를 작성하기 위한 규칙이라고 볼 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사람이 커밋 메시지를 읽고 중요한 변화를 바로 이해할 수 있고&lt;/li&gt;
&lt;li&gt;일관화된 커밋 메시지 양식을 통해 CHANGELOG 등을 자동으로 생성한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;컨벤셔널 커밋 메시지는 다음과 같은 양식을 사용하여 작성된 메시지를 뜻한다.&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;type&amp;gt;[optional scope]: &amp;lt;description&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[optional body]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[optional footer(s)]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;예를 들어, 아래 커밋 메시지를 살펴보자.&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;fix: correct MINOR typos in code&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;see the issue for details&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;on typos fixed.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Reviewed-by: Z&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Refs #133&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;가장 첫번째 줄에 &lt;code&gt;fix:&lt;/code&gt; 키워드를 통해 해당 커밋은 버그 수정임을 알 수 있다.&lt;/p&gt;
&lt;p&gt;타입은 프로젝트마다 조금씩 다를 순 있으나 &lt;code&gt;fix&lt;/code&gt;와 &lt;code&gt;feat&lt;/code&gt;가 가장 중요한 단어이다.&lt;/p&gt;
&lt;p&gt;일반적으로 &lt;a href=&#34;https://github.com/angular/angular/blob/22b96b9/CONTRIBUTING.md#type&#34;&gt;오리지널문서에서 정의된 타입&lt;/a&gt;을 사용한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;build: Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)&lt;/li&gt;
&lt;li&gt;ci: Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)&lt;/li&gt;
&lt;li&gt;docs: Documentation only changes&lt;/li&gt;
&lt;li&gt;feat: A new feature&lt;/li&gt;
&lt;li&gt;fix: A bug fix&lt;/li&gt;
&lt;li&gt;perf: A code change that improves performance&lt;/li&gt;
&lt;li&gt;refactor: A code change that neither fixes a bug nor adds a feature&lt;/li&gt;
&lt;li&gt;style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)&lt;/li&gt;
&lt;li&gt;test: Adding missing tests or correcting existing tests&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이제 각 커밋을 컨벤셔널 커밋에 맞게 작성했을때, 다음과 같은 커밋 로그를 살펴보자.&lt;/p&gt;
&lt;h3 id=&#34;patch-업데이트&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#patch-업데이트&#34;&gt;&lt;/a&gt; PATCH 업데이트&lt;/h3&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;* 8fffafb fix: somethin&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;* c87775a refactor: something&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;위와 같은 커밋메시지는 &lt;strong&gt;PATCH&lt;/strong&gt; 버전의 변화를 의미한다. 새로운 피쳐(&lt;code&gt;feat&lt;/code&gt;)가 추가 되지 않았기 때문이다.&lt;/p&gt;
&lt;h3 id=&#34;minor-업데이트&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#minor-업데이트&#34;&gt;&lt;/a&gt; MINOR 업데이트&lt;/h3&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;* 8fffafb feat: create a new helper function&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;* c87775a fix: remove a condition&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;위 커밋 메시지들을 살펴보면 &lt;strong&gt;MINOR&lt;/strong&gt; 버전의 변화를 의미한다. 새로운 피쳐의 추가를 의미하는 &lt;code&gt;feat&lt;/code&gt; 키워드가 사용되었기 때문이다.&lt;/p&gt;
&lt;h3 id=&#34;major-업데이트&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#major-업데이트&#34;&gt;&lt;/a&gt; MAJOR 업데이트&lt;/h3&gt;
&lt;p&gt;그럼 &lt;strong&gt;MAJOR&lt;/strong&gt; 버전의 변화를 의미하는 커밋 메시지는 어떻게 생겼을까?&lt;/p&gt;
&lt;p&gt;아래와 같이 &lt;strong&gt;BREAKING CHANGE&lt;/strong&gt; 라는 키워드를 커밋 메시지에 추가해준다.&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;feat: allow provided config object to extend other configs&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;BREAKING CHANGE: `extends` key in config file is now used for extending other config files.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;일관된 커밋 메시지를 사용함으로써 CHANGELOG 또한 자동으로 생성할 수 있게 된다. 시맨틱 릴리즈를 사용하면 앞으로 시맨틱 버전과 함께 CHANGELOG 또한 자동으로 생성된다.&lt;/p&gt;
&lt;h2 id=&#34;실제-사용-방법&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#실제-사용-방법&#34;&gt;&lt;/a&gt; 실제 사용 방법&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;컨벤셔널 커밋 메시지를 사용한다.&lt;/li&gt;
&lt;li&gt;이후 릴리즈가 필요할 때 시맨틱 릴리즈 프로그램을 실행한다.&lt;/li&gt;
&lt;li&gt;혹은 깃헙 액션을 사용하여 자동화 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;시맨틱 릴리즈는 NodeJS 로 구현된 버전이 있고 Go로 구현된 두가지 버전이 존재한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/semantic-release/semantic-release&#34;&gt;https://github.com/semantic-release/semantic-release&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/go-semantic-release/semantic-release&#34;&gt;https://github.com/go-semantic-release/semantic-release&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 글에서는 Go 버전의 go-semantic-release와 깃헙 액션을 사용한다. 그래봤자 한 줄만 추가하면 끝이다.&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;steps:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;uses:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;actions/checkout@master&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;uses:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;go-semantic-release/action@v1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;with:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;github-token:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;$&amp;#123;&amp;#123;&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;secrets.GITHUB_TOKEN&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#125;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;그러면 커밋 메시지를 읽어 와서 위 이미지 처럼 CHANGELOG와 함께 GitHub 릴리즈를 생성한다.&lt;/p&gt;
&lt;h2 id=&#34;요약&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#요약&#34;&gt;&lt;/a&gt; 요약&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;컨벤셔널 커밋을 작성하면 semantic-release 를 사용하여 semantic versioning 규칙에 맞는 릴리즈를 자동화할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;질문이나 다른 기술 이야기가 듣고 싶으시다면 딥백수 슬랙에서 들으실 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://join.slack.com/t/deepbaksu/shared_invite/zt-89q9mtj6-bGVo9T5UhOWY8YArK24_gQ&#34;&gt;https://join.slack.com/t/deepbaksu/shared_invite/zt-89q9mtj6-bGVo9T5UhOWY8YArK24_gQ&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="semantic release" />
        <category term="semantic version" />
        <updated>2021-05-29T06:47:46.000Z</updated>
    </entry>
    <entry>
        <id>https://deepbaksu.github.io/2021/05/01/how-to-REST-from-gRPC/</id>
        <title>gRPC에서 REST까지</title>
        <link rel="alternate" href="https://deepbaksu.github.io/2021/05/01/how-to-REST-from-gRPC/"/>
        <content type="html">&lt;p&gt;gRPC를 통해 REST 서버를 만들어 보자. gRPC 클라이언트로 연결할 수 있으면 좋지만, REST가 보편적이기 때문에 REST API를 구현해줘야 할 필요가 있다. 또한, Heroku에서는 HTTP/2 를 지원하지 않기 때문에 gRPC 를 사용할 수 없어, 어쩔 수 없이 HTTP/1.1 REST API를 노출해줘야 한다.&lt;/p&gt;
&lt;p&gt;gRPC서버를 만들어놓으면&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;REST 서버&lt;/li&gt;
&lt;li&gt;OpenAPI (Swagger)&lt;/li&gt;
&lt;li&gt;OpenAPI 를 통한 클라이언트 코드&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;가 자동으로 생기게 된다. Protocol Buffer를 사용하기에 타입에 대한 걱정도 없어진다.&lt;/p&gt;
&lt;h2 id=&#34;why-grpc&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#why-grpc&#34;&gt;&lt;/a&gt; Why gRPC?&lt;/h2&gt;
&lt;p&gt;gRPC는 Protocol Buffer를 사용해 정의한다. Protocol Buffer를 사용해서 정의해두면 클라이언트와 서버 코드 모두 생성 가능해 전송되는 데이터의 형식에 대해서 걱정하지 않아도 된다.&lt;/p&gt;
&lt;p&gt;예를 들어, 클라이언트에서는 underscore 인줄 알고 보냈는데&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;my_name&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;ABC&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;서버에서는 camelCase의 형식으로 생각하고 적을 수 도 있다.&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;myName&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;ABC&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;또한, API를 먼저 protobuf로 정의해두어야 하기 때문에 API first development가 가능하다.&lt;br /&gt;
게다가, OpenAPI 스펙 또한 생성 가능해서 Swagger UI 뿐만 아니라 클라이언트 코드 생성이 쉽게 가능하다.&lt;/p&gt;
&lt;h2 id=&#34;how&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#how&#34;&gt;&lt;/a&gt; How?&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/2021/05/01/how-to-REST-from-gRPC/overview.svg&#34; alt=&#34;Overview&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/grpc-ecosystem/grpc-gateway&#34;&gt;gRPC Gateway&lt;/a&gt; 를 사용한다.&lt;/p&gt;
&lt;p&gt;그림에서는 gRPC Gateway 와 gRPC Server가 나뉘어져 있지만 간단한 서버라면 하나의 서버/하나의 포트에서 실행시킬 수 도 있다.&lt;/p&gt;
&lt;h3 id=&#34;비슷한-방법들&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#비슷한-방법들&#34;&gt;&lt;/a&gt; 비슷한 방법들&lt;/h3&gt;
&lt;p&gt;아래 두개 모두 gRPC Gateway 와 비슷한 기능을 한다. 하지만 gRPC Gateway의 장점은 하나의 서버에서 하나의 포트에서 gRPC와 REST Endpoint를 동시에 서빙 가능하다는 점이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gRPC-Web&lt;/li&gt;
&lt;li&gt;Extensible Service Proxy (ESP)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;code&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#code&#34;&gt;&lt;/a&gt; Code&lt;/h2&gt;
&lt;p&gt;protobuf에서 &lt;code&gt;google.api.http&lt;/code&gt;를 사용해 REST API를 설정해주기만 하면 된다.&lt;/p&gt;
&lt;figure class=&#34;highlight protobuf&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;syntax = &lt;span class=&#34;string&#34;&gt;&amp;quot;proto3&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; blog.v1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;google/api/annotations.proto&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;service&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;BlogService&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;rpc&lt;/span&gt; CreatePost (CreatePostRequest) &lt;span class=&#34;keyword&#34;&gt;returns&lt;/span&gt; (CreatePostResponse) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;option&lt;/span&gt; (google.api.http) = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            post: &lt;span class=&#34;string&#34;&gt;&amp;quot;/v1/blog&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            body: &lt;span class=&#34;string&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;rpc&lt;/span&gt; GetPosts (GetPostsRequest) &lt;span class=&#34;keyword&#34;&gt;returns&lt;/span&gt; (GetPostsResponse) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;option&lt;/span&gt; (google.api.http) = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            get: &lt;span class=&#34;string&#34;&gt;&amp;quot;/v1/blog/&amp;#123;post_id&amp;#125;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            additional_bindings &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                get: &lt;span class=&#34;string&#34;&gt;&amp;quot;/v1/blog&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;rpc&lt;/span&gt; DeletePost (DeletePostRequest) &lt;span class=&#34;keyword&#34;&gt;returns&lt;/span&gt; (DeletePostResponse) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;option&lt;/span&gt; (google.api.http) = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            delete: &lt;span class=&#34;string&#34;&gt;&amp;quot;/v1/blog/&amp;#123;post_id&amp;#125;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;예를 들어, &lt;code&gt;POST /v1/blog&lt;/code&gt;를 보내면 &lt;code&gt;BlogService.CreatePost&lt;/code&gt; RPC를 실행시킨다.&lt;/p&gt;
&lt;p&gt;프로토 파일을 정의했으면 &lt;code&gt;protoc&lt;/code&gt; 나 &lt;code&gt;buf&lt;/code&gt; 를 사용해 코드를 생성해주기만 하면 된다.&lt;/p&gt;
&lt;p&gt;Buf를 사용할 경우, &lt;code&gt;buf.gen.yaml&lt;/code&gt; 를 아래와 같이 생성하고 &lt;code&gt;buf generate&lt;/code&gt; 하면 된다.&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# buf.gen.yaml&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;version:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;v1beta1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;plugins:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;name:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;out:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;gen/go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;opt:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;paths=source_relative&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;name:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;go-grpc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;out:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;gen/go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;opt:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;paths=source_relative&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;name:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;grpc-gateway&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;out:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;gen/go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;opt:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;paths=source_relative&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;하나의 바이너리에서 gRPC Gateway 와 gRPC Server를 동시에 서빙하는 Go 서버 파일은 다음과 같다.&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; port = flag.Int(&lt;span class=&#34;string&#34;&gt;&amp;quot;port&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;80&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;--port 80&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; blogImpl &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  posts []*v1.Post&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  v1.UnimplementedBlogServiceServer&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 헤더를 보고 Content-Type: application/grpc 라면 gRPC 서버 핸들러를 이용하고&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 그 이외에 경우는 REST API이기 때문에 Gateway 핸들러에게 보내준다.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;allHandler&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(grpcServer *grpc.Server, httpHandler http.Handler)&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;http&lt;/span&gt;.&lt;span class=&#34;title&#34;&gt;Handler&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; h2c.NewHandler(http.HandlerFunc(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; r.ProtoMajor == &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; &amp;amp;&amp;amp; strings.Contains(r.Header.Get(&lt;span class=&#34;string&#34;&gt;&amp;quot;Content-Type&amp;quot;&lt;/span&gt;), &lt;span class=&#34;string&#34;&gt;&amp;quot;application/grpc&amp;quot;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      grpcServer.ServeHTTP(w, r)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      httpHandler.ServeHTTP(w, r)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;), &amp;amp;http2.Server&amp;#123;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  flag.Parse()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  addr := fmt.Sprintf(&lt;span class=&#34;string&#34;&gt;&amp;quot;:%d&amp;quot;&lt;/span&gt;, *port)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// gRPC 서버 생성&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  grpcServer := grpc.NewServer()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  v1.RegisterBlogServiceServer(grpcServer, &amp;amp;blogImpl&amp;#123;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// gRPC Gateway 생성&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  gwmux := runtime.NewServeMux()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  err := v1.RegisterBlogServiceHandlerFromEndpoint(context.Background(), gwmux, addr, []grpc.DialOption&amp;#123;grpc.WithInsecure()&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;panic&lt;/span&gt;(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  err = http.ListenAndServe(addr, allHandler(grpcServer, gwmux))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;panic&lt;/span&gt;(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;그러면 완성이다. 서버를 실행한 후 REST API가 제대로 작동하는지 &lt;code&gt;curl&lt;/code&gt; 을 사용해 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;POST /v1/blog&lt;/code&gt; 를 통해 새로운 블로그 포스트 생성.&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;bash&#34;&gt; curl -X &lt;span class=&#34;string&#34;&gt;&amp;#x27;POST&amp;#x27;&lt;/span&gt; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;bash&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;#x27;https://grpc-gateway-example.herokuapp.com/v1/blog&amp;#x27;&lt;/span&gt; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;bash&#34;&gt;  -H &lt;span class=&#34;string&#34;&gt;&amp;#x27;accept: application/json&amp;#x27;&lt;/span&gt; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;bash&#34;&gt;  -H &lt;span class=&#34;string&#34;&gt;&amp;#x27;Content-Type: application/json&amp;#x27;&lt;/span&gt; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;bash&#34;&gt;  -d &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;quot;content&amp;quot;: &amp;quot;내용 내용 내용&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;quot;post&amp;quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;id&amp;quot;: &amp;quot;1619938066293158896&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;content&amp;quot;: &amp;quot;내용 내용 내용&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;createdAt&amp;quot;: &amp;quot;2021-05-02T06:47:46.293159328Z&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;GET /v1/blog&lt;/code&gt; 를 통해 작성된 블로그 포스트 가져오기.&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;bash&#34;&gt; curl -X &lt;span class=&#34;string&#34;&gt;&amp;#x27;GET&amp;#x27;&lt;/span&gt; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;bash&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;#x27;https://grpc-gateway-example.herokuapp.com/v1/blog&amp;#x27;&lt;/span&gt; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;bash&#34;&gt;  -H &lt;span class=&#34;string&#34;&gt;&amp;#x27;accept: application/json&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;quot;posts&amp;quot;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;quot;id&amp;quot;: &amp;quot;1619938066293158896&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;quot;content&amp;quot;: &amp;quot;내용 내용 내용&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;quot;createdAt&amp;quot;: &amp;quot;2021-05-02T06:47:46.293159328Z&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;정리하면, gRPC 를 사용할 경우&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;완전한 API First Development가 가능하다.
&lt;ul&gt;
&lt;li&gt;일반적인 경우 swagger.json 파일을 손으로 작성하기 매우 까다롭기 때문에 API First Development가 매우 어렵다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;인터페이스가 프로토콜버퍼에 정의되어 있어 클라이언트와 서버와 서로 잘못된 데이터를 사용하는 일이 없다.&lt;/li&gt;
&lt;li&gt;코드가 자동으로 생성되어 boilerplate 코드를 훨씬 줄일 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;실제 이 코드는&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2021/05/01/how-to-REST-from-gRPC/swagger.png&#34; alt=&#34;Protobuf에서 생성된 Swagger UI&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://grpc-gateway-example.herokuapp.com/swagger-ui&#34;&gt;https://grpc-gateway-example.herokuapp.com/swagger-ui&lt;/a&gt; 에서 테스트 가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;더 자세한 코드는 &lt;a href=&#34;https://github.com/kkweon/grpc-rest-via-gateway&#34;&gt;https://github.com/kkweon/grpc-rest-via-gateway&lt;/a&gt; 에서 볼 수 있다.&lt;/p&gt;
</content>
        <category term="gRPC" />
        <category term="Go" />
        <category term="REST" />
        <updated>2021-05-01T20:43:00.000Z</updated>
    </entry>
    <entry>
        <id>https://deepbaksu.github.io/2020/12/14/nonviolent-communication/</id>
        <title>비폭력대화를 다시 읽다</title>
        <link rel="alternate" href="https://deepbaksu.github.io/2020/12/14/nonviolent-communication/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/2020/12/14/nonviolent-communication/helena-lopes-UZe35tk5UoA-unsplash.jpg&#34; alt=&#34;Photo by Helena Lopes on Unsplash&#34; /&gt;&lt;/p&gt;
&lt;p&gt;이 책에 처음 끌리게 된 건 마이크로소프트 CEO인 사티아 나넬라가 추천한 책이라는 마케팅 때문이었다.&lt;br /&gt;
눈부시게 성장하는 기업을 이끄는 것 보다도, 비대해진 공룡인 마이크로소프트를 변화시키기가 백만배 어렵지 않을까? 그 변화의 수장이 추천한 책이라는 것에 끌린 것이다.&lt;/p&gt;
&lt;p&gt;약간의 개똥철학이 섞여 있지는 않을지, 착하게 살기를 강요하거나 신비주의 공동체같은 이야기는 아닐까 하는&lt;br /&gt;
의구심을 가지고 읽기 시작했던 이 책은, 2019년에 읽은 책들 중 다시 읽고 싶은 책의 하나가 되었고, 이제 2020년의 끝자락에&lt;br /&gt;
이렇게 재독과 정리를 하게 되었다.&lt;/p&gt;
&lt;p&gt;현재의 심정은 이 책을 한 번씩 다시 읽으며 내 것으로 만들고 싶다는 것, 가족과 함께 워크샵에 참석하고 싶으며,&lt;br /&gt;
이 책이 담고 있는 내용이 정규 교과 과정에 포함되어 모든 사람들이 비폭력대화를 아는 사회가 되었으면 한다는 것이다.&lt;br /&gt;
누구나 비폭력대화의 용어를 아는 사회가 되었으면 하고, 나 자신이 비폭력대화가 몸에 베인 사람이 되었으면 싶다.&lt;/p&gt;
&lt;h2 id=&#34;관찰-느낌-욕구-부탁&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#관찰-느낌-욕구-부탁&#34;&gt;&lt;/a&gt; 관찰, 느낌, 욕구, 부탁&lt;/h2&gt;
&lt;p&gt;비폭력대화란 &lt;strong&gt;관찰, 느낌, 욕구, 부탁&lt;/strong&gt;의 4단계로 말을 한다.&lt;br /&gt;
서로간의 진정한 욕구를 알아내고, 연민으로 연결되면 모든 갈등과 오해가 풀린다는 것이다.&lt;/p&gt;
&lt;h3 id=&#34;관찰&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#관찰&#34;&gt;&lt;/a&gt; 관찰&lt;/h3&gt;
&lt;p&gt;인간은 감각기관으로 들어온 정보를 &lt;strong&gt;분석, 비교, 판단&lt;/strong&gt;을 한다. 하지만 비폭력대화에서 말하는 관찰이란 있는 그대로의 &lt;strong&gt;관찰&lt;/strong&gt;을 말한다. 가공하여 &lt;strong&gt;분석, 비교, 판단&lt;/strong&gt;한 것이 아닌 날 것 그대로의 데이터.&lt;/p&gt;
&lt;p&gt;“너는 약속시간에 매번 늦어!” 는 비난이고 공격이다.&lt;br /&gt;
“지난 두 번의 약속에 늦게 왔어” 는 있는 그대로의 관찰이다.&lt;/p&gt;
&lt;p&gt;분석, 비교, 판단이 맞는지 여부는 중요하지 않다. 그 자체 상대를 공격하는 것이고, 그때문에 상대가 자학, 변명, 분노를 준비한다는 것이 문제이다. 반면, 관찰은 있는 그대로의 사실, 서로가 오해할 수 없는 사실이기 때문에 상대에게 거부감을 주지 않는다. 또한, 이와 같이 공감할 수 있는 사실을 기반으로 대화를 시작할 수 있게 해준다.&lt;/p&gt;
&lt;h3 id=&#34;느낌&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#느낌&#34;&gt;&lt;/a&gt; 느낌&lt;/h3&gt;
&lt;p&gt;그런 관찰이 자신에게 불러 일으키는 느낌을 이야기한다.&lt;br /&gt;
혹은 반대로, 상대의 느낌과 욕구를 추측하여 물어볼 수도 있다.&lt;/p&gt;
&lt;p&gt;가장 많이 하는 실수는 생각과 느낌을 혼동하는 것이다.&lt;/p&gt;
&lt;p&gt;“나를 무시한다는 느낌이 들어.” 이것은 생각이며, 조금만 비틀어서 “무시한다는 생각이 들어서 마음이 속상하다” 말하면 느낌이 된다.&lt;br /&gt;
“내가 너무 무책임했다는 자책감을 느껴.” 이러한 생각을 조금만 비틀어서 “내가 무책임했다는 생각이 들어서 우울해졌어” 라고 말하면 느낌이 된다.&lt;/p&gt;
&lt;p&gt;책은 느낌을 제대로 표현할 수 있는 단어들을 소개하고 있다(88-91 pages). 느낌을 어떻게 표현해야 할지 모를때에 펼쳐보거나 하나씩 실생활에서 써보며 익숙해져야 할 것이다. 예를 들어, 감격, 짜릿, 안도, 갑갑, 맥풀리는, 민망한 등의 표현이 있다.&lt;/p&gt;
&lt;p&gt;느낌은 욕구를 보여주는 표지판이다. 욕구의 충족여부가 느낌으로 드러나는 것이다.&lt;br /&gt;
그렇기에 욕구를 알기 위해서는 드러난 느낌에서부터 추적해 나가야 한다.&lt;/p&gt;
&lt;h3 id=&#34;욕구&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#욕구&#34;&gt;&lt;/a&gt; 욕구&lt;/h3&gt;
&lt;p&gt;우리가 알아내야 하는 것은 나의 진정한 욕구, 상대의 진정한 욕구이다.&lt;br /&gt;
관찰하고 느낌을 제대로 표현하는 이유는 그 뒤에 있는, 원인이 되는 욕구가 무엇인지를 드러내기 위한 것이다.&lt;br /&gt;
왜냐하면, 사람들이 상대의, 그리고 나 자신의, 진정한 욕구를 모르기에 대화가 어긋나는 것이기 때문이다.&lt;/p&gt;
&lt;p&gt;느낌과 욕구는 강력하게 이어져 있어서 &lt;code&gt;~욕구가 있어서 ~라고 느낀다.&lt;/code&gt; 라는 문장으로 나올 수 있겠다.&lt;/p&gt;
&lt;p&gt;“나는 내 시간을 존중받고 싶은데, 너가 약속시간에 늦으니 서운해.”&lt;br /&gt;
“너는 아빠와 시간을 보내고 싶은데, 아빠가 지난 3주간 주말에도 출근을 해서 속상하니?”&lt;br /&gt;
이 경우 이러한 추측은 틀려도 된다. 물어보면서 상대의 욕구를 찾아내야 한다.&lt;/p&gt;
&lt;p&gt;우리가 관찰하고 느낌을 표현하는 이유는 바로 이 욕구를 알아내려는 것이다.&lt;/p&gt;
&lt;h3 id=&#34;부탁&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#부탁&#34;&gt;&lt;/a&gt; 부탁&lt;/h3&gt;
&lt;p&gt;이렇게 서로의 진정한 욕구까지 알게 되면, 그 다음으로 부탁을 할 수 있다. 나와 상대가 정말 원하는 것, 그 욕구를 알아야 거기에 맞게 대응할 수 있는 것이니 이렇게 보면 당연한 것이다.&lt;/p&gt;
&lt;p&gt;부탁은 &lt;strong&gt;정확&lt;/strong&gt;하고 &lt;strong&gt;구체적&lt;/strong&gt;이어야 한다. 욕구를 만족시킬 수 있는 무언가를 부탁해야 한다.&lt;br /&gt;
“나를 좀더 이해해 줬으면 좋겠어.” 가 아니라 “내가 주말 저녁 2시간, 동네 친구들과 맥주 한잔 하는걸 기꺼이 보내주면 좋겠어” 라고 말해야 하는 것이다.&lt;/p&gt;
&lt;p&gt;구체적이지 않은 부탁의 예가 책에 소개되어 있다.&lt;br /&gt;
자신과 함께하는 시간을 가졌으면 하는 아내가 남편에게 너무 일에만 매달리지 말라고 부탁을 했더니 골프 토너먼트를 신청했다는 이야기. 웃프다.&lt;/p&gt;
&lt;h2 id=&#34;비폭력대화-더-나아간-이야기들&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#비폭력대화-더-나아간-이야기들&#34;&gt;&lt;/a&gt; 비폭력대화 - 더 나아간 이야기들&lt;/h2&gt;
&lt;h3 id=&#34;나의-책임&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#나의-책임&#34;&gt;&lt;/a&gt; 나의 책임&lt;/h3&gt;
&lt;p&gt;불우한 어린시절을 보내었건, 끔찍한 범죄의 희생자였건 현재의 나의 욕구에 대한 책임은 온전히 나에게 있다. 로젠버그는 전쟁, 분쟁의 유가족들, 성범죄 피해자들을 많이 도왔다. 유사한 상황에 놓여 있었지만 그들의 대응은 다들 달랐다. 그 대응의 책임은 나에게 있는 것이다.&lt;/p&gt;
&lt;p&gt;“어린시절 왕따를 당했으니, 나는 그 트라우마로 나자신을 이렇게 자책하고 비하하고 망가뜨려도 돼” 라고 현재의 나의 행동의 책임을 타인에게 전가해서는 안되는 것이다. 상대방의 행위에 대해 상대방이 책임이 없다는 것은 아니니 주의하여 읽어야 할 부분이다.&lt;/p&gt;
&lt;h3 id=&#34;감사하기&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#감사하기&#34;&gt;&lt;/a&gt; 감사하기&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;위험한 것&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;감사는 비난만큼 위험한 것이다. 나를 우쭐하게 하고 자만하게 한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;진정한 감사&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;진정한 감사는 세 가지 요소가 들어가 있어야 한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;구체적으로 &lt;strong&gt;어떠한 행위&lt;/strong&gt;때문에&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;어떤 욕구&lt;/strong&gt;가 채워졌으며,&lt;/li&gt;
&lt;li&gt;그 결과로 &lt;strong&gt;어떤 기분&lt;/strong&gt;인지를 이야기 해야 하는 것이다.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1) 차를 태워줘서 2) 일찍 퇴근해 아이들을 안아주고 싶다는 욕구가 채워져서 3) 너무 기뻐 - 고마워&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1) 여행 정보를 알려줘서 2) 여행 준비를 충실히 하고 싶다는 욕구가 채워져서 3) 준비의 큰 걱정을 덜어서 홀가분해 - 고마워&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;나-자신에게도-비폭력대화를-쓰기&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#나-자신에게도-비폭력대화를-쓰기&#34;&gt;&lt;/a&gt; 나 자신에게도 비폭력대화를 쓰기&lt;/h3&gt;
&lt;p&gt;자책하는 것도 폭력이다. &lt;code&gt;이런 욕구가 있는데 충족하지 못해서 이런 느낌이 든다.&lt;/code&gt; 라고 표현해야는 것이다.&lt;/p&gt;
&lt;p&gt;“매번 숙제가 하기 싫고, 미루기도 하고, 까먹기도 하니 나는 정말 한심한 녀석이야!” 라고 자신에게 라벨을 붙여서는 안된다.&lt;br /&gt;
“숙제를 한번도 빼먹지 않아 성실하게 보이고 싶었는데, 숙제를 깜박해서 너무 속상하다.” 라고 자신의 욕구와 느낌을 표현해야 하는 것이다.&lt;br /&gt;
그렇게 욕구를 알고 나면 그 욕구를 어떻게 충족시킬 수 있을지 고민할 수 있게 되는 것이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;드라마를 줄이자.&lt;/li&gt;
&lt;li&gt;친구와 스터디 모임을 하자&lt;/li&gt;
&lt;li&gt;숙제 알람앱을 이용하자. 등등&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;비폭력대화가-일상이-되는-나를-꿈꾼다&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#비폭력대화가-일상이-되는-나를-꿈꾼다&#34;&gt;&lt;/a&gt; 비폭력대화가 일상이 되는 나를 꿈꾼다.&lt;/h2&gt;
&lt;p&gt;2020년은 나 자신의 현재를 많이 돌아볼 수 있는 시간이었다. 소통과 커뮤니케이션은 잘하는 편이라 생각하였었는데, 완벽한 착각이었다. 자학은 아니다. 비폭력대화를 읽은 지금, 자학이면 안된다. 현재를 알았으니 앞으로 나아가면 된다.&lt;br /&gt;
앞으로도 가능하면 매년 이 책, 혹은 비폭력대화와 관련한 책을 읽으며 나 자신의 것으로 만들 것이며, 가족과 회사생활, 인터넷의 댓글들에서도 비폭력대화가 녹아들게 나 자신을 단련하겠다.&lt;/p&gt;
&lt;h2 id=&#34;기억나는-문장들&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#기억나는-문장들&#34;&gt;&lt;/a&gt; 기억나는 문장들&lt;/h2&gt;
&lt;p&gt;“다른 사람들을 이렇게 판단하거나 분석하는 것은 우리 자신의 가치관과 욕구의 비극적인 표현이라고 나는 믿는다.” 47p&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- &amp;quot;나는 퇴근하면 깨끗하게 정돈된 집에서 쉬고 싶은 욕구가 있어&amp;quot; 라는 표현을 자기파괴적으로 표현하는 것이 자칼 언어이며 &amp;quot;집안꼴이 이게 뭐야!&amp;quot; 가 된다.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- 그렇기에 우리는 그 폭언에 즉각 반응하는 대신에 상대의 느낌과 욕구에 귀를 기울이는 기린이 되어야 한다.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;“나는 사람들이 벌을 피하기 위해서가 아니라 바꾸는 것이 자신에게 이롭다는 걸 알기 때문에 변할 때 모두에게 이익이 된다고 믿는다.” 56p&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- 아이들에게 상과 벌을 주고 있는 나 자신들 돌아보았다. 어떻게 해야 할까?&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;“&#39;게으르다’나 &#39;바보같다’라는 부정적인 꼬리표의 효과는 명백하지만, 긍정적이거나 &#39;요리사’처럼 중립적으로 보이는 말도 한 사람을 전인격적인 존재 그 자체로 보는 능력을 제한한다.” 64p&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- 라벨을 붙이지 말자.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;“평가가 들어가지 않은 관찰은 인간 지성의 최고 형태” 크리슈나무르티, 64p&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- 호문호찰하는 순임금이 생각난 구절이다. 명상에서도 과거나 미래가 아닌 현재를 관찰하라 말한다.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;“관찰에 평가를 섞으면 듣는 사람은 그것을 비판으로 받아들이고 우리가 하는 말에 저항감을 느끼기 쉽다.” 69p&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- &amp;quot;너는 내 전화를 세 번 받지 않았어&amp;quot; 에는 비판, 비난이 없지만, &amp;quot;너 나 무시하는 거야? 왜 전화를 안받아?&amp;quot; 는 비난이 들어가있다.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- &amp;quot;너는 이번주에 세 번 지각을 했어&amp;quot;는 관찰이지만, &amp;quot;넌 게으름뱅이에다 무책임하구나&amp;quot;는 판단, 비난이다. 옳은 판단이라 하더라도 해서는 안된다.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;“NVC는 다른 사람들의 말과 행동이 우리의 느낌을 불러일으키는 자극은 될 수 있어도, 결코 우리 느낌의 원인은 아니라는 인식을 새롭게 해준다.&lt;br /&gt;
우리의 느낌은 그 순간 자신의 필요와 기대에 따른 것이기도 하지만, 다른 사람의 말과 행동을 어떻게 받아들이기로 선택했는가에도 달려있다.” 99p&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- 원인은 우리 자신의 욕구에 있다. 욕구는 느낌으로 드러나게 된다. 반대로 느낌을 통해서 우리, 그리고 타인의 욕구를 유추해 낼 수도 있다.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;“사람들이 상대방을 탓하기 보다 자신들이 원하는 것을 말하기 시작하는 순간부터 모두의 욕구를 충족할 방법을 찾을 가능성이 훨씬 커지는 것을 나는 여러 번 경험했다.” 106p&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- 자신의 욕구를 자신이 충족시킬 책임이 있다.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;“우리가 상대로부터 무엇을 받고 싶은지 명확하기 표현할수록 우리의 욕구가 충족될 가능성이 커진다.” 138p&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- 그러려면 나의 욕구가 무엇인지를 알아야 한다.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;“진심으로 부탁하고 있다는 사실을 알리는 가장 확실한 방법은, 상대방이 우리의 부탁에 응하지 않았을 때 그 사람의 말에 공감해주는 것이다.” 147p&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- 방청소좀 해줄래?&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- 싫어요!&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- 싫어요? 어디서 감히! 이렇게 말하는 순간 이것은 부탁이 아니라 강요였다는 것이 드러나게 된다.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;“NVC의 목적은 자신이 원하는 것을 얻기 위해 다른 사람의 행동을 바꾸려는 것이 아니다. 솔직함과 공감에 바탕을 둔 인간관계를 형성하여 결국에는 모든 사람의 욕구가 충족되도록 하는 것이다.” 154p&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- NVC를 통해 누군가를 내 입맛대로 하도록 하는게 목적이 아닌 것이다.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;“무언가를 하려고 하지 말고 그곳에 그대로 있어라.” 167p&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- 위로, 조언, 동정, 심문, 설명 같은것보다 가만히 옆에서 공감만 하고 있는 것이다.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;“강한 느낌을 표현하는 사람들은 대체로 자신의 의도를 확인해 주기를 바란다고 생각하면 안전할 것이다.” 176p&lt;br /&gt;
“우리에게 위협적으로 들렸던 모든 메시지 뒤에는, 자신들의 삶에 기여해 달라고 우리에게 호소하는, 충족되지 않은 욕구를 가진 사람이 있다는 것이다.” 178p&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- 거친 말과 행동에 바로 반응하지 말고 그 상대를 관찰하고 느낌을 이해하고, 결국은 욕구를 알아내야 하는 것이다.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;“공감이란 다른 사람이 경험하는 것을 존중하는 마음으로 이해하는 것이다. 그러나 우리는 공감을 하는 대신에 자신의 견해나 느낌을 설명하거나, 조언을 하거나, 상대를 안심시키고 싶은 충동을 강하게 느낀다.” 185p&lt;/p&gt;
&lt;p&gt;“그들이 나를 얼마나 무례하게 대하는지 판단하는 대신, 그들의 행동 뒤에 숨은 고통과 욕구를 듣는데 집중했다.” 204p&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- 자칼 언어는 부탁의 말을 자멸적으로 표현하는 것이라 한다. 무례, 폭언이라는 껍질 뒤에 숨겨진 그들의 욕구를 찾아내야 한다.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;“분노를 온전히 표현하는 방법의 첫 단계는 다른 사람의 행동은 결코 우리 느낌의 원인이 아니라는 점을 깨닫는 것이다.” 245p&lt;br /&gt;
“그러므로 우리 느낌의 원인은 다른 사람의 행동이 아니라 그 순간의 우리 욕구이다.” 246p&lt;br /&gt;
“분노를 일으키는 것은 다른 사람의 행동이 아니라 바로 내 머릿속에 있는, 상대에 대한 생각과 그의 행동에 대한 나의 해석임을 깨달았다.” 249p&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- 분노를 일으키는 나의 욕구를 찾아야 한다. 분노라는 강렬한 표현은 나의 욕구를 찾기 쉽게 해준다.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;“두 당사자가 바로 지금 서로에게 무엇을 원하는지를 분명히 표현할 수 있다면, 우리는 모든 사람의 욕구를 충족하기 위해서 어떻게 하면 되는지 알게 될 것이다.” 279p&lt;/p&gt;
&lt;p&gt;“욕구는 사람이 특정한 어떤 행동을 하는 것과는 아무 관계도 없다.”&lt;br /&gt;
“수단/방법은 요청, 바람, 필요한 것, 그리고 &#39;해법’의 형태로 나타날 수 있는데 특정한 사람들이 취할 수 있는 특정한 행동과 관계가 있다.” 281p&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- 욕구와 수단/방법을 혼동하지 말것. 어떤 수단/방법을 하고 싶다고 말하는 것을 욕구라고 착각하고는 한다.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- 자동차를 사고 싶어는 욕구가 아니다. 그것을 통해 얻고자 하는 진정한 욕구를 찾아내야 한다.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;“그들이 ‘아니요’ 할 때, 그들은 우리가 부탁하는 것에 ‘예!’ 하지 못하게 하는 어떤 욕구가 있다고 말하고 있는 것이다.” 295p&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- 거부마저 즐거운 분석의 소재가 된다.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;“일반적인 칭찬은 아무리 긍정적이더라도 판단 형식으로 나타나고 다른 사람의 행동을 조종하기 우해 쓰이는 경우가 많다. NVC는 오로지 서로 기쁜 마음을 나누려는 목적으로 감사의 마음을 표현한다. (1) 우리 행복에 기여한 상대방의 행동 (2) 충족된 나의 욕구 (3) 그 결과 우리가 느끼는 기쁨을 말함으로써 고마운 마음을 표현한다.” 362p&lt;/p&gt;
&lt;p&gt;“춤을 출 수 있을 때는 절대 걷지 마라” 저자의 할머니, 366p&lt;/p&gt;
</content>
        <category term="Hyunseok Jeong" />
        <category term="대화" />
        <category term="비폭력대화" />
        <updated>2020-12-14T03:46:51.000Z</updated>
    </entry>
    <entry>
        <id>https://deepbaksu.github.io/2020/12/03/happy-working/</id>
        <title>행복하게 일하자</title>
        <link rel="alternate" href="https://deepbaksu.github.io/2020/12/03/happy-working/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/2020/12/03/happy-working/8-fold.png&#34; alt=&#34;Noble Eightfold Path&#34; /&gt;&lt;/p&gt;
&lt;p&gt;9년 전 쯤에 코이케 류노스케 스님의 책들을 몇 권을 이어 읽었었다. 최근에 명상을 접하며, 이 책들이 떠올라 다시 읽는데 9년의 세월 덕인지 나름의 이해가 늘어났다.&lt;/p&gt;
&lt;p&gt;원시 불교는 마음의 구조에 대한 학문이고, 이를 기반으로 마음을 단련하는 방법을 알려준다.&lt;br /&gt;
이 책에서 스님은 불교에서 얻은 깨달음을 일터에 적용하는 법을 이야기해준다. 책에 대한 나름의 이해와 정리, 밑줄을 공유해본다.&lt;/p&gt;
&lt;p&gt;알라딘 링크: &lt;a href=&#34;http://aladin.kr/p/x6otp&#34;&gt;http://aladin.kr/p/x6otp&lt;/a&gt; (품절)&lt;/p&gt;
&lt;h2 id=&#34;머리말&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#머리말&#34;&gt;&lt;/a&gt; 머리말&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;...원시 불교는 &amp;#x27;사람의 마음 구조는 어떻게 되어있는지를 완벽하게 해명한 학문과 그런 탄탄한 심리학에 기초하여&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;마음을 단련하기 위한 연습이라는 두 가지로 나눠져 있다.&amp;quot; 맺음말. 245p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;이렇게 불교에서 얻은 이해와 학습을 일에 어떻게 적용할 수 있을까?&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;그 순간에 해야 할 일에만 마음을 집중시키고, 마음속에서 번뇌라는 부정적인 사고가 나오지 않도록 관리할 수&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;있게 되었다.&amp;quot; 8p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;이 책에서 지향하는 궁극의 상태이다. 눈 앞의 일에 몰입하자는 것이며, 그러기 위해 몰입을 방해하는 번뇌를 멀리하고 관리하는 것도 배우자는 것이다.&lt;/p&gt;
&lt;h2 id=&#34;번뇌는-어디에서-올까&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#번뇌는-어디에서-올까&#34;&gt;&lt;/a&gt; 번뇌는 어디에서 올까?&lt;/h2&gt;
&lt;p&gt;스님의 한글 번역서 각각은 약간씩 다르게 표현하고 있지만 불교에서 삼독(三毒) 이라 부르는 탐욕, 분노, 어리석음 이 세가지에서 온다.&lt;/p&gt;
&lt;p&gt;탐욕은 더 받고 싶은 것이다.&lt;br /&gt;
누군가에게 인정받고 사랑받고 싶어하는 것도 탐욕이라 하겠다.&lt;/p&gt;
&lt;p&gt;분노는 반대로 밀어내고 싶은 것이다.&lt;/p&gt;
&lt;p&gt;어리석음은 언듯 이해가 쉽지 않은데 마음이 어지러워서 제대로 이해하지 못하는 것이라 하겠다.&lt;/p&gt;
&lt;h3 id=&#34;일터에서의-번뇌&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#일터에서의-번뇌&#34;&gt;&lt;/a&gt; 일터에서의 번뇌&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;상사에게 잘보이고 승진하고 싶어하는 욕심에 잡아먹히면 탐욕의 번뇌가 일어난다.&lt;/li&gt;
&lt;li&gt;같이 밥먹기 싫은 사람에게 차마 거절을 못하고 억지로 밥을 먹으면 분노의 번뇌가 일어난다.&lt;/li&gt;
&lt;li&gt;나 같이 잘난 사람에게 이렇게 시시한 일을 시킨다고? 분노의 번뇌가 일어난다.&lt;/li&gt;
&lt;li&gt;뒤에서 욕하고, 앞에서는 아첨을 하면 머리속 정보가 엉켜서 어지러워진다. 어리석음의 번뇌가 일어난다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;일터에서의 번뇌를 어떻게 다루어야 할까?&lt;br /&gt;
&lt;code&gt;아! 지금 탐욕/분노/어리석음의 번뇌가 일어나고 있구나!&lt;/code&gt; 하고 포착하는 것이고, 그 번뇌가 걷잡을 수 없어지기 전에 통제하고 멈추는 훈련을 반복하는 것이다. 반복하면 잘하게 된다.&lt;/p&gt;
&lt;p&gt;싫은 사람이 밥을 먹자고 하는 경우를 들어보자.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;싫다는 분노의 번뇌부터 인지하고 다독인 다음에, 정중히 거절해야 한다. 그래야 싫은 내색이 전달되지 않는다.&lt;/li&gt;
&lt;li&gt;같이 먹게 되었다면, 그 순간에 집중하여 열심히 함께 먹어야 한다. 먹기 싫다는 생각을 되내면 안된다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;마음을-통제하는-기술&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#마음을-통제하는-기술&#34;&gt;&lt;/a&gt; 마음을 통제하는 기술&lt;/h3&gt;
&lt;p&gt;마음을 통제하는 기술이란 뭘까? 우선 여기서 통제한다는 그 &#39;마음’이란 뭘까?&lt;br /&gt;
대니얼 카너먼의 “생각에 관한 생각” (알라딘: &lt;a href=&#34;http://aladin.kr/p/k1NiJ&#34;&gt;http://aladin.kr/p/k1NiJ&lt;/a&gt; )을 읽으면 &lt;code&gt;system1&lt;/code&gt;, &lt;code&gt;system2&lt;/code&gt; 라는 말이 나온다.&lt;/p&gt;
&lt;p&gt;매우 단순하게 표현하자면 &lt;code&gt;system1&lt;/code&gt;은 무의식중에 튀어나오는 생각들이라보면 된다. 요즘 인터넷에서 흔한 표현이 된 &amp;quot;의식의 흐름&amp;quot;이라고 보면 되겠다. 밥먹다 말고, 가스불을 끄고 왔는지 생각하다가 결혼기념일은 언제지? 새로나온 전자제품을 사고싶다는 식으로 이리저리 튀는 생각들. &lt;code&gt;system2&lt;/code&gt;는 좀더 의식적인 뇌의 활동이라고 보면 되겠다. 2 x 3 + 5 * 6 = 이라는 문제를 풀때의 의식이다. 한 마디만 덧붙이자면 &lt;code&gt;system1&lt;/code&gt;이 무조건 나쁜 것은 아니다.&lt;/p&gt;
&lt;p&gt;마음을 통제한다는 것은 &lt;code&gt;system1&lt;/code&gt;에 휘둘리지 않고, &lt;code&gt;system2&lt;/code&gt;로 의식의 흐름을 통제하는 것이다.&lt;br /&gt;
밥을 먹으면 밥을 먹는 것에, 대화를 나누면 대화에, 일을 할때에는 일 그 자체에 몰입하며, &lt;code&gt;system1&lt;/code&gt;이 머리를 들이밀고 들어와도 바로 알아채고 딱 잡아서 멀리 던져버리는 것이다.&lt;/p&gt;
&lt;h3 id=&#34;번뇌의-순간을-포착하여-통제하기&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#번뇌의-순간을-포착하여-통제하기&#34;&gt;&lt;/a&gt; 번뇌의 순간을 포착하여 통제하기&lt;/h3&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;언제 어느 순간이건, 주의 깊게 의식을 통제할 수 있다면 번뇌 에너지의 연쇄작용에 변화를 줘서 긍정적인 방향으로&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;전환시킬 수 있다.&amp;quot; 45p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;명상을 한다는 것은 바로 이런 통제를 하는 연습을 따로 시간을 내서 하는 것이다. 숙달이 되면 일상에 적용할 수 있게 되는 것이다.&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;&amp;#x27;왜 내가 이런 일을 해야만 하는 거냐고!&amp;#x27; 이렇게 외치고 싶은 분노의 번뇌에너지는 &amp;#x27;이런 일을 내가 하는 것이&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;무슨 의미가 있지?&amp;#x27; 라고 번역할 수 있을 것이다. 즉, 의미를 묻는다는 사실은 그 자체로 어떤 오만함을&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;동반하고 있다.&amp;quot; 50p, 51p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;이번 재독에서 가장 많이 얻은 부분이다. (오만할 근거가 하나도 없는 나인데) 회사에서 화가 올라오는 많은 상황은 바로 나의 오만함에서 비롯되었다는 것을 깨달았다. 겸손해져야 한다.&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;싫다는 뇌 속의 불쾌감으로 마음이 빨려 들어가는 것을 의식적으로 통제해서 어쨌든 싫더라도 청소를 시작해 보는 것은&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;승리로 가는 첫걸음이 될 것이다.&amp;quot; 54p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;업무이건 개인사이건 손이 안가고, 하기 싫고, 스트레스인 일이 있을 것이다. 계속 미루지만 마음 한구석에서 스트레스로 남아있는 녀석. 그냥 당장 하자. 그것이 통제이다. 컨트롤이다. 하기 싫은 마음을 통제, 컨트롤하며 하게 하는 것.&lt;/p&gt;
&lt;h3 id=&#34;스님의-상담&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#스님의-상담&#34;&gt;&lt;/a&gt; 스님의 상담&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;험담하는 자리에서 빠져나오고 싶어요&lt;/strong&gt;&lt;br /&gt;
거절해야 한다. 하지만 본인의 부정적인 시각, 번뇌를 잘 다스린 다음 거절 할 것&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;아무런 고민이 없다는 것이 고민입니다&lt;/strong&gt;&lt;br /&gt;
집착없는 고독, 기대와 반발이 없이 온화한 상태라면 문제 없지만, 그건 아닐 것이다. 자신의 진짜 속마음과 말과 행동을 일치 시켜라&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;꼴 보기 싫은 사람, 어떻게 하나요?&lt;/strong&gt;&lt;br /&gt;
분노로 나에게 불이 붙었을 때는 불을 끄는데 먼저 집중해야 한다. 불을 붙인 사람부터 잡으려 해서는 안된다.&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;화를 내는 사람이 되어서는 안된다. 화를 내고 있는 것을 바라보는 사람이 되어야 한다.&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;분노와 일체되지 않는다.&amp;quot; 70p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;직장동료들로부터 따돌림 당하고 있어요&lt;/strong&gt;&lt;br /&gt;
당신 탓이다. 당신이 내뿜는 번뇌 에너지 탓이다.&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;아무리 표정이나 말로 아닌 척 꾸미려고 해도 마음이 번뇌 에너지로 오염되어 있으면&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;그 에너지는 한순간에 주위에 전달된다.&amp;quot; 78p&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;사실은 당신이 발산하는 부정적인 사고로 오염된 번뇌가 그들의 무의식적인 번뇌에 연쇄반응을 일으킨 것이다.&amp;quot; 79p&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;감정을 속여서는 안 된다. 감정은 당신이 아니며 당신의 소유물도 아니다. 또한 감정 속에 당신이 있어서도 안 된다.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;감정이란 것은 아주 짧은 한순간에만 당신의 집을 방문해서 무책임하게 방을 어지럽히고 당신이 정신을 차렸을때는&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;흔적도 없이 내빼 버리는 제행무상(諸行無常)에 지나지 않기 때문이다.&amp;quot; 83p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;스트레스 때문에 폭식 습관이 생겼어요&lt;/strong&gt;&lt;br /&gt;
욕구를 참지 못한 순간을 체험학습의 순간으로 삼아라. 이렇게 먹었더니 배가 더부룩하고 머리도 지끈하네, 다음날 아침이 되니 더 힘드네 하고 예민하게 자신을 관찰하라. 일로 쌓인 스트레스는 일로 풀어야 한다. 술, 도박, 과식등 부정적인 수단을 쓰면 안된다.&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;이렇게 과식했을 때의 신체 상태를 자세히 느껴 보고 &amp;#x27;이런 충격을 두 번 다시는 반복하고 싶지 않다&amp;#x27;는 생각을&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;마음의 밑바닥에서 확실하게 인식할 수 있도록 만든다. 이렇게 해보면 자신을 통제할 수 있는 지혜가 생기게 된다.&amp;quot; 87p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;위선적인 말을 해야 돼서 괴롭습니다&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;마음이 충실감으로 가득 차려면 &amp;#x27;마음과 언어와 신체가 완전히 일치&amp;#x27;되어야 한다.&amp;quot; 93p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;불일치는 번뇌의 원인인 탐욕, 분노, 어리석음 중에서 어리석음을 유발하게 된다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;인생에서든 일에서든 목표가 없어요&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;거창하고 환상에 가까운 목표를 세우려고 할 바에는 오히려 목표라는 것이 없이 단지 그때그때 주어진 일만을&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;착실하게 해나가는 편이 훨씬 마음에는 유익하다.&amp;quot; 103p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;일에 집중이 안 되고 효율이 떨어져요&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;무슨 일이 되었든 머리만 이리저리 굴리지 말고, 몸과 마음을 완전히 일치시켜서 파고들면 스트레스는&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;전혀 발생하지 않는다.&amp;quot; 114p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;(책내용 아님) &lt;code&gt;일이란 해치우는 것이 아니라 정성스럽게 하나하나 마무리 하는 것이다.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;의욕이 없고, 일을 미루고만 싶어요&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;의욕이 없다는 것은 에너지가 소진된 게 아니라 분노에너지가 꽉 찬 것이다.&lt;br /&gt;
기분 전환이라는 변명으로 술, 오락, 여행으로 도망가면 안된다. 눈 앞의 일, 작은 것부터 하나씩 해치워나가야 한다.&lt;/p&gt;
&lt;h2 id=&#34;몸과-마음-삶-그리고-일이-하나가-되는-연습&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#몸과-마음-삶-그리고-일이-하나가-되는-연습&#34;&gt;&lt;/a&gt; 몸과 마음, 삶 그리고 일이 하나가 되는 연습&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;어떤 일이든지 부정적인 번뇌 사고에 사로잡히지 말고 여유로운 마음으로 야무지게 하나하나 극복해 나가면&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;자신의 능력이 향상될 뿐만 아니라 이런저런 욕망이나 번뇌에 휩쓸리지 않는 굳건한 인격이 형성될 것이다.&amp;quot; 145p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;재미없고 하찮아 보이는 일이라 하더라도 전심을 다해 하나씩 해나가야 한다.&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;마음이 신체와 언어와 완전히 일치해 있는 상태여야만 우리는 최고의 충실감을 약속받을 수 있다.&amp;quot; 149p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;몰입의 순간이 탄생하는 지점이다.&lt;/p&gt;
&lt;h3 id=&#34;올바르게-살며-일하기-위해서&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#올바르게-살며-일하기-위해서&#34;&gt;&lt;/a&gt; 올바르게 살며 일하기 위해서&lt;/h3&gt;
&lt;p&gt;팔정도. 올바른 8가지 - &lt;a href=&#34;https://bit.ly/3qeGVeZ&#34;&gt;https://bit.ly/3qeGVeZ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;모든 번뇌의 근원인 탐욕, 분노, 어리석음을 벗어나는 방법이 팔정도와 삼학이다. 그 중 팔정도를 보자.&lt;br /&gt;
올바르지 않은 것은 무엇인가? 탐욕, 분노, 어리석음의 번뇌로 마음이 오염되고 머리속이 잡념으로 가득차 있고 스트레스 받는 상황이다. 그러면 올바름은 무엇을 말하는 것일까? 여기서의 올바름은 절대적인 선과 같은 개념이라기 보다는 있는 그대로를 말한다.&lt;/p&gt;
&lt;p&gt;중용의 시작을 잠깐 언급해보자.&lt;/p&gt;
&lt;p&gt;천명지위성, 솔성지위도, 수도지위교. 타고나는 것을 성이라고 하며, 그 성에서 올바른 것들을 선택하는 것을 도라고 하며, 반복 수련하여 내 것으로 만드는 것을 교라고 한다. 올바름을 이렇게 해석해보고 싶다. 번뇌에 휩싸이지 않고 성 중에서 올바른 것을 선택한다는 것이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;정사유, 올바르게 사유하기&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;생각, 말, 행동의 일치가 중요한데 가장 중요한 것은 생각이다.&lt;br /&gt;
의식이 흘러가는 대로 내버려두지 말고, 탐욕, 분노, 어리석음이 스며들지 않게 통제해야 한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;정언, 올바르게 말하기&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;생각, 말, 행동 삼업(三業)의 일치가 중요하다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;거짓말하지 않기: 말로 나온 것과 마음속 진실의 불일치&lt;/li&gt;
&lt;li&gt;비난하지 않기: 비난은 분노라는 번뇌와 관련이 있다.&lt;/li&gt;
&lt;li&gt;나쁜 소문 만들어내지 않기: 상대방 앞에서 못할 말을 만들어내서 생기는 불일치&lt;/li&gt;
&lt;li&gt;쓸데없는 이야기 말기: 불필요한 말은 삼가야 한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;이 네 가지 덕목을 범하지 않도록 매일매일 주의해야 한다. 그렇게만 된다면 마음과 언어와 신체가 서서히&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;일치를 이루게 되고, 말로 인해 벌어지는 인간관계의 갈등과 스트레스도 줄어들 것이다.&amp;quot; 175p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;정업, 올바르게 일하기&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;현재 눈앞의 일에 집중하는 것이다.&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;여러 다양한 상황 속에서 현재 자신의 신체가 어디에 있고, 무엇을 위해서 무슨 일을 하고 있는지를&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;의식하는 감지력을 갈고 닦아 두어야 한다. 이걸 의식적으로 유념하게 되면&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;지금 이 순간의 현실에 마음이 완전히 연동하고 바싹 달라붙게 된다.&amp;quot; 180p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;정명, 올바르게 살아가기&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;올바른 사명, 혹은 인간으로 태어나서 받는 명(령)대로 살아가기라고 해석해본다.&lt;br /&gt;
중용의 &amp;quot;천명지위성&amp;quot;과 같이 해석해보았다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;정정진, 올바르게 마음쓰기&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;무엇을 추구하고 무엇을 멀리해야 하는 지를 안다면, 이것을 꾸준히 반복하여 내 것으로 만들어야 한다.&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;정진이란 &amp;#x27;이미 일어난 좋은 일들을 반복하려 하고, 자기에게 해를 주었던 일을 두 번 다시 반복하지&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;않도록 마음에게 들려주는 것&amp;#x27;이라고 집약할 수 있다.&amp;quot; 191p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;정념, 올바르게 인식하기&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;센서를 예민하게 잘 관리하는 것을 말한다.&lt;br /&gt;
탐욕, 분노, 어리석음의 번뇌가 끼어들려고 하면 재빨리 눈치채는 것이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;회의시간에 딴짓 하고 있구나! 어리석게 그러지 말자!&lt;/li&gt;
&lt;li&gt;발표 잘해서 인정받고 싶은 탐욕에 휩싸여 있구나! 그러지 말자!&lt;/li&gt;
&lt;li&gt;나에게 감히 이런 말을 하다니 하고 오만함에 휩싸여 분노하고 있구나! 그러지 말자!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;하고 나 자신을 알아채는 것이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;정정, 올바르게 몰두하기&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;정념으로 재빨리 눈치 채었다면, 정정으로 그걸 끊어내는 것이다.&lt;br /&gt;
공부하다 스마트폰 만지는 나를 알아채면, 바로 스마트폰을 끌 수 있는 능력이다.&lt;br /&gt;
이를 위한 준비가 지금까지 말해왔던 것이다.&lt;br /&gt;
정사유, 정어, 정업으로 생각, 말, 행동을 일치시켜서 번뇌를 제거하고&lt;br /&gt;
정정진으로 이를 꾸준히 반복하며&lt;br /&gt;
정념으로 인식하여 놓치지 않는 것이다.&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;있는 힘을 다해서 마음을 무언가 한 가지 일에만 집중시키고 묶어 두는 것이다. 이리저리 날뛰는&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;마음을 한곳에 고정시켜 둬야 한다.&amp;quot; 209p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;정견, 올바르게 바라보기&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;바른 견해를 가지는 것이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;제행무상(諸行無常)&lt;/code&gt; 모든 것은 끊임 없이 변한다는 것을 이해하고 받아들이는 것이다. 삶의 변화를 힘들어하지 말자.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;일체개고(一切皆苦)&lt;/code&gt; 우리의 마음을 가지고 놀려고 하는 탐욕, 분노, 어리석음이 모두 괴로움과 스트레스를 유발한다는 것을 이해하자.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;제법무아(諸法無我)&lt;/code&gt; 나 라는 존재는 없다는 것을 인정한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;우리는 무언가에 몰두하여 강한 충실감을 느낄 수 있게 되면 &amp;#x27;자신&amp;#x27;을 실감할 수 없게 된다.&amp;quot; 223p&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;자아라는건 불행하고 충실하지 않을 때에만 발생하게 되는 환각에 지나지 않는다는 사실을 알아 두어야 한다.&amp;quot; 223p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;이제-제대로-일해봅시다&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#이제-제대로-일해봅시다&#34;&gt;&lt;/a&gt; 이제 제대로 일해봅시다&lt;/h3&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;좌선을 하고 나서야 태어나서 처음으로 집중한다는 것이 어떤 것인지를 이해하게 되었습니다. 그리고 직장에서 의식이&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;일탈될 것 같을 때마다 마음을 통제해서 제대로 집중할 수 있게 되었습니다. 업무를 마친 후에도 스트레스가 쌓이지 않게&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;되니 일을 한다는 게 즐거워졌습니다.&amp;quot; 243p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
        <category term="Hyunseok Jeong" />
        <category term="Happy working" />
        <category term="Mindfulness" />
        <category term="Noble Eightfold Path" />
        <updated>2020-12-03T07:52:06.000Z</updated>
    </entry>
    <entry>
        <id>https://deepbaksu.github.io/2020/11/22/ask-data/</id>
        <title>리마인드용으로 훑어볼만한 책 - 데이터를 부탁해</title>
        <link rel="alternate" href="https://deepbaksu.github.io/2020/11/22/ask-data/"/>
        <content type="html">&lt;h2 id=&#34;ai-ai-ai&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ai-ai-ai&#34;&gt;&lt;/a&gt; AI AI AI!!!&lt;/h2&gt;
&lt;p&gt;그야말로 AI의 시대입니다. 뉴스, 유튜브, 페이스북에 AI에 대한 이야기가 안나오는 날이 있을까 싶을 정도로 AI의 시대에 살고 있는거 같습니다. 그렇기 때문에 우리는 하루하루 마음을 졸이며 살고 있죠. 이 두려움은 업종, 직군을 따지지 않고 깊숙히 스며드는 것 같습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/11/22/ask-data/justice.jpg&#34; alt=&#34;AI AI AI!&#34; /&gt;&lt;/p&gt;
&lt;p&gt;이런 이유로 AI에 대한 책이 많이 나옵니다. 특히 인공지능쪽을 잘 모르는 분들을 위한 책들도 많이 나오고 있습니다. 그런 책들의 흐름은 대부분 이런 식입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;선형회귀를 통한 예측&lt;/li&gt;
&lt;li&gt;로지스틱 회귀 예측&lt;/li&gt;
&lt;li&gt;랜덤포레스트를 통한 분류&lt;/li&gt;
&lt;li&gt;머신러닝에서 더 깊숙히 들어간 딥러닝 모델.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;아무것도 모르던 시기엔 이게 전부인줄 알았습니다. 그런데 그렇지 않더라고요.&lt;/p&gt;
&lt;h2 id=&#34;what-is-data-analyst-who-is-data-analyst&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#what-is-data-analyst-who-is-data-analyst&#34;&gt;&lt;/a&gt; What is Data Analyst? Who is Data Analyst?&lt;/h2&gt;
&lt;p&gt;비전공자에서 IT쪽으로 오신 분이라면 공감하실지 모르겠는데, 손정의가 아무리 &#39;AI AI AI!!!&#39;라고 외쳐도 결국엔 알고리즘, 운영체제, 수학, 통계학과 같이 기본기가 중요하고 실제로 기업에서도 이런 기본기를 갖춘 사람을 선호한다는 걸 알게 됩니다. 프레임워크를 쓰는 건 어쩌면 그에 비하면 너무 간단한 문제일 수 있으니까요.&lt;/p&gt;
&lt;p&gt;그래서 저는 고민을 많이 하고 있습니다. 데이터분석 입문 수업을 광고하는 곳에서는 데이터 분석가가 되는 게 쉬우면서도 연봉을 올리기 좋다고 하지만, 실제로는 그렇지 않거든요.&lt;/p&gt;
&lt;p&gt;단순히 pandas써서 데이터 전처리 조금 할 줄 알고, sklearn과 같은 머신러닝 프레임워크 조금 다룰 줄 안다고 해서 데이터 분석가가 될 수 있다고 할 수는 없으니까요.&lt;/p&gt;
&lt;p&gt;그럼 데이터 분석가란 무엇일까요? 데이터 분석가란 누구인걸까요? 좋은 데이터 분석가란 어떤 사람일까요?&lt;/p&gt;
&lt;h2 id=&#34;find-the-essence-prove-by-action&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#find-the-essence-prove-by-action&#34;&gt;&lt;/a&gt; Find the Essence. Prove by Action&lt;/h2&gt;
&lt;blockquote&gt;&lt;p&gt;The only thing that doesn’t change is the fact that it changes&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;Heraclitos&lt;/strong&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;p&gt;사실 저는 저 질문들에 대한 답을 아직까지 잘 모르겠어요. 답을 찾아가는 과정인 것 같다는 생각을 하기도 해요. 가끔 보면 저 질문들에 대한 답을 안다는 듯 잘난척을 하는 글들이 보이곤 하죠. 정말 잘 하시는 분들인 경우도 있지만, 광고글이거나 잘 모르는데 잘 아는척 하는 글을 볼 때가 많이 있어요.&lt;/p&gt;
&lt;p&gt;모든 IT분야가 그렇듯, 데이터분석 쪽도 계속해서 빠른 속도로 변화가 일어나고 있어요. 그렇기 때문에 혼란스러운게 아닐까 생각이 들어요. 과거, 데이터분석은 특별한 훈련을 받은 사람들만 했다면 이제는 점점 더 누구나 쉽고 간단하게 분석을 할 수 있고 워크플로우까지 만들 수 있는 시대가 왔으니까요.&lt;/p&gt;
&lt;p&gt;그렇다 해도 데이터분석가에게 본질적으로 변하지 않는 요구능력은 데이터를 바라보는 능력이지 않을까요? 물론 데이터를 바라본다는 건 비즈니스 관점으로도 바라볼 수 있고, 백엔드 개발 관점으로도 바라볼 수 있고 여러가지 관점으로 바라볼 수 있겠죠. 하지만 데이터 분석가에겐 기본적으로 통계학적 관점이 필요하지 않을까 생각이 들어요. 조금 더 엄격하게 데이터를 바라볼 수 있게 해주니까요.&lt;/p&gt;
&lt;p&gt;그렇기 때문에라도 통계공부는 해야 하는데 손이 잘 안가긴 하죠.&lt;/p&gt;
&lt;p&gt;이 책은 이런 여정을 떠나는 사람이 잠시 쉬며 훑어볼 용도로 괜찮은 책이에요. 아예 모르는 사람에게는 적합하지 않고, 익히는 과정에 있는 사람들이 이런게 있구나 하는 전체적인 조망을 보는 데 유용한 책. 그런 책이에요.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/11/22/ask-data/book_cover.jpg&#34; alt=&#34;책 표지 - 출처 : yes24&#34; /&gt;&lt;/p&gt;
&lt;p&gt;주말 하루 시간을 잡으면 금방 읽을 수 있는 책이라 너무 무겁지 않아서 좋았어요.&lt;/p&gt;
&lt;p&gt;책 링크 : &lt;a href=&#34;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=188000067&#34;&gt;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=188000067&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="Jinyoung Song" />
        <category term="데이터분석" />
        <category term="통계분석" />
        <category term="통계학" />
        <category term="통계역사" />
        <updated>2020-11-22T16:58:43.000Z</updated>
    </entry>
    <entry>
        <id>https://deepbaksu.github.io/2020/11/20/principles-in-refactoring/</id>
        <title>리팩터링 2판 - 리팩터링 원칙</title>
        <link rel="alternate" href="https://deepbaksu.github.io/2020/11/20/principles-in-refactoring/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/2020/11/20/principles-in-refactoring/edgar-chaparro-r6mBXuHnxBk-unsplash.jpg&#34; alt=&#34;Photo by Marc Edgar Chaparro on Unsplash&#34; /&gt;&lt;/p&gt;
&lt;p&gt;리팩터링(2판)의 구성은 1-5장의 개론과 설명, 6-12장의 실제 기법 설명으로 이루어져 있다.&lt;br /&gt;
그 중 4장은 테스트에 관한 내용인데, 물론 리팩터링과 밀접한 주제이긴 하지만 여기서는 연관성과 간략한 소개만 있으며, 5장은 6장부터 12장을 보는 방법에 대한 안내이다.&lt;br /&gt;
리팩터링의 전반적 개요를 다룬 2장 리팩터링 원칙을 정리하여 공유한다.&lt;/p&gt;
&lt;h2 id=&#34;리팩터링이란&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#리팩터링이란&#34;&gt;&lt;/a&gt; 리팩터링이란&lt;/h2&gt;
&lt;p&gt;리팩터링은 외부에서 보이는 &lt;code&gt;겉보기 동작(observable behavior)&lt;/code&gt;은 그대로 유지하되,&lt;br /&gt;
코드를 이해하고 수정하기 쉽게 내부의 구조를 변경하는 것이다. 즉, 설계 변경이다.&lt;/p&gt;
&lt;p&gt;새 집으로 이사를 와서 가구와 전자제품을 적당히 편리하다 싶은 곳에 두고 살아가면서&lt;br /&gt;
점차 가장 적합하다 싶은 위치로 재배치를 한다고 할까? 아무리 고심해서 결정한다 하여도&lt;br /&gt;
살아보기 전에는 최적의 배치를 알 수 없는 것이다. 심지어는 그때는 맞았는데 시간이 흐르며 바뀌는 것도 있다.&lt;/p&gt;
&lt;p&gt;특정한 방식으로 코드를 정리하는 것만이 리팩터링이다. 겉보기 동작에 변화가 없는 작은 단계들을 거쳐서 완성하는데,&lt;br /&gt;
그렇기에 언제든 중간 단계에서 멈출 수 있다.&lt;/p&gt;
&lt;p&gt;코드 정리 및 구조 변경은 &lt;code&gt;재구성(restructuring)&lt;/code&gt; 이며, 리팩터링은 재구성의 특수한 한 형태이다.&lt;br /&gt;
사실 이 책을 읽기 전에는 재구성을 리팩터링이라 오해하고 있었다.&lt;/p&gt;
&lt;p&gt;겉보기 동작에 변화가 없다는 점에 리팩터링과 성능 최적화는 같다고 볼 수 있지만 그 목표는 다르다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;리팩터링: 겉보기 동작 변화없음. 목표는 이해와 수정이 쉬운 코드&lt;/li&gt;
&lt;li&gt;성능 최적화; 겉보기 동작 변화없음. 목표는 속도 개선&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;두-개의-모자&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#두-개의-모자&#34;&gt;&lt;/a&gt; 두 개의 모자&lt;/h2&gt;
&lt;p&gt;켄트 벡의 비유인데 기능을 추가하는 것과 리팩터링을 하는 것은 엄격히 구분하라는 것이다. 둘을 섞어서 하다가는 탈이 나고 만다.&lt;br /&gt;
기능 추가할 때는 기능 추가 모자를 쓰고, 기능 추가만 한다. 리팩터링을 할 때는 리팩터링 모자를 쓰고, 리팩터링만 한다.&lt;/p&gt;
&lt;h2 id=&#34;리팩터링을-왜-하나요&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#리팩터링을-왜-하나요&#34;&gt;&lt;/a&gt; 리팩터링을 왜 하나요?&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;난 뛰어난 프로그래머가 아니에요. 단지 뛰어난 습관을 지닌 괜찮은 프로그래머일 뿐이에요.&amp;quot; 83p, 켄트 벡&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;소프트웨어 아키텍처가 좋아진다&lt;/li&gt;
&lt;li&gt;소프트웨어를 이해하기 쉬워진다.&lt;/li&gt;
&lt;li&gt;버그를 쉽게 찾을 수 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이와 같은 이유로, 프로그래밍 속도가 빨라진다.&lt;/p&gt;
&lt;p&gt;마틴 파울러는 &lt;code&gt;설계 지구력 가설(Design Stamina Hypothesis)&lt;/code&gt; 이라는 표현을 썼는데&lt;br /&gt;
리팩터링을 잘 해두어서 &lt;code&gt;설계가 잘 되어 있고&lt;/code&gt;, &lt;code&gt;이해하기 쉬우며&lt;/code&gt;, &lt;code&gt;버그도 찾기 쉬운 코드&lt;/code&gt;에서는&lt;br /&gt;
코드에 기능을 추가하거나, 유지 보수하는 속도가 결코 느려지지 않는다는 것이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/11/20/principles-in-refactoring/designStaminaGraph.png&#34; alt=&#34;design stamina hypothesis&#34; /&gt;&lt;/p&gt;
&lt;p&gt;프로젝트 초기에 아무리 세심하고 치밀하게 설계를 해도 코딩을 시작하면 그때부터 디자인은 점차 망가지게 마련이다.&lt;br /&gt;
리팩터링을 한다는 것은 설계를 지속적으로 개선한다는 것이다. 그 덕분에 시간이 지나도 생산성이 떨어지지 않게 되는 것이다.&lt;/p&gt;
&lt;h2 id=&#34;리팩터링은-언제-해야-할까&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#리팩터링은-언제-해야-할까&#34;&gt;&lt;/a&gt; 리팩터링은 언제 해야 할까?&lt;/h2&gt;
&lt;p&gt;책에서는 다양한 기준으로 리팩터링의 시점을 이야기하고 있다.&lt;/p&gt;
&lt;h3 id=&#34;세-번-반복하면-리팩터링-돈-로버츠don-roberts&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#세-번-반복하면-리팩터링-돈-로버츠don-roberts&#34;&gt;&lt;/a&gt; 세 번 반복하면 리팩터링 - 돈 로버츠(Don Roberts)&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;그냥 코딩하다가&lt;/li&gt;
&lt;li&gt;중복 작업을 인식하면 일단은 그냥 코딩한다.&lt;/li&gt;
&lt;li&gt;하지만, 비슷한 작업을 세 번째 하게 되면 리팩터링을 할 때이다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;준비를-위한-리팩터링preparatory-refactoring-기능을-쉽게-추가할-수-있다&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#준비를-위한-리팩터링preparatory-refactoring-기능을-쉽게-추가할-수-있다&#34;&gt;&lt;/a&gt; 준비를 위한 리팩터링(Preparatory Refactoring) - 기능을 쉽게 추가할 수 있다.&lt;/h3&gt;
&lt;p&gt;현재 구조를 살펴보고 구조를 다듬어서 새로운 기능을 적용하기 좋게 만들어주자.&lt;br /&gt;
버그를 잡을때도 좋다. 버그를 한 군데로 모아서 리팩터링하는 것이다.&lt;/p&gt;
&lt;h3 id=&#34;이해를-위한-리팩터링comprehension-refactoring&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#이해를-위한-리팩터링comprehension-refactoring&#34;&gt;&lt;/a&gt; 이해를 위한 리팩터링(Comprehension Refactoring)&lt;/h3&gt;
&lt;p&gt;수정을 하려면 이해를 해야한다.&lt;br /&gt;
이해를 한 다음 간단하게 변수, 함수의 이름을 바꾸는 것 만으로도 전체 설계가 눈에 들어오기 시작한다.&lt;br /&gt;
이해한 것을 코드 속에 녹여내야 한다. 그래야 다음에 코드를 들여다 볼때 또다시 이해를 해야하는 과정을 뛰어넘을 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;쓰레기-줍기-리팩터링litter-pickup-refactoring&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#쓰레기-줍기-리팩터링litter-pickup-refactoring&#34;&gt;&lt;/a&gt; 쓰레기 줍기 리팩터링(Litter-Pickup Refactoring)&lt;/h3&gt;
&lt;p&gt;코드 분석중 원래 하려던 일과 다른 문제들, 비유하자면 쓰레기들을 발견하였다면?&lt;br /&gt;
당장 할 수 있는 것들을 조금이라도 해두고, 나머지는 메모를 해둔 다음에 하던 일로 돌아간다.&lt;br /&gt;
리팩터링은 작은 단계들로 이루어지고, 각각의 단계는 전체 코드를 깨뜨리지 않는다는 것을 기억하자.&lt;br /&gt;
작은 단계라도 할 수 있는 단계만큼 해두는 것이다.&lt;/p&gt;
&lt;h3 id=&#34;계획된-리팩터링과-수시로-하는-리팩터링&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#계획된-리팩터링과-수시로-하는-리팩터링&#34;&gt;&lt;/a&gt; 계획된 리팩터링과 수시로 하는 리팩터링&lt;/h3&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;보기 싫은 코드를 발견하면 리팩터링하자. 그런데 잘 작성된 코드 역시 수많은 리팩터링을 거쳐야 한다.&amp;quot; 88p&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;무언가 수정하려 할 때는 먼저 수정하기 쉽게 정돈하고(단, 만만치 않을 수 있다) 그런 다음 수정하자.&amp;quot; - 켄트 벡. 88p&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;리팩터링 작업 대부분은 드러나지 않게, 기회가 될 때마다 해야 한다.&amp;quot; 89p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;앞서 언급한 준비를 위한, 이해를 위한, 쓰레기 줍기 리팩터링은 기회가 될때에 하는 것이다.&lt;br /&gt;
(때로는 필요할 수 있지만) 리팩터링이란 계획적으로 하는게 아니다.&lt;/p&gt;
&lt;h3 id=&#34;오래-걸리는-리팩터링&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#오래-걸리는-리팩터링&#34;&gt;&lt;/a&gt; 오래 걸리는 리팩터링&lt;/h3&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;팀 전체가 리팩터링에 매달리는 데는 회의적이다.&amp;quot; 89p, 마틴 파울러&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;일부러 시간을 내서 하지 말고, 리팩터링 해야할 코드를 만날 때 마다, 리팩터링 하자.&lt;/p&gt;
&lt;h3 id=&#34;코드-리뷰에-리팩터링-활용하기&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#코드-리뷰에-리팩터링-활용하기&#34;&gt;&lt;/a&gt; 코드 리뷰에 리팩터링 활용하기&lt;/h3&gt;
&lt;p&gt;코드를 보고 떠오르는 걸 개선안을 제시하지 말고 리팩터링을 하면 어떻게 될까 생각하거나, 실제로 해보자&lt;br /&gt;
작성자 없이 pull request 하는 것은 효과적이지 않다. 작성자와 함께 앉아 코드를 훑어가면서 리팩터링 하자(pair programming)&lt;/p&gt;
&lt;h3 id=&#34;관리자에게는-뭐라고-말해야-할까&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#관리자에게는-뭐라고-말해야-할까&#34;&gt;&lt;/a&gt; 관리자에게는 뭐라고 말해야 할까?&lt;/h3&gt;
&lt;p&gt;필요성을 아는 관리자라면 리팩터링을 권장할 것이며, 팀원의 리팩터링 역량이 충분한지 수시로 살펴볼 것이다.&lt;br /&gt;
필요성을 모르는 관리자라면 말하지 말자. 내가 필요성을 알고, 그 덕분에 더 빠르게 개발할 수 있다는 것을 알면 &lt;code&gt;책임있게&lt;/code&gt;, &lt;code&gt;프로답게&lt;/code&gt;, 리팩터링을 하는 것이다.&lt;/p&gt;
&lt;h3 id=&#34;리팩터링하지-말아야-할-때&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#리팩터링하지-말아야-할-때&#34;&gt;&lt;/a&gt; 리팩터링하지 말아야 할 때&lt;/h3&gt;
&lt;p&gt;굳이 수정할 필요 없다면 하지 말자. 외부 API 또는 그와 유사하게 호출하여 쓰는 코드라면 그냥 두자. 충분히 내부동작을 이해해야 할 시점에 리팩터링을 하면 된다.&lt;/p&gt;
&lt;h2 id=&#34;리팩터링-시-고려할-문제&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#리팩터링-시-고려할-문제&#34;&gt;&lt;/a&gt; 리팩터링 시 고려할 문제&lt;/h2&gt;
&lt;p&gt;발생할 수 있는 문제에 대한 고려도 해야 한다.&lt;/p&gt;
&lt;h3 id=&#34;새-기능-개발-속도가-저하된다고&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#새-기능-개발-속도가-저하된다고&#34;&gt;&lt;/a&gt; 새 기능 개발 속도가 저하된다고?&lt;/h3&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;리팩터링의 궁극적인 목적은 개발 속도를 높여서, 더 적은 노력으로 더 많은 가치를 창출하는 것이다.&amp;quot; 92p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;당장 보아서는 속도가 느려지는 것 같지만, 애초에 리팩터링의 목표중 하나는 개발 속도를 높이는 것이다.&lt;br /&gt;
리팩터링은 &lt;code&gt;도덕적&lt;/code&gt;, &lt;code&gt;미학적&lt;/code&gt; 이유로 하는 것이 아니다. &lt;code&gt;경제적&lt;/code&gt;인 이유로 하는 것이다.&lt;/p&gt;
&lt;h3 id=&#34;코드-소유권&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#코드-소유권&#34;&gt;&lt;/a&gt; 코드 소유권&lt;/h3&gt;
&lt;p&gt;다른 팀원, 또는 나아가 외부로 공개된 코드는 변경하기가 쉽지 않다.&lt;br /&gt;
그래도 최소한 팀 단위의 소유권을 가지도록 하여(=좀 더 자유롭고 넓은 코드 수정권한을 주어서) 관리의 책임은 나누되 수정은 자유롭게 해주자. 단, 이것은 마틴 파울러의 의견이다.&lt;/p&gt;
&lt;h3 id=&#34;브랜치&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#브랜치&#34;&gt;&lt;/a&gt; 브랜치&lt;/h3&gt;
&lt;p&gt;브랜치로 나누어서 작업하는 경우 머지(브랜치를 master로 합치기), 또는 통합(수시로 master를 브랜치로 합치기)을 할 수 있다.&lt;br /&gt;
마틴 파울러는 매우 짧게 통합하기를 주장한다. 2-3일 보다도 짧게 CI(Continuous Integration) 또는 TBD(Truck-Based Development) 하자고 한다. 다만 master 브랜치를 건강하게 유지하려면, 개발중인 기능은 flag를 이용하여 disable 을 시켜두도록 한다.&lt;/p&gt;
&lt;p&gt;무엇보다 CI와 리팩터링은 궁합이 좋다. 켄트 백이 &lt;code&gt;익스트림 프로그래밍(eXtreme Programming)&lt;/code&gt;을 만든 이유이다.&lt;/p&gt;
&lt;h3 id=&#34;테스팅&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#테스팅&#34;&gt;&lt;/a&gt; 테스팅&lt;/h3&gt;
&lt;p&gt;리팩터링의 대표적 특징은 겉보기 동작이 똑같이 유지된다는 것이다.&lt;br /&gt;
절차에 따라서 하면 단계별 변경이 작다. 테스트를 그 단계별로 매번 하면 된다. 테스트 코드가 필요한 이유이다.&lt;br /&gt;
믿을 수 있는 &lt;code&gt;자동 리팩터링&lt;/code&gt;만 쓰자는 사람들도 있으니 참고하자.&lt;/p&gt;
&lt;h3 id=&#34;레거시-코드&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#레거시-코드&#34;&gt;&lt;/a&gt; 레거시 코드&lt;/h3&gt;
&lt;p&gt;어마무시한, 손도 대기 싫은 레거시 코드를 만져야 한다면?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;테스트를 보강한다.&lt;/li&gt;
&lt;li&gt;조금씩이라도 더 개선하려고 노력한다.&lt;/li&gt;
&lt;li&gt;자주보는 곳을 더 개선한다. 더 잘 이해하게 되는 곳이고, 더 중요한 곳일 가능성이 높다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;데이터베이스&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#데이터베이스&#34;&gt;&lt;/a&gt; 데이터베이스&lt;/h3&gt;
&lt;p&gt;데이터베이스도 리팩터링 할 수 있다.&lt;br /&gt;
변환 수행토드 작성후, VCS에 저장한 다음 마이그레이션 스크립트를 실행한다.&lt;br /&gt;
가능한 여러단계로 나누어서 한다. 프로덕션 환경에서 문제 생겼을때 되돌리기 쉽기 때문이다.&lt;/p&gt;
&lt;h2 id=&#34;리팩터링-아키텍처-애그니yagni&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#리팩터링-아키텍처-애그니yagni&#34;&gt;&lt;/a&gt; 리팩터링, 아키텍처, 애그니(YAGNI)&lt;/h2&gt;
&lt;p&gt;먼저 충분히 고려하는 것과, 나중에 개선하는 것 중에서 어느게 나을까?&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;나는 나중에 문제를 더 깊이 이해하게 됐을 때 처리하는 쪽이 훨씬 낫다고 생각하는 편이다.&amp;quot; 101p, 마틴 파울러&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;이 부분은 현업에서 느끼고는 했었는데 많은 공감이 되었다.&lt;/p&gt;
&lt;p&gt;당장 필요한 기능만 구현하자. 대신 제대로, 멋지게, 정성스럽게 구현하자.&lt;br /&gt;
불확실한 미래에 대한 대비보다는 당장 눈앞의 기능을 잘 구현하자는 것이다.&lt;br /&gt;
개발을 해나가며 요구사항을 더 잘 이해하게 되면 리팩터링을 하면서 더 개선하자.&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- You Aren&amp;#x27;t Going to Need It.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- Simple design&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- Incremental design&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;리팩터링과-소프트웨어-개발-프로세스&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#리팩터링과-소프트웨어-개발-프로세스&#34;&gt;&lt;/a&gt; 리팩터링과 소프트웨어 개발 프로세스&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;자가 테스트 코드, 지속적 통합, 리팩터링이라는 세 기법은 서로 강력한 상승효과를 발휘한다.&amp;quot; 102p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Test-Driven Development = 자가 테스트 코드(self-testing code) + 리팩터링&lt;br /&gt;
단계별로 리팩터링을 하면서, 사이사이마다 테스트를 통해 겉보기 동작이 변함 없는지 확인하는 것이다.&lt;/p&gt;
&lt;h2 id=&#34;리팩터링과-성능&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#리팩터링과-성능&#34;&gt;&lt;/a&gt; 리팩터링과 성능&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;나는 실제로 소프트웨어를 이해하기 쉽게 만들기 위해 속도가 느려지는 방향으로 수정하는 경우가 많다.&amp;quot; 103p&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;하드 리얼타임(hard real-time) 시스템을 제외한 소프트웨어를 빠르게 만드는 비결은, 먼저 튜닝하기 쉽게 만들고 나서 원하는 속도가 나게끔 튜닝하는 것이다.&amp;quot; 103p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;성능 개선의 세 방법은 다음과 같은데 3번으로 가자.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;시간예산 분배(time budgeting): 하드 리얼타임 시스템에서 많이 사용. 자원을 최적으로 할당함&lt;/li&gt;
&lt;li&gt;끊임없이 관심 기울이기: 성능 개선에만 신경쓰면 코드가 점점더 알아먹기 어렵게 되고, 컴파일러, 런타임, 하드웨어 동작을 충분히 이해하지 못한 코드가 된다.&lt;/li&gt;
&lt;li&gt;일단은 코드를 다루기 쉽게 만드는데 집중하자. 때가 되면 각을 잡고 성능 최적화를 하는 것이다.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;프로파일러로 분석하여 시간, 공간을 잡아먹는 지점을 알아낸다. 짬밥과 직관으로 하는 것이 아니다.&lt;/li&gt;
&lt;li&gt;알아낸, 개선할 수 있는 작은 부분들을 개선한다. 적은 노력으로 큰 효과를 얻을 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;시스템에 대해 잘 알더라도 섣불리 추측하지 말고 성능을 측정해봐야 한다.(profiling)&amp;quot; 105p&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;성능에 대한 흥미로운 사실은, 대부분 프로그램은 전체 코드 중 극히 일부에서 대부분의 시간을 소비한다는 것이다.&amp;quot; 105p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;이와 같이 하면&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;성능 개선에 투입하는 시간 최적화&lt;/li&gt;
&lt;li&gt;리팩터링 잘 되어 있으니 세밀하게 분석하기 쉽고, 프로파일러가 지적하는 성능문제 범위가 좁아진다.&lt;/li&gt;
&lt;li&gt;당장의 리팩터링은 성능을 저하시키지만, 나중에 튜닝하기 훨씬 좋아진다&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Hyunseok Jeong" />
        <category term="Martin Fowler" />
        <category term="Refactoring" />
        <category term="Principles" />
        <updated>2020-11-20T11:10:02.000Z</updated>
    </entry>
    <entry>
        <id>https://deepbaksu.github.io/2020/11/19/google-analytics/</id>
        <title>분석이 궁금하다면 - 고객이 보이는 구글 애널리틱스</title>
        <link rel="alternate" href="https://deepbaksu.github.io/2020/11/19/google-analytics/"/>
        <content type="html">&lt;h2 id=&#34;데이터분석머신러닝과-적정-기술&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#데이터분석머신러닝과-적정-기술&#34;&gt;&lt;/a&gt; 데이터분석(머신러닝)과 적정 기술&lt;/h2&gt;
&lt;p&gt;이제 데이터분석(머신러닝)이 중요하다는 명제는 명제가 아닌 공리가 된듯 합니다. 그래서 파이썬, R을 배우려는 사람도 많고 수학과 통계학을 배우려는 분도 많아진 거 같습니다. 물론 여기엔 저도 포함됩니다.&lt;/p&gt;
&lt;p&gt;그런데 배워도 뭔가 빈 느낌을 받곤 합니다. 직장인이 기술을 배울 땐 재미로 배운다기보다 실무에 적용해서 성과를 올리기 위해 배우는 경우가 많은데, 쉽게 업무에 적용하기 어렵기 때문입니다. 여기에는 여러가지 이유가 있겠지만, 기술이 체화되고 익숙해지는 데 시간이 걸리는 게 첫 번째 이유라고 생각합니다. 그 다음 이유는 머신러닝이나 딥러닝을 실무에 적용하는 건 본질적으로 쉬운 일이 아니기 때문일겁니다. 데이터를 어떻게 적재하고 어떻게 뽑아낼 것이며 어떻게 학습시킬 것인지도 고민해야 하며 이런 과정을 통해 업무 프로세스를 어떻게 바꿀지도 고민해야 하기 때문에 세밀한 기획과 함께 시행착오 경험이 필요합니다.&lt;/p&gt;
&lt;p&gt;그렇다면 데이터분석을 포기해야 할까요?&lt;/p&gt;
&lt;p&gt;그렇지 않다고 생각합니다.&lt;/p&gt;
&lt;p&gt;작은 성공 경험의 축적이 필요하다고 생각할 뿐입니다. 이를 위해 적합한 툴이 SQL 그리고 이번에 소개할 구글 애널리틱스(이하 GA)입니다.&lt;br /&gt;
SQL이 대량의 데이터를 간단한 문법으로 조회하는 데 편리한 툴이라면, 구글 애널리틱스는 지표에 대한 감각을 길러주고 고객지향적 분석을 익히는 데 좋은 적정기술이라고 할 수 있습니다.&lt;/p&gt;
&lt;p&gt;원래 적정기술의 의미는 ‘지역사회의 인프라 수준을 고려하여 만드는 기술 또는 그 생산물을 이르는 말’(출처 : 나무위키)이지만, 지역사회라는 단어를 이 글을 읽으시는 분 혹은 읽으시는 분이 속한 팀이라고 치환해본다면 무리가 없는 용어일 것입니다.&lt;/p&gt;
&lt;h2 id=&#34;its-the-metrics-stupid&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#its-the-metrics-stupid&#34;&gt;&lt;/a&gt; It’s the metrics, stupid!&lt;/h2&gt;
&lt;p&gt;병원에 가본적이 있으신가요? 병원에 가면 병에 따라 다르지만, 혈압을 체크하거나 혈당을 체크하거나 하는 등 의사들은 모두 &#39;지표’를 확인합니다. 이를 통해 환자의 상태를 파악하고 심각한 환자의 경우 지표의 변동에 따라 시시각각 처방 또는 응급처치를 하곤 하지요. 이와 유사하게, 데이터분석을 하기 위해선 지표에 대한 지식과 감각을 길러야 한다고 생각합니다. 특히 저를 비롯한 많은 초심자분들은 화려하고 멋져보이는 다른 기법보다 먼저 기본적인 지표를 익혀야 한다고 생각합니다.&lt;/p&gt;
&lt;p&gt;예를 들어볼까요?&lt;/p&gt;
&lt;p&gt;같이 일하는 동료가 회사의 웹사이트 가입인원이 100만명이 넘었다는 &#39;사실’을 여러분에게 주었을 때 여러분은 어떤 생각이 드시나요? 당연하죠. ‘오 힘들었겠다’, ‘대단하네’, ‘5천만 국민중에 100만명이나 가입했군’ 기타 등등&lt;/p&gt;
&lt;p&gt;여러가지 생각이 드시겠지만 우리가 어떤 걸 해야할지 고객이 어떤 생각을 가지고 있는지에 대해서 파악이 되시나요? 전혀 아닐겁니다. 그냥 많이 가입했다는 느낌만 줄 뿐이죠.&lt;/p&gt;
&lt;p&gt;그런데 만약 같이 일하는 동료가 이렇게 말했다면 어떨까요? ‘우리 서비스를 100만명이나 가입했는데, 하루동안 우리 서비스를 이용하는 고객은 20명이에요. 우리 어떻게 하죠?’ 슬슬 위기감이 들지 않나요? 왜 그럴까요? 하루 당 이용 고객이라는 비율로 측정되어 있기 때문이죠. 또한 20명이라는 숫자는 100만명과 &#39;비교’해볼 때 너무나도 적은 숫자이기 때문에 위기감을 불러일으키죠.&lt;/p&gt;
&lt;p&gt;이게 지표의 힘이고 우리가 분석을 통해 얻고자 하는 것입니다. 그리고 GA를 공부하는 목표이기도 합니다.&lt;/p&gt;
&lt;h2 id=&#34;누구나-그럴-듯한-계획이-있어-이탈하기-전까진&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#누구나-그럴-듯한-계획이-있어-이탈하기-전까진&#34;&gt;&lt;/a&gt; 누구나 그럴 듯한 계획이 있어 이탈하기 전까진&lt;/h2&gt;
&lt;p&gt;마케팅 서적을 보다보면 멋있는 말들이 홍수처럼 범람합니다. 고객지향을 해야한다는 등 어떻다는 등 그런데 결국 고객이 ‘왜’ 이탈하는지 우리가 ‘어떤’ 액션을 취해야 하는지 모르면 그냥 뜬구름 잡는 선문답으로 끝날 가능성이 높습니다.&lt;/p&gt;
&lt;p&gt;그래서 이 책은 구글 애널리틱스의 사용법과 함께 구체적인 조언을 건네줍니다. 책 124페이지를 보겠습니다.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;홈페이지에 접속한 사용자가 한 페이지만 보고 떠나는 경우 이탈률이 증가합니다. 시작 페이지에서 이탈률이 높게 나타난다는 것은 사용자가 홈페이지를 더 볼 것이 없다고 판단했다는 것을 의미합니다. 사용자가 원하는 정보가 없는지 점검해야 합니다.&lt;/p&gt;
&lt;p&gt;사용자가 특정 페이지에서 홈페이지를 떠나면 종료율이 증가합니다. 회원가입 페이지에서 종료율이 높게 나타난다는 것은 사용자가 회원가입을 진행하다가 홈페이지를 떠난다는 것을 의미합니다. 사용자가 회원가입을 어렵게 느끼고 있지는 않은지 점검해야 합니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;선문답이 아닌 숫자에 기반한 액션 플랜을 우리에게 제공해준다는 걸 알 수 있습니다. 추상적인 내용으로 커뮤니케이션할 때보다 더 원활한 커뮤니케이션이 가능할거란 걸 예상할 수 있습니다.&lt;/p&gt;
&lt;p&gt;지금 이 블로그를 운영하는 딥백수 블로그에도 구글애널리틱스가 탑재되어있습니다. 이 블로그를 통해 예를 들어볼까요?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/11/19/google-analytics/churn.jpg&#34; alt=&#34;Session &amp;amp; Churn rate&#34; /&gt;&lt;/p&gt;
&lt;p&gt;어떤가요? 숫자만 봐도 느낌이 오시지 않나요?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데스크톱의 이탈율은 80%인데 모바일은 87% 이탈율을 가지고 있네? 왜 그럴까?&lt;/li&gt;
&lt;li&gt;데스크톱의 세션당 페이지수는 1.54개인데 모바일은 1.12개구나.&lt;/li&gt;
&lt;li&gt;데스크톱의 세션시간은 37초인데 모바일은 10초구나&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그럼 이런 가설을 세워볼 수 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;지금은 Hexo로 블로그를 만들고 있는데, 모바일 유저가 보기 편한 다른 프레임워크를 쓰면 유저의 이탈율이 더 낮아질 수도 있겠다&lt;/li&gt;
&lt;li&gt;지금 Hexo블로그 테마를 모바일 유저가 보기 편한 테마로 바꾸면 유저의 이탈율이 더 낮아질 수도 있겠다&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이런 식으로 말이죠.&lt;/p&gt;
&lt;p&gt;그리고 마찬가지로 지표를 통해 검증하거나 상황을 점검할 수 있습니다.&lt;br /&gt;
여기에 사용되는 지표가 꼭 이탈율일 이유는 없습니다. 다른 지표를 통해서 다른 분석을 통해서 볼 수 있죠.&lt;/p&gt;
&lt;p&gt;이 책은 2018년에 1판이 출간되었다가 올해 2월 전자상거래, 옵티마이즈, 태그매니저 등 기능에 대한 내용을 추가한 개정판으로 다시 출간되었습니다.&lt;/p&gt;
&lt;p&gt;저는 2판은 아직 못보고 1판을 봤는데 1판만으로도 많은 걸 배우고 실무에도 활용할 수 있었습니다.&lt;br /&gt;
일독을 추천드립니다.&lt;/p&gt;
</content>
        <category term="Jinyoung Song" />
        <category term="구글애널리틱스" />
        <category term="GA" />
        <category term="Google Analytics" />
        <category term="Data Analysis" />
        <category term="Web Log Analysis" />
        <updated>2020-11-19T05:17:52.000Z</updated>
    </entry>
    <entry>
        <id>https://deepbaksu.github.io/2020/11/12/powershell-prompt-script/</id>
        <title>윈도우 PowerShell - custom prompt 스크립트 만들기</title>
        <link rel="alternate" href="https://deepbaksu.github.io/2020/11/12/powershell-prompt-script/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/2020/11/12/powershell-prompt-script/kerensa-pickett-sTnZRUJm-kI-unsplash.jpg&#34; alt=&#34;Photo by Kerensa Pickett on Unsplash&#34; /&gt;&lt;/p&gt;
&lt;p&gt;지난번에는 git 자동 완성기능을 사용하고, prompt에 git 정보를 추가하고 싶어서&lt;br /&gt;
재빨리 구글링하여 PowerShell 에서 원하는 기능을 만들었다.&lt;/p&gt;
&lt;p&gt;참고링크: &lt;a href=&#34;https://jusths.tistory.com/180&#34;&gt;https://jusths.tistory.com/180&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;아래는 그 결과물이다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;git 자동완성이 되며&lt;/li&gt;
&lt;li&gt;git 정보가 prompt 에 나오며&lt;/li&gt;
&lt;li&gt;마지막 명령의 실행 소요시간이 표시된다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/2020/11/12/powershell-prompt-script/1.png&#34; alt=&#34;previous result&#34; /&gt;&lt;/p&gt;
&lt;p&gt;이번에는 이를 위해 사용한 스크립트를 조금 더 분석하여 나만의 prompt 를 만들어 보았다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;디렉토리를 Linux 스타일로 표현하고, 이어서 &lt;code&gt;posh-git&lt;/code&gt;의 git 정보가 표시된다.
&lt;ul&gt;
&lt;li&gt;디렉토리가 너무 길면 … 으로 줄여서 표현한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;명령의 실행 소요시간을 우측 정렬로 노란색 배경컬러로 표시했다.&lt;/li&gt;
&lt;li&gt;이어서 User 정보, 현재 시간을 표시하였다. User 정보는 Administrator 이면 Admin 으로 표시된다.&lt;/li&gt;
&lt;li&gt;프롬프트는 다음줄에 작고 앙증맞은 → 화살표로 하였다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/2020/11/12/powershell-prompt-script/2.png&#34; alt=&#34;final result&#34; /&gt;&lt;/p&gt;
&lt;p&gt;최종 결과는 GitHub Gist 에 올려두었다.&lt;br /&gt;
GitHub Gist: &lt;a href=&#34;https://gist.github.com/83ea6615ff5a8c2baf5682443f39dc42&#34;&gt;https://gist.github.com/83ea6615ff5a8c2baf5682443f39dc42&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;스크립트-간단-분석&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#스크립트-간단-분석&#34;&gt;&lt;/a&gt; 스크립트 간단 분석&lt;/h2&gt;
&lt;p&gt;본인의 PowerShell prompt 에 적용하려면 user 디렉토리의 Documents\PowerShell 로 들어가서 profile.ps1 파일에 Gist의 스크립트를 덮어쓰면 된다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;PowerShell이 실행될 때마다 &lt;code&gt;function Prompt()&lt;/code&gt; 를 가져와서 PowerShell 의 prompt 를 그릴때에 사용한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Write-Host&lt;/code&gt; 는 echo 와 같다고 보면 된다. 화면에 출력을 해주는 기능이다.
&lt;ul&gt;
&lt;li&gt;명령들 사이에 한 줄을 띄워주려 사용하였다. 줄 바꿈을 하지 않으려면 &lt;code&gt;-NoNewLine&lt;/code&gt; 옵션을 주면 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PowerShell 의 배열을 다루는 함수들을 사용하여 현재 디렉토리 경로 문자열을 다듬었다.
&lt;ul&gt;
&lt;li&gt;Linux 처럼 보이게 콜론(:)을 없애고, 역슬래시()를 기준으로 문자열을 나누어 배열에 담은 다음&lt;/li&gt;
&lt;li&gt;배열의 개수가 3개 이상인지 여부로 분기하여, 너무 긴 경로는 &lt;code&gt;…&lt;/code&gt; 로 줄여줄 수 있도록 하였다.&lt;/li&gt;
&lt;li&gt;그리고 &lt;code&gt;-join&lt;/code&gt; 을 사용하여 슬래시(/)로 Linux 느낌이 나게 다시 경로 문자열을 만들었다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;만든 문자열을 &lt;code&gt;Write-Host&lt;/code&gt; 로 출력하여 첫번째 출력을 완성하였다.
&lt;ul&gt;
&lt;li&gt;이때 &lt;code&gt;-ForegroundColor Cyan&lt;/code&gt; 옵션을 이용하여 글자색을 바꾸어 보았으며&lt;/li&gt;
&lt;li&gt;같은 라인에 추가적인 정보를 담으려 하기에 &lt;code&gt;-NoNewLine&lt;/code&gt; 으로 줄바꿈을 방지했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Prompt&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;Write-Host&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;# one blank line&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 1. pwd&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$pwdArray&lt;/span&gt; = &lt;span class=&#34;variable&#34;&gt;$&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$pwd&lt;/span&gt;.path &lt;span class=&#34;operator&#34;&gt;-replace&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;:&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;).split(&lt;span class=&#34;string&#34;&gt;&amp;#x27;\&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;variable&#34;&gt;$pwdArray&lt;/span&gt;.count &lt;span class=&#34;operator&#34;&gt;-gt&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable&#34;&gt;$linuxPath&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;quot;/&lt;span class=&#34;variable&#34;&gt;$&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$pwdArray&lt;/span&gt;[0], &amp;#x27;...&amp;#x27;, &lt;span class=&#34;variable&#34;&gt;$pwdArray&lt;/span&gt;[-2], &lt;span class=&#34;variable&#34;&gt;$pwdArray&lt;/span&gt;[-1] -join (&amp;#x27;/&amp;#x27;))&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable&#34;&gt;$linuxPath&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;quot;/&lt;span class=&#34;variable&#34;&gt;$&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$pwdArray&lt;/span&gt; -join (&amp;#x27;/&amp;#x27;))&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;write-host&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$linuxPath&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;-ForegroundColor&lt;/span&gt; Cyan &lt;span class=&#34;literal&#34;&gt;-NoNewline&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;vcsStatus 출력은 Posh-git 이 import 되었는지를 확인하여, Write-VcsStatus 를 이용하여 출력을 하였다.&lt;/li&gt;
&lt;li&gt;이 출력부분 역시 costomize 가능한 것으로 알고 있는데 심심할 때 한 번 들여다보고 싶은 부분이다.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2. git status&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;Get-Module&lt;/span&gt; Posh&lt;span class=&#34;literal&#34;&gt;-git&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$vcsStatus&lt;/span&gt; = &lt;span class=&#34;built_in&#34;&gt;Write-VcsStatus&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;write-host&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$vcsStatus&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;-NoNewline&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;오른쪽-정렬하여-출력할-세-가지-정보&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#오른쪽-정렬하여-출력할-세-가지-정보&#34;&gt;&lt;/a&gt; 오른쪽 정렬하여 출력할 세 가지 정보&lt;/h3&gt;
&lt;p&gt;마지막 실행한 명령의 실행 소요시간, Administrator 인지를 포함한 User 정보, 현재 시간을 오른쪽 정렬로 뿌려보려고 한다.&lt;br /&gt;
이를 위해서 각각의 정보를 우선 문자열로 뽑아 보았다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$elapsedTime&lt;/code&gt; 은 마지막 명령의 실행 소요시간을 담고 있다.&lt;br /&gt;
참고 코드는 소요시간의 범위에 따라 다른 색깔, 다른 포맷으로 출력이 되도록 분기한 것이었는데,&lt;br /&gt;
그 결과를 바로 출력하지 않고 문자열에 담도록 하고, 색깔과 관련한 부분은 제외하였다.&lt;br /&gt;
조금 복잡해 보이지만 차근히 따라가면 이해가 될 것이다.&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3. get command execution time&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$history&lt;/span&gt; = &lt;span class=&#34;built_in&#34;&gt;Get-History&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;-ErrorAction&lt;/span&gt; Ignore &lt;span class=&#34;literal&#34;&gt;-Count&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;variable&#34;&gt;$history&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$elapsedTime&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$ts&lt;/span&gt; = &lt;span class=&#34;built_in&#34;&gt;New-TimeSpan&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$history&lt;/span&gt;.StartExecutionTime &lt;span class=&#34;variable&#34;&gt;$history&lt;/span&gt;.EndExecutionTime&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt; (&lt;span class=&#34;variable&#34;&gt;$ts&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123; &lt;span class=&#34;variable&#34;&gt;$_&lt;/span&gt;.TotalSeconds &lt;span class=&#34;operator&#34;&gt;-lt&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;#125; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            [&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;]&lt;span class=&#34;variable&#34;&gt;$d&lt;/span&gt; = &lt;span class=&#34;variable&#34;&gt;$_&lt;/span&gt;.TotalMilliseconds&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;variable&#34;&gt;$elapsedTime&lt;/span&gt; += &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#123;0&amp;#125;ms&amp;#x27;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;-f&lt;/span&gt; (&lt;span class=&#34;variable&#34;&gt;$d&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123; &lt;span class=&#34;variable&#34;&gt;$_&lt;/span&gt;.totalminutes &lt;span class=&#34;operator&#34;&gt;-lt&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;#125; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            [&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;]&lt;span class=&#34;variable&#34;&gt;$d&lt;/span&gt; = &lt;span class=&#34;variable&#34;&gt;$_&lt;/span&gt;.TotalSeconds&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;variable&#34;&gt;$elapsedTime&lt;/span&gt; += &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#123;0&amp;#125;s&amp;#x27;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;-f&lt;/span&gt; (&lt;span class=&#34;variable&#34;&gt;$d&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123; &lt;span class=&#34;variable&#34;&gt;$_&lt;/span&gt;.totalminutes &lt;span class=&#34;operator&#34;&gt;-ge&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;#125; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;variable&#34;&gt;$elapsedTime&lt;/span&gt; += &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;#123;0:HH:mm:ss&amp;#125;&amp;quot;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;-f&lt;/span&gt; ([&lt;span class=&#34;built_in&#34;&gt;datetime&lt;/span&gt;]&lt;span class=&#34;variable&#34;&gt;$ts&lt;/span&gt;.Ticks)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Default &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;variable&#34;&gt;$elapsedTime&lt;/span&gt; += &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#123;0&amp;#125;ms&amp;#x27;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;-f&lt;/span&gt; (&lt;span class=&#34;variable&#34;&gt;$d&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$elapsedTime&lt;/span&gt; += &lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;$adminHeader&lt;/code&gt; 는 PowerShell 이 Administrator 로 실행되고 있는지 확인하여, Admin 또는 USERNAME 으로 문자열을 저장해둔다.&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 4. check if admin&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$currentUser&lt;/span&gt; = [&lt;span class=&#34;type&#34;&gt;Security.Principal.WindowsPrincipal&lt;/span&gt;](&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;type&#34;&gt;Security.Principal.WindowsIdentity&lt;/span&gt;]::GetCurrent())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$isAdminProcess&lt;/span&gt; = &lt;span class=&#34;variable&#34;&gt;$currentUser&lt;/span&gt;.IsInRole(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;type&#34;&gt;Security.Principal.WindowsBuiltInRole&lt;/span&gt;]::Administrator)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$adminHeader&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;variable&#34;&gt;$isAdminProcess&lt;/span&gt;) &amp;#123; &lt;span class=&#34;string&#34;&gt;&amp;#x27; Admin &amp;#x27;&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123; &lt;span class=&#34;string&#34;&gt;&amp;quot; &lt;span class=&#34;variable&#34;&gt;$env:USERNAME&lt;/span&gt; &amp;quot;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;현재 시간을 &lt;code&gt;$now&lt;/code&gt; 변수에 담는다.&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 5. time&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$now&lt;/span&gt; = &lt;span class=&#34;built_in&#34;&gt;get-date&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;-format&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot; HH:mm:ss &amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;만들어둔 세 문자열 &lt;code&gt;$elapsedTime&lt;/code&gt;, &lt;code&gt;$adminHeader&lt;/code&gt;, &lt;code&gt;$now&lt;/code&gt; 을 오른쪽 정렬로 출력한다.&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 6. align right: elapsedTime, adminHeader, now&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$rightInfo&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;quot;&lt;span class=&#34;variable&#34;&gt;$elapsedTime&lt;/span&gt;&lt;span class=&#34;variable&#34;&gt;$adminHeader&lt;/span&gt;&lt;span class=&#34;variable&#34;&gt;$now&lt;/span&gt;  &amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$startposx&lt;/span&gt; = &lt;span class=&#34;variable&#34;&gt;$Host&lt;/span&gt;.UI.RawUI.windowsize.width - &lt;span class=&#34;variable&#34;&gt;$rightInfo&lt;/span&gt;.length&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$startposy&lt;/span&gt; = &lt;span class=&#34;variable&#34;&gt;$Host&lt;/span&gt;.UI.RawUI.CursorPosition.Y&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$Host&lt;/span&gt;.UI.RawUI.CursorPosition = &lt;span class=&#34;built_in&#34;&gt;New-Object&lt;/span&gt; System.Management.Automation.Host.Coordinates &lt;span class=&#34;variable&#34;&gt;$startposx&lt;/span&gt;,&lt;span class=&#34;variable&#34;&gt;$startposy&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;variable&#34;&gt;$elapsedTime&lt;/span&gt;.length &lt;span class=&#34;operator&#34;&gt;-ne&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;write-host&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$elapsedTime&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;-ForegroundColor&lt;/span&gt; Black &lt;span class=&#34;literal&#34;&gt;-NoNewline&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;-BackgroundColor&lt;/span&gt; DarkYellow&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;write-host&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$adminHeader&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;-ForegroundColor&lt;/span&gt; Black &lt;span class=&#34;literal&#34;&gt;-NoNewline&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;-BackgroundColor&lt;/span&gt; DarkGreen&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;write-host&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$now&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;-ForegroundColor&lt;/span&gt; Gray &lt;span class=&#34;literal&#34;&gt;-NoNewline&lt;/span&gt;  &lt;span class=&#34;literal&#34;&gt;-BackgroundColor&lt;/span&gt; Red&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;화살표를 출력한다. 왜 마지막 줄은 Write-Host 를 사용하지 않아도 출력이 되는 것인지는 모르겠다.&lt;br /&gt;
이렇게 하면 &lt;code&gt;PS&amp;gt;&lt;/code&gt; 라는 prompt 도 사라진다. 이것 역시 정확한 이유는 알지 못한다.&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 8. prompt arrow&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;variable&#34;&gt;$host&lt;/span&gt;.UI.RawUI.CursorPosition.X &lt;span class=&#34;operator&#34;&gt;-gt&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123; &lt;span class=&#34;built_in&#34;&gt;Write-Host&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;&lt;span class=&#34;variable&#34;&gt;$&lt;/span&gt;([char]0x2192) &amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;마지막으로 posh-git 을 import 해주면 된다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Import-Module posh-git&lt;/code&gt; 은 말 그대로 posh-git 을 가져와서 git 과 관련한 정보를 쓸 수 있게 해준다.&lt;/p&gt;
&lt;p&gt;끝&lt;/p&gt;
</content>
        <category term="Hyunseok Jeong" />
        <category term="Windows" />
        <category term="PowerShell" />
        <category term="PowerShell script" />
        <category term="Git" />
        <category term="Prompt" />
        <updated>2020-11-12T10:27:12.000Z</updated>
    </entry>
    <entry>
        <id>https://deepbaksu.github.io/2020/11/05/powershell-with-git-support/</id>
        <title>윈도우 PowerShell에서 git을 좀더 편하게 사용하자</title>
        <link rel="alternate" href="https://deepbaksu.github.io/2020/11/05/powershell-with-git-support/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/2020/11/05/powershell-with-git-support/marc-rentschler-F1rES0sVuIw-unsplash.jpg&#34; alt=&#34;Photo by Marc Rentschler on Unsplash&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Linux&lt;/code&gt; 또는 &lt;code&gt;macOS&lt;/code&gt; 환경에서는 &lt;code&gt;git&lt;/code&gt; 명령들이 자동으로 완성되어 편리한데 윈도우 &lt;code&gt;cmd&lt;/code&gt;나 &lt;code&gt;PowerShell&lt;/code&gt;에서는 기본적으로 되지않아 불편하였다.&lt;br /&gt;
그렇다고 &lt;code&gt;git bash&lt;/code&gt;를 사용하자니 윈도우에서는 다른 불편한 상황이 종종 발생하여&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;git 명령어를 tab으로 자동완성 할 수 있고&lt;/li&gt;
&lt;li&gt;prompt에 git 정보를 담을 수 있는 방법을 찾아 보았다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;tldr-너무-길면-읽지-않을꺼죠&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#tldr-너무-길면-읽지-않을꺼죠&#34;&gt;&lt;/a&gt; TL;DR - 너무 길면 읽지 않을꺼죠?&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;PowerShell 은 당연히 설치되어 있어야 한다. 현시점에서는 버전 &lt;code&gt;7.1.0-rc.2&lt;/code&gt;를 설치하였다.&lt;/li&gt;
&lt;li&gt;posh-git 을 설치한다.&lt;/li&gt;
&lt;li&gt;PowerShell profile 파일을 수정하여 custom prompt를 설정한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;그러면 git 을 사용하는 디렉토리 내에서 아래와 같이 prompt 가 나온다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;시간은 명령 수행 시간&lt;/li&gt;
&lt;li&gt;현재 브랜치와 Working directory 상태 (현재는 modified 된 파일이 3개라는 뜻이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/2020/11/05/powershell-with-git-support/1.png&#34; alt=&#34;custom prompt of the Windows PowerShell&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;posh-git-설치하기&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#posh-git-설치하기&#34;&gt;&lt;/a&gt; posh-git 설치하기&lt;/h2&gt;
&lt;p&gt;GitHub: &lt;a href=&#34;https://github.com/dahlbyk/posh-git&#34;&gt;https://github.com/dahlbyk/posh-git&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;posh-git&lt;/code&gt; 은 PowerShell 모듈이며 Git 사용에 도움이 되는 여러 기능을 제공한다.&lt;br /&gt;
GitHub &lt;a href=&#34;http://README.md&#34;&gt;README.md&lt;/a&gt; 에 다양한 설치 방법이 나오니 참고하여 설치한다.&lt;br /&gt;
PowerShell에서 설치를 한다면 Administrator 로 PowerShell을 실행하고 설치해본다.&lt;/p&gt;
&lt;h2 id=&#34;custom-prompt-설정하기&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#custom-prompt-설정하기&#34;&gt;&lt;/a&gt; Custom prompt 설정하기&lt;/h2&gt;
&lt;p&gt;참고 링크: &lt;a href=&#34;https://github.com/dahlbyk/posh-git/wiki/Customizing-Your-PowerShell-Prompt&#34;&gt;https://github.com/dahlbyk/posh-git/wiki/Customizing-Your-PowerShell-Prompt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;posh-git&lt;/code&gt; 이 하는 것은 결국 PowerShell이 실행되기 전에 미리 prompt에 대한 설정을 해두는 것이다.&lt;br /&gt;
&lt;strong&gt;그래서 어느 파일을 건드려야 하는건가?&lt;/strong&gt; 이걸 알아내기가 힘들어서 헤매었고, 이 포스팅을 하게 되었다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;profile.ps1&lt;/code&gt; 을 수정해야 한다. 이 파일은 사용자 디렉토리의 &lt;code&gt;Documents\PowerShell&lt;/code&gt; 폴더에 있다.&lt;br /&gt;
처음 &lt;code&gt;posh-git&lt;/code&gt; 을 설치하면 단 한 줄 밖에 없을 것이다.&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Import-Module posh-git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;즉, posh-git을 가져온 다음에 PowerShell 을 실행하겠다는 것이다.&lt;br /&gt;
이렇게 가져오기 전에 function Prompt 를 정의해주면 된다.&lt;/p&gt;
&lt;p&gt;구글링하여 아래 링크를 참고하여 설정해보았다.&lt;/p&gt;
&lt;p&gt;링크: &lt;a href=&#34;https://melcher.dev/2019/03/powershell-prompt-awesomeness-you-need-this/&#34;&gt;https://melcher.dev/2019/03/powershell-prompt-awesomeness-you-need-this/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;항목 하나하나에 대한 자세한 분석은 하지 않았다. 조금 더 커스터마이즈 하고 싶으면 조금씩 수정해가면서 확인하면 될 것이다.&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function Prompt &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        $history = Get-History -ErrorAction Ignore -Count 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if ($history) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Write-Host &amp;quot;[&amp;quot; -NoNewline&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            $ts = New-TimeSpan $history.StartExecutionTime $history.EndExecutionTime&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            switch ($ts) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#123;$_.TotalSeconds -lt 1&amp;#125; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    [int]$d = $_.TotalMilliseconds&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &amp;#x27;&amp;#123;0&amp;#125;ms&amp;#x27; -f ($d) | Write-Host -ForegroundColor Black -NoNewline -BackgroundColor DarkGreen&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    break&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#123;$_.totalminutes -lt 1&amp;#125; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    [int]$d = $_.TotalSeconds&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &amp;#x27;&amp;#123;0&amp;#125;s&amp;#x27; -f ($d) | Write-Host -ForegroundColor Black -NoNewline -BackgroundColor DarkYellow&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    break&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#123;$_.totalminutes -ge 1&amp;#125; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &amp;quot;&amp;#123;0:HH:mm:ss&amp;#125;&amp;quot; -f ([datetime]$ts.Ticks) | Write-Host -ForegroundColor Gray -NoNewline  -BackgroundColor Red&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    break&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Write-Host &amp;quot;] &amp;quot; -NoNewline&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(Get-Module Posh-git) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Write-VcsStatus&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Write-Host &amp;quot; &amp;quot; -NoNewline&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    catch &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # New line&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Write-Host &amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # show the drive and then last 2 directories of current path&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if (($pwd.Path.Split(&amp;#x27;\&amp;#x27;).count -gt 3))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        write-host &amp;quot;$($pwd.path.split(&amp;#x27;\&amp;#x27;)[0], &amp;#x27;...&amp;#x27;, $pwd.path.split(&amp;#x27;\&amp;#x27;)[-2], $pwd.path.split(&amp;#x27;\&amp;#x27;)[-1] -join (&amp;#x27;\&amp;#x27;))&amp;quot; -NoNewline&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Write-Host &amp;quot;$($pwd.path)&amp;quot; -NoNewline&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;&amp;gt; &amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Import-Module posh-git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;참-잘했어요&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#참-잘했어요&#34;&gt;&lt;/a&gt; 참 잘했어요&lt;/h2&gt;
&lt;p&gt;이렇게 설정을 하고 &lt;code&gt;VS Code&lt;/code&gt; 에서 default shell 을 PowerShell로 바꾸어 주었다.&lt;/p&gt;
&lt;p&gt;그리고, &lt;code&gt;Windows Terminal&lt;/code&gt; 역시 &lt;code&gt;defaultProfile&lt;/code&gt;(실행시 처음 열리는 shell)을 PowerShell 로 바꾸어 주었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;끝 -&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Hyunseok Jeong" />
        <category term="Windows" />
        <category term="PowerShell" />
        <category term="Git" />
        <category term="Prompt" />
        <updated>2020-11-05T09:43:18.000Z</updated>
    </entry>
    <entry>
        <id>https://deepbaksu.github.io/2020/10/20/play-with-slice-of-golang/</id>
        <title>Go 슬라이스 가지고 놀아보자</title>
        <link rel="alternate" href="https://deepbaksu.github.io/2020/10/20/play-with-slice-of-golang/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/2020/10/20/play-with-slice-of-golang/nery-montenegro-3ak9PMcx048-unsplash.jpg&#34; alt=&#34;Photo by Nery Montenegro on Unsplash&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Go의 슬라이스는 배열과 비슷한 듯 다르다. 슬라이스는 세 개의 필드를 가진 데이터 구조이다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;포인터: 실제 값이 들어있는 배열의 주소를 가리킨다&lt;/li&gt;
&lt;li&gt;Length: 값이 들어있는 길이를 가리킨다.&lt;/li&gt;
&lt;li&gt;Capacity: 실제 값은 들어있지 않지만 미리 확보해놓은 메모리 공간이라 생각하면 된다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/2020/10/20/play-with-slice-of-golang/1.jpg&#34; alt=&#34;slice in golang: https://www.geeksforgeeks.org/slices-in-golang&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Capacity&lt;/code&gt; 이내 에서는 &lt;code&gt;append&lt;/code&gt;를 하더라도 다른 곳으로 메모리를 재할당 할 필요가 없다. 저장하는 메모리 공간을 이사할 필요가 없다는 것이다.&lt;/p&gt;
&lt;p&gt;적절할지 모르겠지만 비유를 해본다. 아파트의 방에 한 명씩 살아야 한다고 하자. 방 4개 짜리 아파트에 (cap&lt;mark&gt;4) 세 명이 각각 방 하나씩을 차지하고 있는 경우 (len&lt;/mark&gt;3) 한명이 더 들어와 살더라도 방 5, 6개 짜리 아파트로 이사할 필요가 없는 것이다. 하지만 여기서 한 명이라도 더 들어오면 방이 더 많은, 다른 아파트로 이사를 해야 한다.&lt;/p&gt;
&lt;p&gt;이론적인 부분은 이만 줄이고 실제 코드로 부딪혀가며 이해해보자.&lt;/p&gt;
&lt;h2 id=&#34;실습&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#실습&#34;&gt;&lt;/a&gt; 실습&lt;/h2&gt;
&lt;p&gt;실습을 통해 다음과 같은 상황을 확인해보자&lt;br /&gt;
같은 배열을 가리키는 두 슬라이드가 있다고 할 때에&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;같은 메모리 주소의 하나의 값을 변경하면 나머지 하나도 바뀔 것이다. 슬라이스의 포인터가 같은 배열을 가리키고 있기 때문이다.&lt;/li&gt;
&lt;li&gt;그러면 두 슬라이스 중에 하나가 다른 하나의 일부일 때에, 그 슬라이스를 append 한다면?
&lt;ul&gt;
&lt;li&gt;cap 이내일때는 여전히 같은 배열을 가리키겠지만&lt;/li&gt;
&lt;li&gt;cap 을 넘어서는 append 의 경우에는 두 슬라이스는 다른 배열을 가리키게 될 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;슬라이스를 함수에 값으로 전달한다면 어떻게 될까?
&lt;ul&gt;
&lt;li&gt;슬라이스가 복제된다. 포인터는 같은 배열을 가리킨다.&lt;/li&gt;
&lt;li&gt;하지만 함수 내에서 슬라이스의 len, cap 을 변경해도 원래 슬라이스의 len, cap은 변하지 않을 것이다.&lt;br /&gt;
→ 같은 배열을 가리키는 두 개의 별개의 슬라이스인 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;슬라이스를 함수에 포인터로 전달한다면 어떻게 될까?
&lt;ul&gt;
&lt;li&gt;포인터, len, cap 이 온전히 전달되고,&lt;/li&gt;
&lt;li&gt;함수내에서 이들이 바뀌면 원본 역시 변할 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;배열-함께-쓰기-이별하기&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#배열-함께-쓰기-이별하기&#34;&gt;&lt;/a&gt; 배열 함께 쓰기, 이별하기&lt;/h3&gt;
&lt;p&gt;Play ground: &lt;a href=&#34;https://play.golang.org/p/RxLFuykp9XH&#34;&gt;https://play.golang.org/p/RxLFuykp9XH&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(1) a, b, c 슬라이스는 모두 같은 배열을 가리키고 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;b는 len은 2이지만, cap은 a의 cap 나머지와 같은 3이다.&lt;/li&gt;
&lt;li&gt;c와 같이 cap도 정확히 설정할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(2) b 슬라이스를 append 해도 아직 여분의 cap 공간이 있다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;그래서 b 슬라이스가 메모리 이사를 갈 필요가 없다.&lt;/li&gt;
&lt;li&gt;그래서 a[5]와 b[3]의 값이 함께 바뀐다.&lt;/li&gt;
&lt;li&gt;포인터가 가리키는 배열의 같은 위치 원소의 주소값도 같다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(3) b 슬라이스를 한 번더 append 해보자&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이제는 b 슬라이스가 이사를 가야한다.&lt;/li&gt;
&lt;li&gt;포인터가 가리키는 배열의 같은 위치였을 원소의 주소값이 다르다.&lt;/li&gt;
&lt;li&gt;(4)를 보면 이제 완전히 별개의 두 배열을 가리키고 있는 것을 알 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/2020/10/20/play-with-slice-of-golang/2.png&#34; alt=&#34;example code1&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;함수에-슬라이스-전달하기&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#함수에-슬라이스-전달하기&#34;&gt;&lt;/a&gt; 함수에 슬라이스 전달하기&lt;/h3&gt;
&lt;p&gt;Play ground: &lt;a href=&#34;https://play.golang.org/p/5qg7NVNH2Ic&#34;&gt;https://play.golang.org/p/5qg7NVNH2Ic&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(1) len 5, cap 5 인 a 슬라이스를 만들었다.&lt;/p&gt;
&lt;p&gt;(2) (3) 은 각각 슬라이스와 슬라이스 주소값을 전달받는 함수를 선언하였다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;슬라이스의 첫번째 원소의 값을 바꾸고&lt;/li&gt;
&lt;li&gt;슬라이스에 빈 원소 3개를 append 한 다음&lt;/li&gt;
&lt;li&gt;함수 안에서 슬라이스의 변경된 길이를 출력해 보았다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(4) 함수를 실행해보니&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a 슬라이스는 len 5, cap 5로 생성이 되어있고&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;changeSliceValue 함수의 경우는 - a 슬라이스의&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;첫번째 원소의 값은 바꾸었지만&lt;/li&gt;
&lt;li&gt;len, cap 은 바꾸지 못하였다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;changeSliceReference 함수의 경우는 a 슬라이스의&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;첫번째 원소의 값을 바꾸었고&lt;/li&gt;
&lt;li&gt;len, cap 까지도 바꾸었다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/2020/10/20/play-with-slice-of-golang/3.png&#34; alt=&#34;example code2&#34; /&gt;&lt;/p&gt;
</content>
        <category term="Hyunseok Jeong" />
        <category term="Go" />
        <category term="Golang" />
        <category term="Slice" />
        <category term="example" />
        <updated>2020-10-20T09:17:05.000Z</updated>
    </entry>
    <entry>
        <id>https://deepbaksu.github.io/2020/09/27/architecture-by-martin/</id>
        <title>마틴 파울러가 말하는 소프트웨어 아키텍처</title>
        <link rel="alternate" href="https://deepbaksu.github.io/2020/09/27/architecture-by-martin/"/>
        <content type="html">&lt;h2 id=&#34;개요&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#개요&#34;&gt;&lt;/a&gt; 개요&lt;/h2&gt;
&lt;p&gt;마틴 파울러가 10 여분간 압축하여 이야기한 소프트웨어 아키텍처에 대한 생각을 유튜브를 통해 보고, 유튜브에 언급된 칼럼까지 읽고 나서 정리를 해보고 싶어졌다.&lt;/p&gt;
&lt;h2 id=&#34;tldr&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#tldr&#34;&gt;&lt;/a&gt; TL;DR&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;소프트웨어 아키텍트&lt;/code&gt;는 팀 내의 가장 노련한 개발자이다. 요구사항을 받아서 어떤 콤포넌트와 인터페이스로 구성할지를 디자인하여 개발팀에 공유하고 합의를 이루면 그것이 바로 &lt;code&gt;아키텍처&lt;/code&gt;이다. 이러한 아키텍처는 한번 정하면 바꾸기가 힘든 것들을 말한다. 그렇기에 핵심가치를 담고 있기도 하며 개발에 참여하는 모든 이가 이해하고 합의하는 최소한인 것이다.&lt;/p&gt;
&lt;p&gt;아키텍트는 &lt;code&gt;등반에서의 가이드&lt;/code&gt;와 같다. 개발팀을 이끌면서 가르쳐 전체 구성원의 역량을 끌어올리고, 난관에 부딪힐때 의지할 수 있는 존재이다. 개발팀과 프로젝트가 돌아가는 상황을 잘 알고 있으며, 작은 문제들을 발견할때마다 미리미리 대응해서 커지지 않게한다. 이를 위해서는 &lt;code&gt;개발팀 전체와 긴밀하게 협업&lt;/code&gt;을 해야 한다.&lt;/p&gt;
&lt;p&gt;아키텍처란 바꾸기 힘든 것이다. &lt;code&gt;바꾸지 힘들 수록 복잡도를 높인다.&lt;/code&gt; 아키텍처라 이름 붙일 만한 것이 적을 수록 좋은 것이다. 바꾸기 힘든 것을 바꾸기 쉽게(=유지, 보수, 기능추가가 쉽게) 만들어주면 그것은 더 이상 아키텍처가 아니다. 아키텍트는 아키텍처를 줄이려 노력하는 사람이다.&lt;/p&gt;
&lt;p&gt;고객의 눈에 보이지 않는 이러한 아키텍처는 품질에 투자할 수록 = 유지, 보수, 기능 추가가 쉽도록 개발할 수록 조금 긴 시각에서 보면 경제적으로 큰 이익이 된다.&lt;/p&gt;
&lt;h2 id=&#34;소프트웨어-아키텍처란-뭘까&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#소프트웨어-아키텍처란-뭘까&#34;&gt;&lt;/a&gt; 소프트웨어 아키텍처란 뭘까?&lt;/h2&gt;
&lt;p&gt;소프트웨어 아키텍처란 뭘까? 마틴 파울러는 랄프 존슨을 통해 얻은 통찰로 아래 둘로 표현한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;노련한 개발자가 나눠주는 시스템 디자인에 대한 이해 (Expert developers’ shared understanding of the system design)&lt;/li&gt;
&lt;li&gt;변경하기 힘든 것들 (The decision that are hard to change)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;1-expert-developers-shared-understanding-of-the-system-design&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-expert-developers-shared-understanding-of-the-system-design&#34;&gt;&lt;/a&gt; 1. Expert developers’ shared understanding of the system design&lt;/h3&gt;
&lt;p&gt;고객과 고객의 요구사항을 구현하는 개발자로 나누어 보자.&lt;br /&gt;
고객은 아키텍처를 알지도 못하고 관심도 없다. 요구한 대로 돌아가기만 하면 된다. 바꿔 말하면 개발자만 관심있는거다.&lt;/p&gt;
&lt;p&gt;요구사항을 받으면, 팀에서 짬밥이 많은 개발자들이 이를 만족하려면 어떻게 구현해야할지 고민할 것이다.&lt;br /&gt;
대략 큰 덩어리의 콤포넌트들이 떠오르고, 그것들을 연결하는 인터페이스를 요래조래 하면 되겠다 싶을 거다.&lt;br /&gt;
그러면 그걸 개발팀원들에게 공유한다. 그게 &lt;code&gt;아키텍처&lt;/code&gt;다.&lt;/p&gt;
&lt;p&gt;그러면 개발팀 내에서 어떤 합의가 이루어지게 된다. 콤포넌트와 인터페이스가 이렇게 되어야는 거구나 하는 합의이다.&lt;br /&gt;
왜 합의가 필요할까? 그만큼 중요한 것이기 때문이고, 모두가 이해하고 그에 맞게 구현해야 하기 때문이다.&lt;br /&gt;
아키텍처는 &lt;code&gt;무엇이 되었든, 중요한 것&lt;/code&gt;에 관한 것이다.&lt;/p&gt;
&lt;p&gt;아키텍처 하면 떠오르는, 아래와 같은 다이어그램과 같은 형식은 이런 공유의 결과로 만들어지는 것들을 표현(representation) 한 것 뿐이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/27/architecture-by-martin/1.png&#34; alt=&#34;Architecture - StackExchange(https://bit.ly/2Ht4rCZ)&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-the-decision-that-are-hard-to-change&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-the-decision-that-are-hard-to-change&#34;&gt;&lt;/a&gt; 2. The decision that are hard to change&lt;/h3&gt;
&lt;p&gt;아키텍처는 프로젝트 시작할때 제대로 알고 결정했어야 하는 거라는 말이 있다.&lt;br /&gt;
이걸 다르게 말하면 &lt;code&gt;바꾸기 어려운 것&lt;/code&gt;을 말한다. 쉬우면야 앞의 결정을 번복하고 새롭게 바꾸면 되니깐 말이다.&lt;br /&gt;
핵심적인 가치를 지닌 것이고, 바꾸기 힘든 것이기에 가능한 바꾸지 않으려 하는 것이다.&lt;/p&gt;
&lt;h2 id=&#34;그래서-아키텍처가-뭔데&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#그래서-아키텍처가-뭔데&#34;&gt;&lt;/a&gt; 그래서 아키텍처가 뭔데?&lt;/h2&gt;
&lt;p&gt;1번과 2번을 모아서 좋은 소프트웨어 아키텍처를 정리해본다.&lt;br /&gt;
프로젝트에서 추구하는 핵심가치, 그래서 바꾸기 어렵고 가능한 바꾸지 않으려 하는것이며, 그렇기에 프로젝트에 참여한 사람들 중에서 제일 노련하고 잘하는 사람이 정리하고 공유해주면 팀의 모든 사람들이 이를 잘 이해하고 맞게 만들어가야 하는 것이다.&lt;/p&gt;
&lt;p&gt;이 둘을 합쳐서 한 단어로 말하자면 아키텍처는 &lt;code&gt;모든 중요한 것들&lt;/code&gt;이라는 말이 된다.&lt;br /&gt;
쉽게 바꿔서는 안되고, 충분히 이해하고 만들어야 하는 중요한 것들이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/27/architecture-by-martin/2.png&#34; alt=&#34;중요한 것 그것이 아키텍쳐이다&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;아키텍트의-역할은-무엇일까&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#아키텍트의-역할은-무엇일까&#34;&gt;&lt;/a&gt; 아키텍트의 역할은 무엇일까?&lt;/h2&gt;
&lt;p&gt;아키텍처에 대해 어느정도 정의가 되었다. 그러면 아키텍트는 뭘까? 칼럼에서 다음과 같이 언급되어 있다.&lt;br /&gt;
우리가 흔히 생각하는 아키텍트는 대략 이럴 것이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;엄청나게 중요한 결정을 한다. 그런데 그 결정대로 되어야 한다 생각하지 팀원들이 그걸 감당할 수 있을지는 상관없다.&lt;/li&gt;
&lt;li&gt;이 결정은 가능한 빨리 내려야 한다. 그래야 다른 팀원들이 따라오니깐&lt;/li&gt;
&lt;li&gt;이러다보니 &lt;code&gt;아키텍트의 가치는 그가 내리는 결정의 수에 반비례 한다&lt;/code&gt;는 경험칙이 나오게 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그러면 제대로 된 아키텍트는 뭘 어떻게 하는 사람일까?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이슈들을 발견하고 큰 문제가 되기전에 미리미리 조치하는 사람이다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;그러려면&lt;/code&gt; 프로젝트 전반이 어떻게 돌아가는지를 잘 알아야 한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;그러려면&lt;/code&gt; 팀원들과 소통과 협력이 잘 되어야 한다.&lt;/li&gt;
&lt;li&gt;무엇보다 중요한 것은 개발팀의 &lt;code&gt;멘토&lt;/code&gt;가 되어야 한다는 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;칼럼에서는 이런 사람에게 아키텍트보다는 &lt;code&gt;가이드&lt;/code&gt;라는 표현이 더 낫다 이야기한다. 경험이 풍부하고, 실력이 남달라서 다른 멤버들을 가르쳐주어 개발팀 전체의 수준을 높여주고, 그래서 더 높은 요구사항을 감당할 수 있게 해주며, 어째야 할지 감이 안오는 문제를 만났을때는 의지가 될 수 있는 사람&lt;/p&gt;
&lt;h2 id=&#34;아키텍트의-또-다른-역할-소프트웨어-아키텍처-제거반&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#아키텍트의-또-다른-역할-소프트웨어-아키텍처-제거반&#34;&gt;&lt;/a&gt; 아키텍트의 또 다른 역할 - 소프트웨어 아키텍처 제거반&lt;/h2&gt;
&lt;p&gt;Enrico Zaninotoo 라는 사람은 Agile을 되돌리기 힘든 것들(irreversibility)을 줄여서 복잡성(complexity)을 줄이는 것이라고 말했다. 복잡성을 줄이면 어떻게 될까? 로버트 마틴, 밥 아저씨가 말한 소프트웨어 아키텍처의 정의, 목표가 떠오른다. &lt;code&gt;적은 인력으로 유지 보수하기 쉽게 되는 것&lt;/code&gt;이다.&lt;/p&gt;
&lt;p&gt;앞서 정의에서 아키텍처는 되돌리기 힘든거라고 했다. 그렇다면 그걸 되돌리기 쉽게 만들 수 있다면 그건 더 이상 아키텍처가 아닌게 되고, 소프트웨어의 복잡도를 줄여주게 되며, 그 결과로 적은 인력으로 유지 보수하기 좋은 소프트웨어를 만들게 되는 것이다.&lt;/p&gt;
&lt;p&gt;아키텍트는 아키텍처라 불러야 마땅한 것들을 줄여나가는 사람이다.&lt;/p&gt;
&lt;h2 id=&#34;소프트웨어-품질과-돈&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#소프트웨어-품질과-돈&#34;&gt;&lt;/a&gt; 소프트웨어 품질과 돈&lt;/h2&gt;
&lt;p&gt;좀 더 나은 품질의 소프트웨어를 고집하는 것은 장인정신 처럼 보이고, 당장의 time to market (시의 적절하게 제품을 내어놓는 것) 을 위해 품질을 희생시키는 것은 회사의 이익을 위한 선택처럼 보인다. 같은 가격, 같은 기능을 가진 제품을 개발자의 시간을 적게 들이고 팔면 이익인것 아닌가? 짧은 시각으로 보면 맞는 말처럼 보인다.&lt;/p&gt;
&lt;p&gt;반복해서 언급하게 되지만 로버트 마틴이 말하는 좋은 아키텍처는 적은 인력으로 유지 보수할 수 있는 아키텍처이다. 좋은 아키텍처, 좋은 품질의 소프트웨어란 &lt;code&gt;출시한 이후에 지속적으로 유지 보수 및 새로운 기능을 넣기 좋은 소프트웨어&lt;/code&gt;인 것이다. 이게 바로 회사의 이익, 그리고 고객의 이익이 되는 것이다.&lt;/p&gt;
&lt;p&gt;아래 그림의 good design 을 보자. 초기에 투자를 해서 좋은 소프트웨어 아키텍처를 구축했더니 - 노련한 개발자가 핵심 가치를 놓치지 않고, 최소한의 아키텍처로 디자인 한 다음, 모든 팀원이 이해하고 개발할 수 있게 만들었더니 - 그 기반위에서 새로운 기능을 넣어주거나 유지하고 보수하기가 훨씬 쉬워진 것이다. 돈과 직결되는 생산성이 비약적으로 좋아진 것이다.&lt;/p&gt;
&lt;p&gt;&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn1&#34; id=&#34;fnref1&#34;&gt;[1]&lt;/a&gt;&lt;/sup&gt;&lt;img src=&#34;/2020/09/27/architecture-by-martin/3.png&#34; alt=&#34;Design Stamina Hypothesis by Martin Fowler&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;참고-링크&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#참고-링크&#34;&gt;&lt;/a&gt; 참고 링크&lt;/h2&gt;
&lt;p&gt;유튜브 링크: &lt;a href=&#34;https://youtu.be/4E1BHTvhB7Y&#34;&gt;https://youtu.be/4E1BHTvhB7Y&lt;/a&gt;&lt;br /&gt;
유튜브에서 언급한 칼럼: &lt;a href=&#34;https://martinfowler.com/ieeeSoftware/whoNeedsArchitect.pdf&#34;&gt;https://martinfowler.com/ieeeSoftware/whoNeedsArchitect.pdf&lt;/a&gt;&lt;br /&gt;
Design Stamina Hypothesis: &lt;a href=&#34;https://martinfowler.com/bliki/DesignStaminaHypothesis.html&#34;&gt;https://martinfowler.com/bliki/DesignStaminaHypothesis.html&lt;/a&gt;&lt;/p&gt;
&lt;hr class=&#34;footnotes-sep&#34; /&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;ol class=&#34;footnotes-list&#34;&gt;
&lt;li id=&#34;fn1&#34; class=&#34;footnote-item&#34;&gt;&lt;p&gt;이미지 출처: &lt;a href=&#34;https://martinfowler.com/bliki/DesignStaminaHypothesis.html&#34;&gt;https://martinfowler.com/bliki/DesignStaminaHypothesis.html&lt;/a&gt; &lt;a href=&#34;#fnref1&#34; class=&#34;footnote-backref&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
        <category term="Hyunseok Jeong" />
        <category term="Software Architecture" />
        <category term="Agile" />
        <category term="Architect" />
        <updated>2020-09-27T09:19:18.000Z</updated>
    </entry>
    <entry>
        <id>https://deepbaksu.github.io/2020/09/22/would-you-like/</id>
        <title>Would you like something to drink?</title>
        <link rel="alternate" href="https://deepbaksu.github.io/2020/09/22/would-you-like/"/>
        <content type="html">&lt;p&gt;이 영어 표현을 처음 만났을 때 뭔가 좀 이상하다고 생각했다.&lt;br /&gt;
아주 간단한 표현이지만 들여다 보기에 따라 상당히 난해할 수 있다.&lt;br /&gt;
소위 &lt;strong&gt;가정법적 표현&lt;/strong&gt;이 숨어있기 때문이다.&lt;/p&gt;
&lt;p&gt;가정법적 표현이라는 것은 화자가 어떤 표현을 할 때&lt;br /&gt;
&lt;strong&gt;&amp;quot;만일 이런 조건 하에서라고 (가정)하면, 이러하다.&amp;quot;&lt;/strong&gt;&lt;br /&gt;
라는 의미를 나타낸다.&lt;/p&gt;
&lt;p&gt;어려운 말 같지만 예를 보면 쉽다.&lt;/p&gt;
&lt;p&gt;이 글의 제목을 보자.&lt;br /&gt;
&lt;strong&gt;&amp;quot;Would you like something to drink?&amp;quot;&lt;/strong&gt;&lt;br /&gt;
예를 들어 친구가 집에 놀러왔을 때 할 수 있는 말이다.&lt;br /&gt;
“마실거 줄까?”&lt;br /&gt;
이 말을 영어권에서는 위와 같이 표현하는 것이다.&lt;/p&gt;
&lt;p&gt;아주 문자 그대로 해석하면&lt;br /&gt;
&lt;strong&gt;&amp;quot;만일 내가 어떤 마실 것을 주었다고 (가정)하면 너는 그것을 좋아할 것 같니?&amp;quot;&lt;/strong&gt;&lt;br /&gt;
정도가 되겠다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;Sure!&amp;quot;&lt;/strong&gt;&lt;br /&gt;
라고 답하면 좋아할 것 같다는 말이니 달라는 거다.&lt;/p&gt;
&lt;p&gt;형태적으로 보면 과거의 일을 말하는 상황이 아닌데 과거형 &lt;strong&gt;would&lt;/strong&gt; 를 사용한 것으로 가정법적 표현임을 알 수 있다.&lt;/p&gt;
&lt;p&gt;이 문장 하나를 철저히 이해하면 영어를 보는 새로운 문이 열린다.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;./would-you-like/coffee.jpg&#34; alt=&#34;Would you like some coffee?&#34; style=&#34;width: 50%; height: 50%&#34;&gt;
&lt;/figure&gt;
</content>
        <category term="Seunghwan Chang" />
        <category term="English" />
        <category term="would" />
        <updated>2020-09-22T12:50:18.000Z</updated>
    </entry>
    <entry>
        <id>https://deepbaksu.github.io/2020/09/22/lets-do-github-cli-part2/</id>
        <title>GitHub CLI 를 만져보자 - 2</title>
        <link rel="alternate" href="https://deepbaksu.github.io/2020/09/22/lets-do-github-cli-part2/"/>
        <content type="html">&lt;figure style=&#34;display: flex; flex-direction: column; align-items: center&#34;&gt;
  &lt;img src=&#34;./lets-do-github-cli-part2/yancy-min-842ofHC6MaI-unsplash.jpg&#34;&gt;
  &lt;figcaption&gt;Photo by &lt;a href=&#34;https://unsplash.com/@yancymin?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Yancy Min&lt;/a&gt; on &lt;a href=&#34;https://unsplash.com/s/photos/github?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Unsplash&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;gist 를 만져보며 GitHub CLI 에 대한 기대감이 커졌다. 이번에는 repo 와 관련한 기능을 써보고자 한다.&lt;br /&gt;
이렇게 신기해하며 사용법을 익히는 것보다 더욱 중요한 것은 실제로 꾸준히 쓰는 것이겠다.&lt;br /&gt;
좋은 분들과 함께하는 딥백수 커뮤니티에 블로그 포스팅을 자주하며 기능들을 내 것으로 만들어야 겠다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GitHub Repo: &lt;a href=&#34;https://github.com/cli/cli&#34;&gt;https://github.com/cli/cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Official Document: &lt;a href=&#34;https://cli.github.com/manual/&#34;&gt;https://cli.github.com/manual/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;clone-repo&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#clone-repo&#34;&gt;&lt;/a&gt; Clone repo&lt;/h2&gt;
&lt;p&gt;두 명령은 같다. 장단점이나 차이를 모르겠다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gh repo clone deepbaksu/deepbaksu.github.io
$ git clone http://github.com/deepbaksu/deepbaksu.github.io
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/22/lets-do-github-cli-part2/1.png&#34; alt=&#34;clone repo&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;create-repo&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#create-repo&#34;&gt;&lt;/a&gt; Create repo&lt;/h2&gt;
&lt;p&gt;이거 정말 유용하다. 실전에는 보통 아래와 같이 했었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;프로젝트 폴더를 만들고 기본적인 구현을 한 다음에&lt;/li&gt;
&lt;li&gt;GitHub 사이트로 가서 repo 를 생성하고 다시 local 의 repo 와 연결해주는 작업을 한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;GitHub CLI 를 이용하여 repo 를 생성하는 여러 옵션이 있지만 이렇게 쓰게 될 것 같다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;프로젝트 디렉토리를 만들고, 그 디렉토리로 들어간 다음&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ gh repo create&lt;/code&gt; 만 먹여주면 디렉토리 이름으로 repo 가 만들어진다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;실습&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#실습&#34;&gt;&lt;/a&gt; 실습&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;디렉토리를 생성하고 들어가서 바로 repo 를 생성하려 하였지만 실패!&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;git 디렉토리 이어야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;code&gt;$ git init&lt;/code&gt; 을 해주고 &lt;code&gt;$ gh repo create&lt;/code&gt; 를 해주니 성공&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;interactive 하게 repo 이름, description, public 여부를 설정해주면 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/22/lets-do-github-cli-part2/2.png&#34; alt=&#34;create repo&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;view-repo&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#view-repo&#34;&gt;&lt;/a&gt; View repo&lt;/h2&gt;
&lt;p&gt;repository 를 본다는 것이 무얼 말하는 것인지 처음에는 이해가 가지 않았다.&lt;br /&gt;
여러 옵션이 있지만 현재 CLI 화면의 git 의 GitHub repo 를 브라우저에서 열때 가장 많이 사용할 듯 하다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gh repo view // 만 쳐주면 README.md 만 보여주지만
$ gh repo view --web // 을 쳐주면 브라우저에서 GitHub repo 를 바로 열어준다.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;실습-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#실습-2&#34;&gt;&lt;/a&gt; 실습&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://README.md&#34;&gt;README.md&lt;/a&gt; 파일을 만들어준 다음,&lt;/li&gt;
&lt;li&gt;git add, commit, push 를 해주었다.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;여기서 신기했던게 --set-upstream 이 자동으로 되어 있을것만 같았는데 해줘야 한다는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/22/lets-do-github-cli-part2/3.png&#34; alt=&#34;add readme repo&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;code&gt;$ gh repo view&lt;/code&gt; 를 해주면 해당 repo 의 &lt;a href=&#34;http://README.md&#34;&gt;README.md&lt;/a&gt; 를 보여준다&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ gh repo view --web&lt;/code&gt; 옵션을 추가해주면 바로 해당 repo 의 GitHub 페이지를 브라우저에서 열어준다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/22/lets-do-github-cli-part2/4.png&#34; alt=&#34;view repo&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;아래와 같이 Browser 에서 열린다. 편리하다!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/22/lets-do-github-cli-part2/5.png&#34; alt=&#34;view repo web&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;alias&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#alias&#34;&gt;&lt;/a&gt; Alias&lt;/h2&gt;
&lt;p&gt;평소에 git 도 alias 를 잘 쓰고 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git cb // git checkout --branch
$ git cm -m // git commit -m
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 GitHub CLI 명령중 create 와 view 는 단축키를 지정해주면 편할 것 같다.&lt;br /&gt;
아래와 같이 설정 해보자&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gh repo create →  $ gh rc
$ gh repo view →   $ gh rv
$ gh repo view --web →  $ gh rvw
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/22/lets-do-github-cli-part2/6.png&#34; alt=&#34;alias&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Official document (&lt;a href=&#34;https://cli.github.com/manual/&#34;&gt;https://cli.github.com/manual/&lt;/a&gt;) 자체가 길지 않아 30분-1시간을 흝어보면 왠만한 기능은 이해가 되고, 여기처럼 실습까지 해주면 대부분의 feature 는 충분히 소화해 낼 수 있을것 같다. 마지막으로 pull request 를 잘 다뤄보고 싶은데 이건 좀더 실전 경험이 쌓이면 정리해보려 한다.&lt;/p&gt;
&lt;p&gt;GitHub CLI 에서&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;PR 을 보내거가, PR 을 리뷰하고&lt;/li&gt;
&lt;li&gt;제안된 수정사항을 검토하거나 빌드해보고&lt;/li&gt;
&lt;li&gt;merge 까지 해보는 거다.&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="Hyunseok Jeong" />
        <category term="GitHub CLI" />
        <category term="Repo" />
        <category term="Alias" />
        <updated>2020-09-22T08:36:04.000Z</updated>
    </entry>
    <entry>
        <id>https://deepbaksu.github.io/2020/09/21/lets-do-github-cli-part1/</id>
        <title>GitHub CLI 를 만져보자 - 1</title>
        <link rel="alternate" href="https://deepbaksu.github.io/2020/09/21/lets-do-github-cli-part1/"/>
        <content type="html">&lt;p&gt;GitHub CLI 가 나왔다 한다.&lt;br /&gt;
GitHub 을 이용해 본격적인 협업을 하지는 않지만 백업 용도로 잘 쓰고 있기에 이런 저런 기능이 있구나 하고 넘어가기 보다는 나의 용도에 적합한 기능들 만이라도 직접 한번 써보고자 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GitHub Repo: &lt;a href=&#34;https://github.com/cli/cli&#34;&gt;https://github.com/cli/cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Official Document: &lt;a href=&#34;https://cli.github.com/manual/&#34;&gt;https://cli.github.com/manual/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;설치&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#설치&#34;&gt;&lt;/a&gt; 설치&lt;/h2&gt;
&lt;p&gt;Chocolatey 가 설치되어 있었기에 Powershell 을 관리자 모드로 열어서 아래와 같이 gh 를 설치 완료&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/21/lets-do-github-cli-part1/1.png&#34; alt=&#34;install github cli&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;로그인&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#로그인&#34;&gt;&lt;/a&gt; 로그인&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;gh auth login&lt;/code&gt; 또는 &lt;code&gt;gh auth login --hostname github.com&lt;/code&gt; 으로 로그인을 해주면 준비 완료이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/21/lets-do-github-cli-part1/2.png&#34; alt=&#34;login github cli&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;손이-가는-명령들-사용해보기&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#손이-가는-명령들-사용해보기&#34;&gt;&lt;/a&gt; 손이 가는 명령들 사용해보기&lt;/h2&gt;
&lt;p&gt;설치하고 보니 아래와 같은 명령들이 가능하다.&lt;br /&gt;
해보고 싶은 것은&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;gist 생성하기&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;언제든 동작하는, 나중에 참고하고픈 코드들을 gist 로 백업해둘 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;repo create, clone, view&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GitHub 로 가지 않고도 바로 repo 를 생성할 수 있다.&lt;/li&gt;
&lt;li&gt;clone 은 git clone 과 뭐가 다른지 궁금하다&lt;/li&gt;
&lt;li&gt;view 기능은 정확히 어떤 기능일지 궁금하다&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;당장은 쓰지 않더라도 기대 되거나 궁금한 기능&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;alias&lt;/strong&gt;: git 도 alias 를 잘 쓰고 있기에 이것도 궁금하다&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;completion&lt;/strong&gt;: 이건 상상이 안가는데 script 관련이라니 사용처가 궁금하다&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pr&lt;/strong&gt;: gh 기능의 꽃이 pr 이 아닌가 싶다. 특히 예시로 나오는 pr checkout 을 하면, pr 을 바로 내려받아서 빌드하고 돌려볼 수 있겠다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/21/lets-do-github-cli-part1/3.png&#34; alt=&#34;commands&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;create-gist-list-gist&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#create-gist-list-gist&#34;&gt;&lt;/a&gt; create gist / list gist&lt;/h2&gt;
&lt;p&gt;이번 포스팅에서는 gist 까지만 사용해보자.&lt;br /&gt;
만들어둔 코드가 마음에 들어 gist 에 넣어두고 싶다면 아래와 같이 해주면 된다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;default 가 secret 이므로 public 으로 올리려면 &lt;code&gt;--public&lt;/code&gt; 옵션을 준다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;별도로 설명을 추가하고 싶다면 &lt;code&gt;--desc&lt;/code&gt; 옵션을 이용한다. 이걸 쓰지 않으면 파일명이 들어간다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;개인적으로 gist 의 활용은 때때로 써야할 기능들을 cloud 에 저장해놓고 필요할때 다시 가져와서 보는데 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;예를 들어 Go 언어로 AES256 암호화/복호화를 하는 코드 같은 것&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;아래와 같이 간단히 &lt;code&gt;gh gist list&lt;/code&gt; 명령으로 내가 Cloud 에 올려놓은 gist 의 리스트를 볼 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gist 가 많아진다면 query 나 간단한 regexp 로 추려낼 수 있으면 좋겠다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/21/lets-do-github-cli-part1/4.png&#34; alt=&#34;create and list gist&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;edit-gist-view-gist&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#edit-gist-view-gist&#34;&gt;&lt;/a&gt; edit gist / view gist&lt;/h2&gt;
&lt;p&gt;이 기능을 써보면서 박수를 쳤다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;list 명령으로 원하는 gist 를 찾아냈다면 해시값 (gist ID) 로 edit 하겠다는 요청을 할 수 있다.
&lt;ul&gt;
&lt;li&gt;git 에서처럼 hash 의 앞쪽 일부만으로 요청은 불가하였다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gh gist edit&lt;/code&gt; 명령만으로 지정해놓은 editor 로 바로 코드가 열린다.&lt;/li&gt;
&lt;li&gt;그리고 수정이 끝나 editor 를 닫으면 바로 Cloud 에 수정된 내용이 올라간다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;gh gist view&lt;/code&gt; 명령을 통해 gist 에 올린 원본인 mygist.go 파일은 전혀 건드리지 않고, gist 의 내용만 변경된 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/21/lets-do-github-cli-part1/5.png&#34; alt=&#34;edit and view gist&#34; /&gt;&lt;/p&gt;
&lt;p&gt;GitHub 로 가서 보면 변경된 히스토리가 모두 저장되어 있음을 알 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/21/lets-do-github-cli-part1/6.png&#34; alt=&#34;gist history&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;이어서&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#이어서&#34;&gt;&lt;/a&gt; 이어서&lt;/h2&gt;
&lt;p&gt;이어지는 posting 에 pr 과 repo 관련한 기능을 써보겠다.&lt;/p&gt;
&lt;p&gt;덧붙여 한마디 해보고 싶다. &lt;strong&gt;Learning by doing&lt;/strong&gt; 이라는 말이 있다.&lt;br /&gt;
GitHub CLI 가 정식 릴리즈 되었다는 말을 들었고 이런 저런 기능이 있다는 말 정도만 듣고 언젠가 써볼까 생각만 했었는데&lt;br /&gt;
짬을 내어 이렇게 들여다보고 손으로 직접 타이핑을 해보니 그냥 눈으로 흝어본 것과는 하늘과 땅의 차이가 난다.&lt;br /&gt;
무엇이든 손으로 직접 해보자.&lt;/p&gt;
</content>
        <category term="Hyunseok Jeong" />
        <category term="GitHub CLI" />
        <category term="Gist" />
        <category term="Leaning by Doing" />
        <updated>2020-09-21T10:42:32.000Z</updated>
    </entry>
    <entry>
        <id>https://deepbaksu.github.io/2020/09/18/slack-github-action-automation/</id>
        <title>GitHub Action을 이용한 알림 자동화</title>
        <link rel="alternate" href="https://deepbaksu.github.io/2020/09/18/slack-github-action-automation/"/>
        <content type="html">&lt;h2 id=&#34;1-why-did-i-do-this&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-why-did-i-do-this&#34;&gt;&lt;/a&gt; 1. Why did I do this?&lt;/h2&gt;
&lt;p&gt;간단합니다. 회사 슬랙에 과제 알림을 자동화시키고 싶었기 때문입니다. 어떻게 해야 하는지 알기 위해 시중에 나온 자동화 관련 책들을 펼쳤습니다. 크롤러 만드는 방법과 crontab에 대해서 설명을 잘해주었지만 문제가 있었죠. 제가 따로 쓸 만한 서버가 없었습니다. 기본적으로 자동화는 24시간 돌아가는 서버를 통해서 진행하는 경우가 많습니다. 그렇다고 간단한 알림을 가지고 클라우드로 돌리긴 좀 손이 가질 않았습니다. 즉, 돈을 들이지 않고 자동화를 시키고 싶었습니다.&lt;/p&gt;
&lt;p&gt;그러던 중 어떤 생각 하나가 떠올랐습니다.&lt;/p&gt;
&lt;p&gt;지금 제가 이 글을 쓰고 있는 딥백수 블로그는 Branch를 나누고 GitHub Action을 format check이라든지 테스트를 자동화하는데, GitHub Action을 통해서 제가 가진 문제를 해결할 수 있을 거라고 생각했습니다.&lt;/p&gt;
&lt;p&gt;다행히 GitHub Action에 익숙한 Mo Kweon님이 계시기에 페어 프로그래밍을 하면서 하나하나 가르쳐주셨습니다. 다른 분께 배운 지식이기에 당연히 나눠야 한다고 생각했고 이 글을 쓰며 혹시 비슷한 고민을 하시는 분께 매뉴얼이 되었으면 합니다.&lt;/p&gt;
&lt;h2 id=&#34;2-make-a-crawler&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-make-a-crawler&#34;&gt;&lt;/a&gt; 2. Make a Crawler&lt;/h2&gt;
&lt;p&gt;크롤러는 만드셨다고 가정하겠습니다.&lt;/p&gt;
&lt;h2 id=&#34;3-make-a-slack-channel&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-make-a-slack-channel&#34;&gt;&lt;/a&gt; 3. Make a Slack Channel&lt;/h2&gt;
&lt;p&gt;알림을 받을 슬랙 채널을 만들어줍니다. 테스트해야 하는 채널이기 때문에 다른 슬랙 멤버들이 메시지 수신을 하지 않도록 혼자만의 채널에서 테스트하시는 걸 권합니다. 저는 alert라는 채널을 만들었습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/18/slack-github-action-automation/create_slack_channel.jpg&#34; alt=&#34;슬랙 채널 생성&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;4-make-a-slack-app&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-make-a-slack-app&#34;&gt;&lt;/a&gt; 4. Make a Slack App&lt;/h2&gt;
&lt;p&gt;이제 슬랙 알림을 위한 설정을 들어가야 합니다. 아래 사진처럼 하늘색 동그라미를 쳐놓은 버튼을 클릭해주세요.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/18/slack-github-action-automation/slack_setting.jpg&#34; alt=&#34;Slack Setting&#34; /&gt;&lt;/p&gt;
&lt;p&gt;들어가 보면 다음과 같은 페이지에 접속되실 겁니다. 하늘색 동그라미를 쳐놓은 검색창에 webhook이라고 입력해준 뒤 검색해주세요.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/18/slack-github-action-automation/slack_app_directory.jpg&#34; alt=&#34;Slack App directory&#34; /&gt;&lt;/p&gt;
&lt;p&gt;그러면 다음과 같이 결과 창이 뜰 텐데 하늘색 동그라미를 쳐놓은 Incoming Webhooks를 클릭해주세요.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/18/slack-github-action-automation/result_search_webhooks.jpg&#34; alt=&#34;Result Searching webhooks&#34; /&gt;&lt;/p&gt;
&lt;p&gt;그럼 다음과 같이 Webhooks에 대한 소개를 보실 수 있습니다. JSON을 사용해서 POST 하는군요.(크롤러에서 JSON으로 데이터를 보내줘야 한다는 의미입니다) 당연히 Add 해줘야겠죠?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/18/slack-github-action-automation/incoming_webhooks.jpg&#34; alt=&#34;Incoming Webhooks&#34; /&gt;&lt;/p&gt;
&lt;p&gt;어떤 채널에 메시지를 보낼지 설정을 해줘야 합니다. 이전에 만들었던 채널을 설정해준 뒤 Add 해줍니다.&lt;/p&gt;
&lt;h2 id=&#34;5-configure-webhooks&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-configure-webhooks&#34;&gt;&lt;/a&gt; 5. Configure Webhooks&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/18/slack-github-action-automation/webhooks_configuration.jpg&#34; alt=&#34;Webhooks Configuration&#34; /&gt;&lt;/p&gt;
&lt;p&gt;그러면 다음과 같이 Setup Instructions 화면이 출력되는데 여기에 가장 중요한 Webhook URL이 있습니다. 이 URL에 JSON 데이터를 보내면 우리가 원하는 대로 메시지가 슬랙 채널에 전송된다는 의미입니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/18/slack-github-action-automation/webhooks_setup_instructions.jpg&#34; alt=&#34;Webhooks Setup Instructions&#34; /&gt;&lt;/p&gt;
&lt;p&gt;당연히 이 Webhook URL이 다른 사람에게 알려지면 안 되겠죠?&lt;/p&gt;
&lt;p&gt;화면을 아래로 쭉 내려보면 Example이라고 해서 어떻게 데이터가 Posting 되는지 시험해볼 수 있는 API가 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/18/slack-github-action-automation/webhooks_example.jpg&#34; alt=&#34;Webhooks Example&#34; /&gt;&lt;/p&gt;
&lt;p&gt;한번 시험해볼까요? 해당 코드를 복사한 뒤 터미널 창에 붙여넣기 해보겠습니다. 다음과 같이 채널에 메시지가 잘 전달된 걸 보실 수 있을 겁니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/18/slack-github-action-automation/webhooks_example_result.jpg&#34; alt=&#34;Webhooks Example API Result&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;6-edit-the-crawler&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6-edit-the-crawler&#34;&gt;&lt;/a&gt; 6. Edit the Crawler&lt;/h2&gt;
&lt;p&gt;Webhooks설정까지 마쳤으니 본격적으로 GitHub Action으로 들어가 보겠습니다. 그 전에 크롤러에 다음과 같은 코드를 추가해주세요.&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;url = os.environ.get(&lt;span class=&#34;string&#34;&gt;&amp;#x27;SLACK_URL&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;slack_post_text&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;url, text&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    result = requests.post(url, json = &amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;: text&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; result&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Webhooks를 설정하면서 Webhooks URL은 다른 사람에게 보여선 안 된다고 했습니다. 그렇기 때문에 우리는 이 URL을 SLACK_URL이란 환경변수로 지정해서 다른 사람에겐 보이지 않되 코드에선 변수를 가져와 사용할 수 있도록 만들어줄 겁니다.&lt;/p&gt;
&lt;p&gt;그리고 &lt;code&gt;slack_post_text&lt;/code&gt; 라는 함수를 통해 슬랙에 보내고자 하는 메시지를 JSON으로 URL에 전달해줍니다.&lt;/p&gt;
&lt;h2 id=&#34;7-configure-github-repository-settings&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7-configure-github-repository-settings&#34;&gt;&lt;/a&gt; 7. Configure GitHub Repository Settings&lt;/h2&gt;
&lt;p&gt;GitHub 저장소 하나를 만들어준 뒤, 크롤러를 저장소에 push 해주세요. 그리고 우리가 그토록 기다리던 &lt;strong&gt;GitHub Action&lt;/strong&gt;을 진행하기 위해 저장소 메뉴 중 Pull requests 오른쪽에 있는 Action을 클릭해주세요.&lt;/p&gt;
&lt;p&gt;라고 하고 싶지만, 우리에겐 조금 더할 일이 남아있습니다. 환경변수를 지정해줘야 한다고 했던 거 기억하시나요?&lt;/p&gt;
&lt;p&gt;맞습니다. 그 환경변수를 지정해보도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;Settings에 들어가 주시고 아래 하늘색 표시해놓은 것처럼 Secrets를 클릭해주세요.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/18/slack-github-action-automation/github_settings.jpg&#34; alt=&#34;GitHub Settings&#34; /&gt;&lt;/p&gt;
&lt;p&gt;왠지 뭘 해야 할지 감 오시죠? 맞습니다. New secret 버튼을 눌러주세요.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/18/slack-github-action-automation/github_secrets.jpg&#34; alt=&#34;GitHub Secrets&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Name엔 전에 말씀드렸던 SLACK_URL을 입력해주시고, Value에 Webhooks URL을 입력해주신 다음 추가해주세요.&lt;br /&gt;
&lt;img src=&#34;/2020/09/18/slack-github-action-automation/add_secret.jpg&#34; alt=&#34;Add Secrets&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;8-make-a-github-action&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#8-make-a-github-action&#34;&gt;&lt;/a&gt; 8. Make a GitHub Action&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;드디어&lt;/strong&gt; 정말 우리가 기다리고 기다리던 GitHub Action을 할 시간입니다.&lt;/p&gt;
&lt;p&gt;GitHub Action에 관한 글인데 뭐가 이렇게 많냐고요? 뭐 어쩔 수 없습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/18/slack-github-action-automation/experience_kim.jpg&#34; alt=&#34;좋은 경험이다 생각하고... 흠흠... - 출처 YTN&#34; /&gt;&lt;/p&gt;
&lt;p&gt;데이터 분석을 배울 때 거의 귀가 닳도록 듣는 말이 전처리에 전체 프로젝트 중 80%의 시간을 쏟는다는 얘기인데, Github Action도 마찬가지인 듯 합니다. 환경설정을 해줘야 할 게 많이 있어서 시간이 오래 걸렸습니다.&lt;/p&gt;
&lt;p&gt;각설하고, 여기서는 크롤러를 python으로 만들었다고 가정하겠습니다.&lt;/p&gt;
&lt;p&gt;하늘색 표시를 해놓은 Python application에서 Set up this workflow를 클릭해주세요.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/18/slack-github-action-automation/github_action_python_application.jpg&#34; alt=&#34;Select Workflow&#34; /&gt;&lt;/p&gt;
&lt;p&gt;workflow 내용을 다음과 같이 바꿔주세요.&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;name:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;Python&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;application&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;on:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;schedule:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;cron:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;5 0 * * *&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;workflow_dispatch:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;inputs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;logLevel:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;description:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Log level&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;required:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;default:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;warning&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;tags:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;description:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Test scenario tags&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;jobs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;build:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;runs-on:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;ubuntu-latest&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;steps:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;uses:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;actions/checkout@v2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;name:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;Set&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;up&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;Python&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;3.8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;uses:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;actions/setup-python@v2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;with:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;attr&#34;&gt;python-version:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;3.8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;name:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;Install&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;dependencies&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;run:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;          python -m pip install --upgrade pip&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;          pip install bs4 requests&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;run:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;python&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;크롤러이름.py&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;env:&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;# Or as an environment variable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;attr&#34;&gt;SLACK_URL:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;$&amp;#123;&amp;#123;&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;secrets.SLACK_URL&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#125;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;9-edit-workflow&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#9-edit-workflow&#34;&gt;&lt;/a&gt; 9. Edit workflow&lt;/h2&gt;
&lt;p&gt;특히 들여쓰기에 유의해주세요. 파이선을 해보셨다면 아시겠지만, 들여쓰기 하나 때문에 빨간색 에러가 발생하곤 합니다. 위의 8번 챕터에서는 코드 설명 없이 우선 고치라고 말씀드렸는데 여기서 하나하나 설명해 드리도록 하겠습니다. 우선 &lt;strong&gt;on&lt;/strong&gt; 부분을 보겠습니다.&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;on:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;schedule:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;cron:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;5 0 * * *&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;workflow_dispatch:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;inputs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;logLevel:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;description:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Log level&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;required:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;default:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;warning&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;tags:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;description:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Test scenario tags&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;schedule&lt;/strong&gt; 밑에 있는 cron은 언제 해당 크롤러를 작동시킬지에 대한 내용입니다. 이에 대한 문법을 다 외우시는 것보다는 &lt;a href=&#34;https://crontab.guru/&#34;&gt;crontab.guru&lt;/a&gt;라는 사이트를 방문해서 원하시는 날짜 설정을 하시길 권해드리고 싶습니다. 주의할 사항은 설정되는 시간이 UTC(협정 시계시) 기준이라는 겁니다. 한국은 UTC+9를 설정해줘야 한다는 점을 유의해주세요.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;workflow_dispatch&lt;/strong&gt;부분은 해당 action이 작동하는지 작동하지 않는지 확인하기 위해 수동으로 GitHub Action을 작동시킬 수 있도록 해주는 코드입니다.&lt;/p&gt;
&lt;p&gt;그럼 다음으로 &lt;strong&gt;jobs&lt;/strong&gt;를 보겠습니다.&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;jobs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;build:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;runs-on:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;ubuntu-latest&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;steps:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;uses:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;actions/checkout@v2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;name:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;Set&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;up&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;Python&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;3.8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;uses:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;actions/setup-python@v2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;with:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;attr&#34;&gt;python-version:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;3.8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;name:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;Install&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;dependencies&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;run:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;          python -m pip install --upgrade pip&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;          pip install bs4 requests&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;run:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;python&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;크롤러이름.py&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;env:&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;# Or as an environment variable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;attr&#34;&gt;SLACK_URL:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;$&amp;#123;&amp;#123;&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;secrets.SLACK_URL&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#125;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;대강 눈치채실 수도 있겠지만, runs-on을 보면 GitHub Action이 우분투 환경에서 작동한다는 것을 알 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;- name: Install dependencies&lt;/strong&gt; 이 부분에선 익숙한 pip install이 등장합니다. 필요한 라이브러리가 있으시다면 추가해주세요.&lt;/p&gt;
&lt;p&gt;마지막으로 &lt;strong&gt;run&lt;/strong&gt; 부분에 크롤러를 실행할 수 있도록 해주시고 &lt;strong&gt;env&lt;/strong&gt;에는 그토록 강조했던 SLACK_URL 환경변수를 입력해줍니다.&lt;/p&gt;
&lt;p&gt;그렇게 한 뒤 화면 우상단에 있는 Start commit 버튼을 누르고 커밋해주세요.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/18/slack-github-action-automation/github_action_commit.jpg&#34; alt=&#34;GitHub Action Commit&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;10-test-github-action&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#10-test-github-action&#34;&gt;&lt;/a&gt; 10. Test GitHub Action&lt;/h2&gt;
&lt;p&gt;이제 테스트를 한 번 해보겠습니다.&lt;/p&gt;
&lt;p&gt;GitHub 저장소에서 Action 메뉴를 클릭해주세요. 그리고 하늘색 표시해 준 Python application을 클릭해주세요&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/18/slack-github-action-automation/workflow_test.jpg&#34; alt=&#34;workflow test&#34; /&gt;&lt;/p&gt;
&lt;p&gt;잘 작동하는지 아닌지 수동으로 확인해보겠습니다. Run workflow를 실행해주세요.&lt;/p&gt;
&lt;p&gt;그럼 슬랙 채널에 다음과 같이 메시지가 도착했음을 보실 수 있을 겁니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/18/slack-github-action-automation/test_result.jpg&#34; alt=&#34;Test Results&#34; /&gt;&lt;/p&gt;
&lt;p&gt;여기까지 GitHub Action을 이용한 Slack 알림 자동화를 해보셨는데 어떠셨나요?&lt;/p&gt;
&lt;p&gt;많이 어려우셨나요? 그렇죠? 맞아요. 저도 많이 어렵더라고요.&lt;/p&gt;
&lt;p&gt;하지만 안되면 될 때까지, 계속해서 해보거나 &lt;a href=&#34;https://bit.ly/2Sqdnws&#34;&gt;딥백수 슬랙&lt;/a&gt;에 오셔서 질문해주시면 다른 구성원분들이 많이 도움을 주시지 않을까 생각을 합니다.&lt;/p&gt;
&lt;p&gt;사실 이 글을 쓰는 저는 컴맹에 가까운 수준이라 많이 어렵더라고요. 하나하나 이해하는 데 시간이 얼마나 많이 걸리던지… 그렇게 헤매던 저를 인내심을 가지고 가르쳐주신 Mo Kweon님께 감사하다는 말을 마지막으로 남기고 싶습니다.&lt;/p&gt;
&lt;p&gt;긴 글 읽어주셔서 고맙습니다.&lt;/p&gt;
</content>
        <category term="Jinyoung Song" />
        <category term="Github Action" />
        <category term="Slack" />
        <category term="Automation" />
        <category term="자동화" />
        <category term="cron" />
        <updated>2020-09-18T14:54:37.000Z</updated>
    </entry>
    <entry>
        <id>https://deepbaksu.github.io/2020/09/17/lesson-learned-at-bluehole/</id>
        <title>나는 블루홀에서 무엇을 배웠나</title>
        <link rel="alternate" href="https://deepbaksu.github.io/2020/09/17/lesson-learned-at-bluehole/"/>
        <content type="html">&lt;p&gt;한국에서 여러 회사에 다닌 곳 중에서 가장 기억에 남는 곳은 블루홀(현재는 크래프톤) 입니다. 그때 운이 좋게도 이상균 디렉터님으로부터 &amp;quot;의도&amp;quot;를 전달하는 커뮤니케이션에 대해 알게 되었고 깊이 익혀 항상 커뮤니케이션을 잘한다는 소리를 주변으로부터 들어올 수 있었습니다.&lt;/p&gt;
&lt;p&gt;보통 일반적인 회사에서의 커뮤니케이션 문제는 다음 그림과 같이 &#39;의도’가 명확하게 드러나지 않은 소통을 하기 때문에 발생합니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/17/lesson-learned-at-bluehole/communication.jpg&#34; alt=&#34;이상균 - 게임 디렉팅 튜토리얼 중&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;전시-행동-강령&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#전시-행동-강령&#34;&gt;&lt;/a&gt; 전시 행동 강령&lt;/h2&gt;
&lt;p&gt;모든 부대에는 전시에 특별한 지시 없어도 일사불란하게 움직이도록 “전시 행동 강령” 이라는 게 있습니다. 예를 들어, 이상균 님은 카투사로 복무하면서 다음과 같은 전시 행동 강령을 부여받았습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;모든 문서를 파기하고 하드디스크를 뽑아 들고&lt;/li&gt;
&lt;li&gt;용산 고등학교 운동장에서 헬기를 타는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그런데 말입니다. 용산 고등학교가 파괴되었다면? 단순 지시사항이 저게 전부였다면 용산 고등학교 근처에서 우왕좌왕했을 것입니다.&lt;/p&gt;
&lt;p&gt;그런데 만약 “최신 카투사 신병 자료를 캠프 헨리까지 옮겨야 한다” 는 의도가 전달되었다면?&lt;/p&gt;
&lt;p&gt;탈것을 구하든, 걸어서든 캠프 헨리까지 가려고 했을 것입니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/17/lesson-learned-at-bluehole/commander_intent.jpg&#34; alt=&#34;지휘관의 의도&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;지휘관의-의도&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#지휘관의-의도&#34;&gt;&lt;/a&gt; 지휘관의 의도&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1980년 미 육군에서 대부분의 전시 행동 강령과 작전계획이 무용지물이 된다는 걸 깨닫고 대안으로 제시한 개념&lt;/li&gt;
&lt;li&gt;모든 명령서에는 최상단에 의도를 짧게 서술&lt;/li&gt;
&lt;li&gt;강령보다 의도를 중심&lt;/li&gt;
&lt;li&gt;하드디스크를 들고 용산 고등학교로 가라 (X)&lt;/li&gt;
&lt;li&gt;최신 카투사 신병 자료를 캠프 헨리의 작전 본부까지 옮겨라 (O)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;지시를-전달할-때는-왜냐하면-이-들어간다&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#지시를-전달할-때는-왜냐하면-이-들어간다&#34;&gt;&lt;/a&gt; 지시를 전달할 때는 “왜냐하면” 이 들어간다.&lt;/h2&gt;
&lt;div style=&#34;display: flex;&#34;&gt;
  &lt;div style=&#34;display: flex; flex-direction: column;&#34;&gt;
    &lt;img alt=&#34;의도가 없는 기획서&#34; src=&#34;./lesson-learned-at-bluehole/design_doc_1.jpg&#34;&gt;
  &lt;/div&gt;
  &lt;div style=&#34;display: flex; flex-direction: column;&#34;&gt;
    &lt;img alt=&#34;의도가 있는 기획서&#34; src=&#34;./lesson-learned-at-bluehole/design_doc_2.jpg&#34;&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;고기는 오전 9시, 자정, 오후 6시, 오후 9시에 채워집니다. &lt;strong&gt;왜냐하면&lt;/strong&gt; 출근(등교), 점심, 퇴근(하교) 자기 직전 시간에 게임 플레이를 유도하고 싶습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;의도를 전달하지 않으면 &amp;quot;내 마음을 맞춰봐&amp;quot;와 같다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;맨 위에 나온 슬픈 대화 내용도 디렉터가 의도를 전달했다면 다음과 같을 것입니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/17/lesson-learned-at-bluehole/director_intent.jpg&#34; alt=&#34;디렉터의 의도&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;디렉팅이-아니더라도-의도-전달은-중요하다&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#디렉팅이-아니더라도-의도-전달은-중요하다&#34;&gt;&lt;/a&gt; 디렉팅이 아니더라도 의도 전달은 중요하다.&lt;/h2&gt;
&lt;p&gt;이 글을 쓴 목적이 이것입니다. 디렉팅이 아니어도 의도 전달은 중요합니다.&lt;/p&gt;
&lt;p&gt;실제로 겪은 한가지 예는 다음과 같은 상황입니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“CLI 애플리케이션을 위해 A 라이브러리 사용법을 문의하고 싶은데요 &lt;strong&gt;왜냐하면&lt;/strong&gt; 코드를 제출할 때마다 주요 체크리스트를 점검할 수 있도록 유저가 로컬에서 돌려볼 수 있게 하고 싶습니다.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;그러면 종종 저는 &amp;quot;그런 경우라면 CLI보다 린터 서버를 구성해 자동으로 실행되도록 하는 것이 어떨까요?&amp;quot;라는 답변을 들을 수 있습니다. 의도를 전달하지 않았다면 저는 A 라이브러리 사용법에 대해 듣고 그것이 최선인 방법인 것으로 알고 계속 진행했을 것입니다.&lt;/p&gt;
&lt;p&gt;코드 리뷰를 하더라도 항상 의도를 적어주면 오해가 적어지게 됩니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“여기서는 하드코딩으로 변경해주세요 &lt;strong&gt;왜냐하면&lt;/strong&gt; Example 코드로 문서화되기 때문에 유저가 변수를 찾기 위해 점프하는 일이 없도록 하고 싶습니다.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;위는 예시를 든 것이고 회의에서 의견을 제시하더라도 &lt;strong&gt;왜냐하면&lt;/strong&gt;을 붙여준다면 오해가 적어지고 또 다른 좋은 의견을 끌어내게 됩니다.&lt;/p&gt;
&lt;h2 id=&#34;결론&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#결론&#34;&gt;&lt;/a&gt; 결론&lt;/h2&gt;
&lt;p&gt;업무에서 의사소통하면서 &amp;quot;왜냐하면&amp;quot;을 사용하고 있는지 되돌아보시길 바랍니다. 이 외에도 이상균님으로부터 배운 지식들로는 DRI(Directly Responsible Individual) 등 및 좋은 결정을 하는 방법 등이 있습니다.&lt;/p&gt;
&lt;p&gt;그리고 위에 적은대로 의도 전달만으로는 충분하지 않을 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/17/lesson-learned-at-bluehole/understanding_disparity.jpg&#34; alt=&#34;디렉터와 멤버간 이해 차이&#34; /&gt;&lt;/p&gt;
&lt;p&gt;디렉터와 멤버간의 이해차이가 발생하였고 디렉터는 의도 전달을 통해 디렉팅을 하지만 여전히 제대로 된 의도 전달이 안되었을 수 도 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/17/lesson-learned-at-bluehole/understanding_disparity_2.jpg&#34; alt=&#34;디렉팅 후 멤버간 이해 차이&#34; /&gt;&lt;/p&gt;
&lt;p&gt;그래서 중요한 것이 피드백을 잘하는 방법입니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/17/lesson-learned-at-bluehole/feedback_summary.jpg&#34; alt=&#34;피드백 하는법 요약&#34; /&gt;&lt;/p&gt;
&lt;p&gt;더 궁금하신 분들은 꼭 이상균 님의 &lt;a href=&#34;https://www.slideshare.net/iyooha/ss-69350767/31&#34;&gt;게임 디렉팅 튜토리얼&lt;/a&gt;을 살펴보시기를 추천드립니다.&lt;/p&gt;
&lt;p&gt;이외에도 더 좋은 내용 디스커션을 원하시는 분들은 &lt;a href=&#34;https://bit.ly/2Sqdnws&#34;&gt;딥백수 슬랙&lt;/a&gt;을 방문해주세요.&lt;/p&gt;
&lt;h2 id=&#34;레퍼런스&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#레퍼런스&#34;&gt;&lt;/a&gt; 레퍼런스&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;이상균 - 게임 디렉팅 튜토리얼: &lt;a href=&#34;https://www.slideshare.net/iyooha/ss-69350767/31&#34;&gt;https://www.slideshare.net/iyooha/ss-69350767/31&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;이상균 - 프로그래머에게 사랑받는 게임 기획서 작성법: &lt;a href=&#34;https://www.slideshare.net/iyooha/20101002-53482961&#34;&gt;https://www.slideshare.net/iyooha/20101002-53482961&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Mo Kweon" />
        <category term="bluehole" />
        <category term="krafton" />
        <category term="communication" />
        <updated>2020-09-17T17:49:37.000Z</updated>
    </entry>
    <entry>
        <id>https://deepbaksu.github.io/2020/09/14/make-your-routine/</id>
        <title>애기 아빠 개발자의 생활 루틴</title>
        <link rel="alternate" href="https://deepbaksu.github.io/2020/09/14/make-your-routine/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/2020/09/14/make-your-routine/my-life-journal-WI30grRfBnE-unsplash.jpg&#34; alt=&#34;Photo by My Life Journal on Unsplash&#34; /&gt;&lt;/p&gt;
&lt;p&gt;얼마전 어느 개발자 분이 자신의 생활 루틴을 꾸려나가는 방법론에 관해 소개하시는 멋진 글을 읽었습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.shiren.dev/2020-09-07&#34;&gt;하루 25분 실행하기: 하루를 대하는 14년차 개발자의 자세&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;꾸준히 자신에 맞는 방법을 고민하고, 또 실천하시는 모습이 존경스러웠습니다.&lt;br /&gt;
이를 읽고 넘기기만 할 것이 아니라 나의 루틴을 돌아보고 정리 해보는 시간, 나아가 개선점과 배울 점들을 적용해보는 시간을 가져보자는 욕심이 났습니다.&lt;/p&gt;
&lt;h2 id=&#34;공감한-부분&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#공감한-부분&#34;&gt;&lt;/a&gt; 공감한 부분&lt;/h2&gt;
&lt;p&gt;읽으며 공감이 갔던 부분은 다음과 같습니다.&lt;/p&gt;
&lt;h3 id=&#34;가장-중요한-것은-꾸준히-하는-것이다&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#가장-중요한-것은-꾸준히-하는-것이다&#34;&gt;&lt;/a&gt; 가장 중요한 것은 꾸준히 하는 것이다&lt;/h3&gt;
&lt;p&gt;중국 고전인 &lt;code&gt;중용&lt;/code&gt; 은 성실함에 대한 이야기입니다. 학교의 옛 급훈처럼 느껴지는 고리타분해 보이는 &lt;code&gt;성실&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;뜨겁게 몰입하는 것도 좋지만, 지치지 않고 꾸준히 하는 것이 더욱 어려우면서도 중요합니다.&lt;br /&gt;
혼자 공부해도 되는데 애써 학원을 끊거나 스터디에 참여하는 이유중의 하나는 바로 간접적인 제약을 통해 &lt;code&gt;꾸준&lt;/code&gt;하게 하기 위함입니다.&lt;/p&gt;
&lt;h3 id=&#34;정답은-없다&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#정답은-없다&#34;&gt;&lt;/a&gt; 정답은 없다&lt;/h3&gt;
&lt;p&gt;링크글의 개발자분도 장/단기 목표를 세워보거나 뽀모도로, GTD, 간트차트 등등의 다양한 시행착오를 거쳤다는 이야기를 하십니다. 이 분도 이렇게 자리잡은 방법, 습관을 바꾸지 않고 똑.같.이. 반복하지는 않으실 겁니다.&lt;/p&gt;
&lt;p&gt;노자의 도덕경에 &lt;code&gt;도가도 비상도&lt;/code&gt; 라는 말이 나옵니다. 도라는 것이 고정되어 버리면 더 이상 도가 아니라고 합니다.&lt;br /&gt;
현재, 바로 이 순간에 가장 적합한 정답에 다가서려 끊임없이 노력하는 것입니다. 오늘 찾은 최고의 방법이 내일도, 다음 주에도 최선이라고 할 수 없습니다. 토요다의 칸반 시스템도 끊임없이 변화하는 것이라는 이야기가 있습니다. 어느 한 순간의 모습만을 베껴서는 결코 똑같은 성과를 이룰 수 없다는 것이지요.&lt;/p&gt;
&lt;p&gt;끊임없이 새로운 것을 받아들이고, 이를 수용하고, 배제하고, 개선시켜 나가야 합니다.&lt;/p&gt;
&lt;h2 id=&#34;배운-부분-적용해보고픈-부분&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#배운-부분-적용해보고픈-부분&#34;&gt;&lt;/a&gt; 배운 부분 / 적용해보고픈 부분&lt;/h2&gt;
&lt;p&gt;이 분의 주간 계획을 가져와 봅니다.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;주 4회 이상 운동을 한다.(1회 40분 이상)&lt;br /&gt;
주 5회 이상 책을 읽는다.(1회 25분 이상)&lt;br /&gt;
주 5회 이상 명상을 한다.(1회 20분 이상)&lt;br /&gt;
주 3회 이상 글쓰기를 한다. (1회 25분 이상)&lt;br /&gt;
주 4회 이상 개발을 한다. (1회 25분 이상)&lt;br /&gt;
주 2회 이상 음악을 한다. (1회 25분 이상)&lt;br /&gt;
주 2회 이상 피아노 연습을 한다. (1회 30분 이상)&lt;br /&gt;
하루 한 시간 이상 집중해서 라임이(딸)와 놀아준다(이게 제일 힘들다)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;항목을 나누고, 이를 정량적으로 표시하여 주간 계획을 세우는 부분이 인상적이었습니다. 마치 구글의 OKR 에서 KR(Key Result)처럼 정량적으로 측정을 합니다.&lt;/p&gt;
&lt;p&gt;하루에 2회 분량을 하더라도 1회로 계산합니다. 얼마나 많이 해내었는지가 아니라 얼마나 &lt;code&gt;꾸준&lt;/code&gt;히 했는지를 보겠다는 것입니다. 꾸준히 해나가기를 독려하려는 장치로 보였습니다.&lt;/p&gt;
&lt;p&gt;25분의 마법. 이미 뽀모도로, 구글 타이머를 이용하고 있습니다만 이 분이 강조한 25분의 마법이 인상적이었습니다. &lt;code&gt;25분만 하자!&lt;/code&gt; 는 동기부여, &lt;code&gt;25분만 투자하니깐 집중하자!&lt;/code&gt; 는 집중력 강화, &lt;code&gt;25분을 실행하자!&lt;/code&gt; 는 실천력 강화. 계획이나 준비에 과하게 투자하지 않고 바로 뛰어들게 합니다.&lt;/p&gt;
&lt;h2 id=&#34;스냅샷-현재의-나의-루틴&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#스냅샷-현재의-나의-루틴&#34;&gt;&lt;/a&gt; 스냅샷, 현재의 나의 루틴&lt;/h2&gt;
&lt;p&gt;제가 실천하고 있는 일정관리의 현재 시점의 스냅샷을 적어봅니다.&lt;br /&gt;
그리고, 여기에 더해 개선할 점을 적어보려 합니다.&lt;/p&gt;
&lt;h3 id=&#34;월간-주간-루틴&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#월간-주간-루틴&#34;&gt;&lt;/a&gt; 월간, 주간 루틴&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;매 주, 매 월 &lt;code&gt;실제&lt;/code&gt; 한 일과 &lt;code&gt;회고&lt;/code&gt; 그리고 다음 &lt;code&gt;계획&lt;/code&gt;을 잡습니다.&lt;/li&gt;
&lt;li&gt;잘한 점(Good)과 못한 점(Bad)을 적고, 지난 개선 목표를 회고하며, 개선할 부분과 그 실천방안을 고민해 봅니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;주중-루틴&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#주중-루틴&#34;&gt;&lt;/a&gt; 주중 루틴&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;아침 루틴
&lt;ul&gt;
&lt;li&gt;기상 후 명상 10분, 스트레칭 10분&lt;/li&gt;
&lt;li&gt;출근길 영화, 유튜브, 독서&lt;/li&gt;
&lt;li&gt;출근 전 회사앞 카페 독서&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;회사 저녁
&lt;ul&gt;
&lt;li&gt;주 3회 정도 업무외 1-2시간 정도, 퇴근 전 업무외 시간을 할당해둡니다.&lt;/li&gt;
&lt;li&gt;개발 관련 블로그, 유튜브 등을 보며 정리하고 실습합니다.&lt;/li&gt;
&lt;li&gt;개인적 공부도 합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;운동
&lt;ul&gt;
&lt;li&gt;애기 아빠로서 별도로 운동시간을 잡기가 힘듭니다.&lt;/li&gt;
&lt;li&gt;아침 기상후 스트레칭은 빼먹지 않으려 합니다.&lt;/li&gt;
&lt;li&gt;출, 퇴근길에 걷는 코스를 두고, 회사 업무 짬짬이 숨돌릴때는 빌딩 계단을 40층 오릅니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;퇴근 후 집
&lt;ul&gt;
&lt;li&gt;주 2회 이상은 아이들이 자기전에 집에 와서 아이들 얼굴도 보고 몸으로 놀아줍니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;주말-루틴&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#주말-루틴&#34;&gt;&lt;/a&gt; 주말 루틴&lt;/h3&gt;
&lt;p&gt;주말은 온전히 가족에 투자를 합니다. 주중에는 긴 출퇴근 시간으로 많이 보지 못하는 부분을 보충합니다. 주중의 생활과 거리를 두는 효과도 있습니다.&lt;/p&gt;
&lt;p&gt;가끔은 아이들에게 보여주려는 목적으로 30분 정도 독서를 하기도 합니다.&lt;/p&gt;
&lt;h2 id=&#34;링크글을-읽고-적용해보려는-부분&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#링크글을-읽고-적용해보려는-부분&#34;&gt;&lt;/a&gt; 링크글을 읽고 적용해보려는 부분&lt;/h2&gt;
&lt;p&gt;독서, 영화, 블로그, 개발공부, 육아, 운동 등등을 카테고리화 하고 매 주 계획과 그 실천을 &lt;code&gt;정량적으로 측정&lt;/code&gt; 해보려 합니다. 측정도구로 좋은게 뭐가 있을까 고민이 되네요.&lt;/p&gt;
&lt;h2 id=&#34;끝내며&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#끝내며&#34;&gt;&lt;/a&gt; 끝내며&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;중용&lt;/code&gt; 이라는 고전을 참 좋아합니다. 꾸준함만큼 아름다운 것이 없으나 공자님마저도 어렵다 하신게 꾸준함입니다.&lt;br /&gt;
이러한 꾸준함은 의지만으로 이룰 수는 없습니다. 꾸준함을 도와주는, 오늘의 나에게 맞는 최적의 방법을 끊임없이 찾아나가야 하겠습니다.&lt;/p&gt;
</content>
        <category term="Hyunseok Jeong" />
        <category term="습관" />
        <category term="중용" />
        <category term="꾸준함" />
        <category term="성실" />
        <updated>2020-09-14T09:45:06.000Z</updated>
    </entry>
    <entry>
        <id>https://deepbaksu.github.io/2020/09/10/writing-report-skill/</id>
        <title>보고서 작성의 기술 책 리뷰</title>
        <link rel="alternate" href="https://deepbaksu.github.io/2020/09/10/writing-report-skill/"/>
        <content type="html">&lt;h2 id=&#34;나는-pt고자였다-경영학개론&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#나는-pt고자였다-경영학개론&#34;&gt;&lt;/a&gt; 나는 PT고자였다 - 경영학개론&lt;/h2&gt;
&lt;p&gt;대학교 1학년 첫 경영학개론 시간. 당연히 긴장 반 설렘 반으로 가득한 시간이었다. 자기소개를 마치고 학교 소개와 교과목 소개가 얼추 끝났을 때 교수님은 알아서 팀을 구성하라고 하셨다. 처음엔 다들 수줍어 하더니, 잠시 후 조금씩 모이고 팀을 구성해나갔다. 그 중에서도 가장 높은 수요를 받는 사람은 &#39;PT 잘만드는 사람’이었다. 스타트업에서 개발자의 수요와 연봉이 높듯, 대학교 수업시간에서 가장 수요와 관심을 받는 사람은 &#39;PT 잘만드는 사람’이었다. 이들을 영입하기 위해서 ‘자료조사 열외’, &#39;팀회의 열외’를 내건 사례들도 왕왕 있었다. 디자인만 잘해주면 된다는 마인드였기 때문이다.&lt;/p&gt;
&lt;p&gt;일반적으로 공대생들보다는 경영대생이, 경영대생보다는 디자인학과생이 PT를 잘 만드는 경향이 있어 수요가 높은 편이었는데, 나는 전혀 아니었다. 애들끼리 얘기할 때 용어로 &#39;PT고자’였다. 깔끔하면서도 예쁘게 만드는 다른 친구들과 달리, 마치 초등학생이 스케치를 한 듯, 졸라맨을 그린듯 ppt디자인에 자신이 없었다. 그런 이유인지 몰라도 ppt를 복잡하게 구성하는 걸 싫어하는 편이었고 지금도 그렇다.&lt;/p&gt;
&lt;p&gt;가이 가와사키의 &lt;a href=&#34;https://guykawasaki.com/the_102030_rule/&#34;&gt;10/20/30룰&lt;/a&gt; 을 좋아하게 된 건 그의 주장이 마음에 들어서이기도 하지만, 내가 가진 이런 약점 때문이기도 하다.&lt;/p&gt;
&lt;p&gt;자료조사와 논리 세우기 그리고 PT내용을 어떻게 구성할건지, 시간과 노동이 많이 들어가는 핵심파트를 다 맡아도 마지막 PT제작을 해줄 사람이 없으니 답답할 때가 많았다. 하지만 그런 약점을 개선하려는 노력을 별로 하지 않았다. 이유는 내 약점이기 때문에 쳐다보기 싫었던거 같다.&lt;/p&gt;
&lt;h2 id=&#34;약점과-마주해야-할-시간&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#약점과-마주해야-할-시간&#34;&gt;&lt;/a&gt; 약점과 마주해야 할 시간&lt;/h2&gt;
&lt;p&gt;어느 날, xx의 데이터 분석 미니 프로젝트를 맡을 일이 있었다. 어찌저찌 분석을 했고 보고서를 작성해서 제출했는데, 다시 해오라는 대답을 들었다. 내가 봐도 심했긴 했다. 차트도 삐뚤삐뚤. 뭔가 일관성 있어보이지 않고 이건 비즈니스 보고서는 커녕 대학교 1학년 과제 제출 수준보다도 못했으니까.&lt;/p&gt;
&lt;p&gt;그런데 그 때도 템플릿을 인터넷에서 구해서 어찌저찌 넘어가는 수준으로 모면했다. 약점과 마주해야 할 시간이었지만 굳이 마주하고 싶지 않았다. 하지만 분석가로 일하겠다면서 PT작성을 못한다는 건 말이 안되는 일이었고 시간은 흘러 다시한번 오더가 떨어졌다.&lt;/p&gt;
&lt;p&gt;‘진영님 ~~~ 정리해서 보고해주세요.’&lt;/p&gt;
&lt;p&gt;그 때 이 책을 잡았다. 시간이 좀 걸리더라도 제대로 한 번 공부해봐야겠다고 생각했기 때문이다.&lt;br /&gt;
&lt;img src=&#34;/2020/09/10/writing-report-skill/book_img.jpg&#34; alt=&#34;책 표지&#34; /&gt;&lt;/p&gt;
&lt;p&gt;다른 PT책도 많은데 이 책을 본 이유는 첫째로 복잡한 디자인을 단시간에 배우는 건 힘들다고 생각했고 둘째로 컨설턴트들이 깔끔하면서도 가장 비즈니스적인 PT를 만드는 능력이 있기에 그걸 배우고 싶었기 때문이다.&lt;/p&gt;
&lt;p&gt;내가 배우고 싶은 건 비즈니스 PT 제작 능력이지, 눈이 띠용할 만큼 아름다운 디자인을 PT에 넣는 능력이 아니기 때문이다.&lt;/p&gt;
&lt;p&gt;이 책은 이런 요구사항을 충족시켜준 책이다.&lt;/p&gt;
&lt;p&gt;어쩌면 가장 기초 중 기초라고 할 수 있는 메뉴들부터 하나하나 차근차근 설명한다. 너무 당연하다고 생각할 수 있는데 의외로 있는지도 모르는 기능들이 많았다. 그리고 컨설팅을 하시는 분들은 그런 기능을 자주 활용한다고 하셔서 노하우를 배울 수 있었다.&lt;/p&gt;
&lt;p&gt;색깔 하나, 글꼴 하나, 줄 간격 하나에도 보는 사람이 어떻게 인식할지 고민한 흔적들이 녹아있었다. 그저 결과물만 봤을 땐 몰랐던 이야기였다. 사실 한빛미디어 홈페이지에 가보면 저자가 만들어놓은 템플릿을 무료로 제공하기 때문에 결과물 Templates만 보고 싶다면 이런 건 별로 보지않아도 된다. 아니 책을 별로 보지 않아도 상관없다. 홈페이지에 가서 템플릿을 다운로드하기만 하면 되니까.&lt;/p&gt;
&lt;p&gt;내가 집중한 건 &#39;어떤 이유’로 &#39;어떤 생각’으로 PT를 만들어 나가는지, 어떤 기능을 활용하는지. 그 과정이었다. 결과만 보는 건 인터넷 템플릿 다운받는 것 이상의 의미가 없으니까.&lt;/p&gt;
&lt;p&gt;아래 사진을 보자&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/10/writing-report-skill/fast_execution_tool.jpg&#34; alt=&#34;빠른실행도구&#34; /&gt;&lt;/p&gt;
&lt;p&gt;파워포인트의 메뉴 화면인데, 비슷하면서도 뭔가 추가된 느낌을 받을 것이다. &#39;빠른실행도구’라는 기능인데, 이미 안 사람도 있겠지만, 나는 이런 기능이 있는지 전혀 알지 못했다.&lt;/p&gt;
&lt;p&gt;메뉴에 이미 다 기능이 있는데 ‘왜’ 굳이 귀찮게 또 추가를 해야하는지 물어볼 수도 있을거 같다. 반갑다 동지! 나도 처음엔 그런 의문을 품었다.&lt;/p&gt;
&lt;p&gt;이 기능을 사용하는 이유는 3가지 이유가 있다. 다음 사진을 보자.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/10/writing-report-skill/after_close_general_menu.jpg&#34; alt=&#34;일반메뉴 축소 후 빠른실행도구만 남겨놓은 화면&#34; /&gt;&lt;/p&gt;
&lt;p&gt;뭔가 달라졌음을 당연히 느꼈을 것이다. 우리가 보는 일반(리본)메뉴를 축소시킨 뒤 빠른실행도구만 남겨놓았다.&lt;/p&gt;
&lt;p&gt;여기서 첫 번째 이유가 나오는데, 저자같은 컨설턴트는 작은 노트북 화면에 의존해서 PT 슬라이드를 만드는 경우가 많다고 한다. 저자의 경험에 따르면 화면이 작을 경우 오타를 찾기 힘들거나, 디자인에서 결함이 있는 부분을 찾기 힘들기 때문에 최대한 화면을 넓게 사용해야 높은 품질의 슬라이드를 만들 수 있다고 한다. 지금 내가 작업하고 있는 환경은 듀얼 모니터를 사용해서 작업을 하기에 당장은 적용되지 않는 이유지만, 만약 나도 저자처럼 노트북 화면 하나에 의존할 때가 오면 활용할 수밖에 없다고 생각했다.&lt;/p&gt;
&lt;p&gt;둘째로 위 사진에 보면 파란색 동그라미 표시를 해놓은 ‘맨 앞으로 가져오기’, &#39;맨 뒤로 보내기’와 같은 기능은 PT슬라이드를 만들거나 수정할 때 자주 사용하는 기능이라 하나하나 찾는 수고를 덜어야 소요시간을 줄이고 업무효율성을 높일 수 있다. 슬라이드를 만들어본 사람이라면 알텐데, 단순한 디자인의 간단한 슬라이드 제작이라고 하더라도 결과물이 단순한 거지, 제작시간이 짧은 건 아니다. 특히 다른 사람에게 보여주고 평가받아야 하는 슬라이드의 특성상 텍스트 상자, 도형, 줄 간격 할 것없이 섬세하게 다듬어야 하기 때문에 효율성을 높이는 건 필수라고 생각한다.&lt;/p&gt;
&lt;p&gt;마지막으로 빠른실행도구에 들어갈 기능을 자기에 맞게 한번 설정한 뒤 설정파일을 저장해놓으면 다른 컴퓨터를 사용하더라도 설정파일을 불러와서 똑같은 빠른실행도구를 사용할 수 있다. 프로그래밍으로 치면 자기만의 라이브러리, 함수를 저장해놓는 것과 비슷하다.&lt;/p&gt;
&lt;p&gt;어떤가? 단순히 빠른실행도구라는 결과물만 보면 배울 점은 보이지 않던게 보이기 시작하지 않는가?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;바퀴를 재발명하지 마라&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;유명한 프로그래밍 격언이다. 이 책의 장점 중 하나는 책에서 나온 템플릿(실습하지 않은 템플릿 포함)을 무료로 제공한다는 점이다. 프로그래밍에서 라이브러리를 import해서 사용하듯, 좋은 템플릿이 있다면 굳이 또다시 새로 만드는 시간 낭비할 이유는 없다. 공부한 걸 바탕으로 각 상황에 맞게 필요한 템플릿에서 복사 + 붙여넣기 하면 될 일이다.&lt;/p&gt;
&lt;p&gt;다만 이 책에선 몇 가지 단점이 있기 때문에 그 점에 유의해야 한다.&lt;/p&gt;
&lt;p&gt;비즈니스 보고서에서 가장 핵심적으로 다루는 누적막대그래프에 대한 실습 데이터를 모든 실습에 제공하지는 않는다. 또한, 실습에서 다루는 선그래프에 대해서도 템플릿을 제공하지 않는다. 이 점이 무척 아쉬웠다. 이럴 때 thinkcell이란 사용하면 PT에서 누적막대그래프를 그리거나 다른 시각화를 할 때 매우 편리한데, 이건 유료프로그램이라 보통 컨설팅을 하시는 분들 위주로 사용한다고 알고 있다. 차선책으로는 태블로나 Power BI 같은 BI툴을 활용해서 그래프를 작성한 뒤 슬라이드에 넣는 방법이 있을 것 같다.&lt;/p&gt;
&lt;p&gt;그리고 보고서 템플릿 제공파일을 살펴보니 다음 사진의 왼쪽 사진처럼 어떤 내용인지 설명을 넣지 않았다. 나중에 활용을 위해선 해당 템플릿이 어떤 템플릿인지 알아야 상황에 맞게 즉각적으로 사용할 수 있기 때문에 직접 일일이 다 이름을 수정해야했다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/10/writing-report-skill/unordered_ordered.jpg&#34; alt=&#34;보고서템플릿(수정전vs수정후)&#34; /&gt;&lt;/p&gt;
&lt;p&gt;조금 더 독자 지향적으로 자료를 제공했다면 어땠을까 하는 아쉬움이 있다. 그래도 이 책 덕에 데이터 분석을 한 뒤에 어떻게 커뮤니케이션 해야 하는지, 색채 하나, 명도 하나에도 사람들의 인식이 많이 바뀔 수 있음을 배웠다. 특히나 경험이 많은 시니어에게 과외를 받듯 배울 수 있어서 즐거운 독서였다. 데이터 분석을 하는 사람이든 아니면 일반 직장인이든 대학생이든 일독을 권하고 싶다.&lt;/p&gt;
</content>
        <category term="Jinyoung Song" />
        <category term="ppt" />
        <category term="발표" />
        <category term="consulting" />
        <category term="보고서" />
        <category term="파워포인트" />
        <category term="PT고자" />
        <category term="ppt고자" />
        <category term="ppt공포" />
        <category term="슬라이드" />
        <updated>2020-09-10T14:29:38.000Z</updated>
    </entry>
    <entry>
        <id>https://deepbaksu.github.io/2020/09/06/free-web-server-for-your-portfolio/</id>
        <title>무료로 개인 프로젝트 호스팅 하기</title>
        <link rel="alternate" href="https://deepbaksu.github.io/2020/09/06/free-web-server-for-your-portfolio/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/2020/09/06/free-web-server-for-your-portfolio/heroku_projects.jpg&#34; alt=&#34;Heroku 에서 무로료 호스팅 중인 프로젝트들&#34; /&gt;&lt;/p&gt;
&lt;p&gt;많은 기업에서 채용을 위한 조건으로 포트폴리오를 내걸고 있습니다. 그래서 보통 열심히 코딩을 하며 개인 프로젝트를 수행합니다. 그런데 포트폴리오 소스코드를 만들었다 해도, 다른 분들에게 보여줄 수 없다면 큰 의미가 없을겁니다. 그래서 호스팅을 해야 하는데, 서버가 24시간 돌아가야하는 호스팅의 특성상 무료가 아닌 경우가 많습니다.&lt;/p&gt;
&lt;p&gt;개인프로젝트들을 무료로 호스팅할 수 있는 방법들을 무엇이 있을까요? 예를 들어 24시간 상주해있어야 되는 봇도 무료로 배포할 수 있습니다. 예를 들어 저희 딥백수 커뮤니티에서는 여러 봇들이 상주하고 있는데 소수를 제외하면 전부 무료로 운영하고 있습니다. 또한, 개인 프로젝트들 또한 무료로 전부 데모를 호스팅하거나 공식문서를 무료로 호스팅하고 있습니다.&lt;/p&gt;
&lt;p&gt;이 글에서 프로젝트들은 다음과 같이 분류하고 있습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CSS, HTML, JS 로만 이루어진 프론트엔드&lt;/li&gt;
&lt;li&gt;일정한 스케쥴에 따라 작동하는 크론잡&lt;/li&gt;
&lt;li&gt;백엔드 서비스가 필요한 경우&lt;/li&gt;
&lt;li&gt;데이터 저장이 필요한 경우&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;한가지 범위에만 속하지 않을 수 도 있습니다. 예를 들어 백엔드 서비스가 필요하면서 데이터 저장이 필요한 경우는 꽤 자주 있는 경우입니다. 또한 당연히 프로젝트가 어느정도 규모로 커지게 되면 무료로는 한계가 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;프론트엔드&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#프론트엔드&#34;&gt;&lt;/a&gt; 프론트엔드&lt;/h2&gt;
&lt;p&gt;배포하고자 하는 프로젝트가 전부 스태틱 파일이라면 이런 경우에 속합니다. 이런 경우 &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; 를 통해서 배포해주는게 제일 간편합니다. 예를 들어 현재 이 블로그는 &lt;a href=&#34;https://github.com/deepbaksu/deepbaksu.github.io/tree/master&#34;&gt;https://github.com/deepbaksu/deepbaksu.github.io/tree/master&lt;/a&gt; 에서 GitHub pages 로 호스팅 되고 있습니다.&lt;/p&gt;
&lt;p&gt;예를 들어 오픈소스로 라이브러리를 만든다면 라이브러리에 대한 문서를 GitHub Pages 를 통해 배포하는 것이 일반적입니다.&lt;/p&gt;
&lt;p&gt;혹은 &lt;a href=&#34;https://www.netlify.com/&#34;&gt;Netlify&lt;/a&gt; 를 이용하는 방법도 있습니다. 하지만 Netlify 는 단순히 스태틱 파일을 호스팅하는 용도로는 Overkill 에 가깝습니다. Bandwidth 제한도 존재하구요.&lt;/p&gt;
&lt;p&gt;어떤걸 사용하던지 GitHub Actions 같은 CI 도구를 이용해 자동으로 배포가 되도록 하면 항상 최신 버전의 데모를 보여줄 수 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;일정한-스케쥴에-따라-작동하는-크론잡&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#일정한-스케쥴에-따라-작동하는-크론잡&#34;&gt;&lt;/a&gt; 일정한 스케쥴에 따라 작동하는 크론잡&lt;/h2&gt;
&lt;p&gt;딥백수에서는 매 1시간마다 슬랙 내용을 엘라스틱서치로 백업하는 봇이 상주하고 있습니다. 이런 식으로 매일 1시에 이메일을 보내야 한다던지 혹은 메시지를 보내야 하는 경우 &lt;a href=&#34;https://docs.github.com/en/actions&#34;&gt;GitHub Action&lt;/a&gt; 을 이용하면 가능합니다.&lt;/p&gt;
&lt;p&gt;아래 예시는 딥백수 슬랙 메시지를 백업하는 스케쥴 작업으로 마지막으로 백업한 메시지의 timestamp.txt 를 깃헙리포에 저장해놓고&lt;br /&gt;
다음번 작업에서 그 시간부터 현재시간까지의 메시지를 슬랙으로부터 가져와 엘라스틱서치로 보내는 예시입니다.&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;name:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;Fetch&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;slack&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;messages&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;push.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;on:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;schedule:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# every hour.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;cron:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;0 * * * *&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;repository_dispatch:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;types:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;manual-trigger&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# A workflow run is made up of one or more jobs that can run sequentially or in parallel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;jobs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;# This workflow contains a single job called &amp;quot;build&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;build:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# The type of runner that the job will run on&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;runs-on:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;ubuntu-latest&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# Steps represent a sequence of tasks that will be executed as part of the job&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;steps:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;# Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;uses:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;actions/checkout@v2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;name:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;Prepare&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;credentials.json&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;env:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;attr&#34;&gt;PASSPHRASE:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;$&amp;#123;&amp;#123;&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;secrets.GPG_PASSPHRASE&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#125;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;run:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;          gpg --quiet --batch --yes --decrypt --passphrase=$PASSPHRASE --output credentials.json credentials.json.gpg&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;name:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;Prepare&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;token.json&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;env:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;attr&#34;&gt;PASSPHRASE:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;$&amp;#123;&amp;#123;&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;secrets.GPG_PASSPHRASE&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#125;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;run:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;          gpg --quiet --batch --yes --decrypt --passphrase=$PASSPHRASE --output token.json token.json.gpg&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;name:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;Run&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;script&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;env:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;attr&#34;&gt;SLACK_TOKEN:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;$&amp;#123;&amp;#123;&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;secrets.SLACK_TOKEN&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#125;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;attr&#34;&gt;SHEET_ID:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;$&amp;#123;&amp;#123;&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;secrets.SHEET_ID&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#125;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;attr&#34;&gt;LB_IP:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;$&amp;#123;&amp;#123;&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;secrets.LB_IP&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#125;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;attr&#34;&gt;ES_USERNAME:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;$&amp;#123;&amp;#123;&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;secrets.ES_USERNAME&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#125;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;attr&#34;&gt;ES_PASSWORD:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;$&amp;#123;&amp;#123;&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;secrets.ES_PASSWORD&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#125;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;run:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;make&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;run_prod&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;put_data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;name:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;Commit&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;last_timestamp.txt&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;run:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;          git config --global user.name &amp;#x27;GitHub Action&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;          git config --global user.email &amp;#x27;kkweon@gmail.com&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;          git commit -am &amp;#x27;Update last_timestamp.txt&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;          git push&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;백엔드-서비스가-필요한-경우&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#백엔드-서비스가-필요한-경우&#34;&gt;&lt;/a&gt; 백엔드 서비스가 필요한 경우&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/2020/08/17/slack-bot/timebot_demo.png&#34; alt=&#34;미국/한국 시간을 변환해주는 서비스&#34; /&gt;&lt;/p&gt;
&lt;p&gt;저희 딥백수에서는 한국 시간이 메시지로 올라오면 자동으로 미국 시간으로 변환해주는 봇이 존재합니다. 이런 경우 서버에서 메시지를 받을 수 있어야 하기 때문에 앞에 나온 방법으로는 불가능합니다.&lt;/p&gt;
&lt;p&gt;AWS와 구글클라우드의 무료티어도 방법이지만 매우 간편한 &lt;a href=&#34;https://en.wikipedia.org/wiki/Platform_as_a_service&#34;&gt;PaaS&lt;/a&gt; 인 &lt;a href=&#34;https://www.heroku.com/&#34;&gt;Heroku&lt;/a&gt; 를 추천합니다. Docker도 지원하고 GitHub 에서 자동으로 배포되도록 연동도 쉽게 가능합니다.&lt;/p&gt;
&lt;p&gt;또 주로 사용하는 다른 방법은 AWS Lambda 를 사용하는 방법도 있습니다. 어느정도 관대한 정책 덕분에 또 트래픽이 많지 않은 개인 프로젝트 같은 경우 서버리스가 최적이라고 할 수 있습니다. 대신 단점은 서버리스 프레임워크/라이브러리를 사용해야 된다는 점이 있으나 큰 문제는 아닙니다.&lt;/p&gt;
&lt;h2 id=&#34;데이터-저장이-필요한-경우&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#데이터-저장이-필요한-경우&#34;&gt;&lt;/a&gt; 데이터 저장이 필요한 경우&lt;/h2&gt;
&lt;p&gt;서비스보다는 말그대로 데이터베이스만 필요한 경우, 3가지 정도로 나눠서 작업하고 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;위에서 나온 가장 마지막 메시지의 시간을 저장하는 등의 어플리케이션 상태를 저장하는 경우&lt;/li&gt;
&lt;li&gt;데이터베이스가 필요하다기보다 그냥 기록으로 저장해두는 공간이 필요한 경우&lt;/li&gt;
&lt;li&gt;데이터베이스가 필요한 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;어플리케이션-상태를-저장하는-경우&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#어플리케이션-상태를-저장하는-경우&#34;&gt;&lt;/a&gt; 어플리케이션 상태를 저장하는 경우&lt;/h3&gt;
&lt;p&gt;저희는 이런 경우 GitHub Repo 에 체크인하는 식으로 코드를 사용합니다. 말그대로 커밋하고 푸시하는 식으로 작성합니다. 특히 상태가 있는 크론잡의 경우 GitHub Action 을 통해 매우 자주 사용되는 경우입니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/06/free-web-server-for-your-portfolio/application_state_in_repo.jpg&#34; alt=&#34;Application 상태를 GitHub Repo 에 저장해두는 경우&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;단순하기-기록을-저장할-필요가-있는-경우&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#단순하기-기록을-저장할-필요가-있는-경우&#34;&gt;&lt;/a&gt; 단순하기 기록을 저장할 필요가 있는 경우&lt;/h3&gt;
&lt;p&gt;예를 들어 메시지를 단순히 저장하고 싶은 경우 구글 스프레드시트 API 를 사용해 구글 스프레드시트를 일종의 데이터베이스로 사용할 수 있습니다. 뜨 구글 스프레드시트 앱 내부에서 크론잡 또한 가능함으로 모니터링 시스템을 구축할 수 도 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/06/free-web-server-for-your-portfolio/spreadsheet_as_database.jpg&#34; alt=&#34;구글 스프레드시트를 통해 슬랙 메시지를 백업&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;데이터베이스가-필요한-경우&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#데이터베이스가-필요한-경우&#34;&gt;&lt;/a&gt; 데이터베이스가 필요한 경우&lt;/h3&gt;
&lt;p&gt;만약 데이터베이스가 필요하다면 2가지 방법을 사용하고 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;파이어베이스를 사용하거나&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://elements.heroku.com/addons&#34;&gt;Heroku Add-ons&lt;/a&gt; 을 사용하거나&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mongodb.com/cloud/atlas&#34;&gt;MongoDB Atlas&lt;/a&gt; 를 사용합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;파이어베이스는 쉽고 간편한 대신 벤더락인(Vendor Lock-In)&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn1&#34; id=&#34;fnref1&#34;&gt;[1]&lt;/a&gt;&lt;/sup&gt; 이 된다는 단점이 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/06/free-web-server-for-your-portfolio/firebase_pricing.jpg&#34; alt=&#34;Firebase 가격 정보&#34; /&gt;&lt;/p&gt;
&lt;p&gt;두번째는 Heroku Add-ons 을 사용하는 방법입니다. Redis, Postgres, MySQL 등등 필요한 서비스를 찾을 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/06/free-web-server-for-your-portfolio/heroku_addons.jpg&#34; alt=&#34;Heroku Addons. Redis, Postgres, MySQL 등을 찾을 수 있다&#34; /&gt;&lt;/p&gt;
&lt;p&gt;세번째는 MongoDB Atlas 도 원래 mLab 을 통해서 Heroku Addons에서 존재했었는데 Heroku Addons 으로서 결별하여 지금은 MongoDB Atlas 플랫폼을 통해서 사용해야 됩니다. 대신에 512MB 까지 무료로 사용 가능하고 관대한 편이라 거의 자주 사용하고 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/06/free-web-server-for-your-portfolio/mongodb_atlas_pricing.jpg&#34; alt=&#34;MongoDB Atlas 가격&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;마무리&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#마무리&#34;&gt;&lt;/a&gt; 마무리&lt;/h2&gt;
&lt;p&gt;무료 서비스 이외에도 사용가능한 방법으로는 라즈베리파이를 이용하는 방법도 있습니다. 라즈베리파이4는 메모리가 8GB 까지 존재하며 아이피주소는 공유기에 존재하는 &lt;a href=&#34;https://en.wikipedia.org/wiki/Dynamic_DNS&#34;&gt;Dynamic DNS&lt;/a&gt; 를 사용하면 됩니다. 실제로 저는 라즈베리파이에 k3s 을 이용해 쿠버네티스를 이용한 서비스들도 사용하고 있습니다. 좀더 스케일이 필요한 경우에는 저렴한 Digital Ocean 을 주로 사용합니다.&lt;/p&gt;
&lt;p&gt;더 자세히 알고 싶으신 분은 &lt;a href=&#34;https://bit.ly/2Sqdnws&#34;&gt;딥백수 슬랙&lt;/a&gt; 에서 뵈요 😄&lt;/p&gt;
&lt;hr class=&#34;footnotes-sep&#34; /&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;ol class=&#34;footnotes-list&#34;&gt;
&lt;li id=&#34;fn1&#34; class=&#34;footnote-item&#34;&gt;&lt;p&gt;벤더락인이란 특정 플랫폼 벤더에 종속성이 생기는 현상입니다. &lt;a href=&#34;#fnref1&#34; class=&#34;footnote-backref&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
        <category term="Mo Kweon" />
        <category term="free web server" />
        <category term="heroku" />
        <category term="aws" />
        <category term="gcp" />
        <category term="netlify" />
        <category term="github actions" />
        <updated>2020-09-06T11:23:04.000Z</updated>
    </entry>
    <entry>
        <id>https://deepbaksu.github.io/2020/09/04/python-data-analysis-technique/</id>
        <title>제대로 된 실무서적 - 파이썬 데이터분석 실무 테크닉 100</title>
        <link rel="alternate" href="https://deepbaksu.github.io/2020/09/04/python-data-analysis-technique/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/2020/09/04/python-data-analysis-technique/python_da.PNG&#34; alt=&#34;책 표지&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;사전-공지-내돈내산&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#사전-공지-내돈내산&#34;&gt;&lt;/a&gt; 사전 공지 : 내돈내산&lt;/h2&gt;
&lt;p&gt;실력은 그리 좋지 못한데, 책 읽는 건(정확히 말하면 책을 사고 책장에 장식하는 건) 좋아하기에 출판사로부터 책 선물을 받기도 하고, 서평단 활동을 하기도 한다. 그렇지만 이 책은 분명 내가 돈을 내고 내가 직접 구매한 내돈내산 책이다. 그렇기에 책에 대해서 칭찬을 하든 비판을 하든 전혀 광고가 아님을 밝힌다.&lt;/p&gt;
&lt;h2 id=&#34;누구나-그럴듯한-계획이-있다-데이터-분석&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#누구나-그럴듯한-계획이-있다-데이터-분석&#34;&gt;&lt;/a&gt; 누구나 그럴듯한 계획이 있다 - 데이터 분석&lt;/h2&gt;
&lt;p&gt;타이슨이 강조한 말이다. 두들겨 맞기 전까진 다들 자기의 능력을 발휘해 데이터분석을 어떻게 어떻게 처리하고 인정을 받을거란 환상을 품는다. 나 또한 그랬다. 실무에 가기 전까진. 이 책을 만나기 전까진.&lt;/p&gt;
&lt;p&gt;데이터분석이라고 하면 보통 크롤링 하고 전처리 조금 한 뒤에 스케일링을 좀 해주고 머신러닝 라이브러리를 사용해서 회귀나 예측만 잘하면 되는거라고 생각하기 쉬운데 그렇지가 않다. 전처리란 것도 우리가 생각한 거 이상으로 다양한 종류가 있을 수 있고, 단순히 회귀나 분류, 예측을 해야 하는 게 아니라 소셜 네트워크 분석을 하거나 자연어처리를 해야 할 수도 있다.&lt;/p&gt;
&lt;p&gt;특히나 이 책에선 일반적인 데이터분석 서적에서 잘 다루지 않는 최적화와 시뮬레이션까지 다루고 있다. 일반적으로 데이터분석 커리큘럼에서 자신감을 얻고 뭔가 자만감까지 빠지고 있는 사람이라면 이 책을 통해 그 자만감을 없애고 다시 겸손해질 필요가 있다.&lt;/p&gt;
&lt;p&gt;책 앞부분은 일반적으로 많이 접해본 비즈니스 데이터 전처리 및 에측 분석인데다 저자가 하나하나 마치 꼭꼭 씹은뒤 먹여주기 때문에 &#39;너무 쉬운거 아니야?&#39;라고 착각할 수 있다. 하지만 물류 최적경로 파악을 위한 소셜 네트워크 분석, 물류 네트워크 최적화, 시뮬레이션을 통한 소비자 행동 예측 부분 (각각 6, 7, 8장)으로 가면 익숙하지도 않은데다 저자의 설명 또한 많이 빈약하므로 멘붕에 빠질 수 있다. (나만 그런가?)&lt;/p&gt;
&lt;h2 id=&#34;정량분석-그리고-감각&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#정량분석-그리고-감각&#34;&gt;&lt;/a&gt; 정량분석 그리고 ‘감각’&lt;/h2&gt;
&lt;p&gt;그럼에도 이 책이 좋은 책이라고 생각하는 건 tool설명에 약간 치우친 책들과 달리 &#39;감각’을 길러줄 수 있는 책이기 때문이다.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;이번 케이스처럼 반년 정도의 데이터라면 별로 영향이 없겠지만, 과거 수년의 데이터에는 여러가지 비즈니스 모델이 포함되어 있을 수 있기 때문에 전체 데이터를 한 번에 분석하면 데이터의 시계열 변화를 잘못 파악하는 경우가 있습니다. 그런 경우에는 데이터 범위를 좁혀서 분석하는 것도 하나의 방법입니다.&lt;/p&gt;
&lt;p&gt;파이썬 데이터 분석 실무 테크닉 100 19p&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;end_date(회원 기간이 만료된 날짜)컬럼에 결측이 있는 이유는 탈퇴하지 않은 회원의 경우 탈퇴일이 없기 때문에, 컬럼에 NULL값을 넣었을 것이기 때문이라고 추측할 수 있습니다.&lt;/p&gt;
&lt;p&gt;파이썬 데이터 분석 실무 테크닉 100 64p&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이미 어느정도 실무에서 굴러보신 분이라면 &#39;너무 당연한 소리아니냐’할 수 있겠지만, 시계열 분석만 공부하고 막 실무에 투입된 사람, 머신러닝 라이브러리를 통해 머신러닝이 무엇인지 어떻게 회귀와 분류 문제를 푸는지 방법만 이해한 사람에게는 이런 조언들이 단순한 Tool설명보다 더 좋은 영양제가 될거라 생각한다.&lt;/p&gt;
&lt;p&gt;정량적으로 데이터를 분석해야하는 분석가에게도 &#39;감각’이 중요한 이유를 생각하다보니 장자의 양생주편이 생각이 났다.&lt;/p&gt;
&lt;p&gt;포정이라는 사람이 문혜군(文惠君)을 위해 소를 잡았다. 그런데 그 포정의 칼을 움직이는 동작이 신기에 가까웠다. 이를 본 문혜군은 어떻게 그런 경지에 이를 수 있냐고 물었다.&lt;/p&gt;
&lt;p&gt;포정은 도(道)를 얘기하며 자신의 철학을 설명해주었는데 그 중 백미는 다음의 문장이다.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;평범한 보통 소잡이는 달마다 칼을 바꾸는데, 이는 무리하게 뼈를 가르기 때문입니다. 그렇지만 제 칼은 19년이나 되어 수천 마리의 소를 잡았지만 칼날은 방금 숫돌에 간 것과 같습니다. 저 뼈마디에는 틈새가 있고 칼날에는 두께가 없습니다. 두께 없는 것을 틈새에 넣으니, 널찍하여 칼날을 움직이는 데도 여유가 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;잘 모르는 분석가는 툴만 이해했기 때문에 데이터의 의미를 이해하지 못한 채 이리저리 쑤셔놓기만 하지만(== 지금 내 상태), 좋은 분석가는 툴은 물론 데이터의 의미와 프로세스와 설득방법 같이 프로젝트의 전반적인 흐름을 정확히 이해하기 때문에 힘을 빼더라도 더 좋은 분석을 해낸다고 생각을 했다.&lt;/p&gt;
&lt;p&gt;무튼 이제 막 데이터 분석 실무를 다루셔야 할 분이라면 실무 들어가기전에 한 번쯤 실습해보고 가시면 좋을듯 하다. 같이 멘붕에 빠지시면 더욱 좋을거고.&lt;/p&gt;
</content>
        <category term="Jinyoung Song" />
        <category term="데이터분석" />
        <category term="파이썬" />
        <category term="실무" />
        <category term="데이터분석 실무" />
        <category term="네트워크 분석" />
        <category term="최적화" />
        <category term="시뮬레이션" />
        <category term="자연어처리" />
        <category term="회귀" />
        <category term="예측 분석" />
        <updated>2020-09-04T06:14:42.000Z</updated>
    </entry>
    <entry>
        <id>https://deepbaksu.github.io/2020/09/01/20200902-A-Quick-Tutorial-on-Ray/</id>
        <title>(번역) Modern Parallel and Distributed Python-A Quick Tutorial on Ray</title>
        <link rel="alternate" href="https://deepbaksu.github.io/2020/09/01/20200902-A-Quick-Tutorial-on-Ray/"/>
        <content type="html">&lt;p&gt;이번 포스팅은 Ray에 대해서 소개합니다.&lt;/p&gt;
&lt;p&gt;먼저 이 포스팅은 &lt;a href=&#34;https://github.com/robertnishihara&#34;&gt;Robert Nishihara&lt;/a&gt;의 허락을 받아, &lt;a href=&#34;https://towardsdatascience.com/modern-parallel-and-distributed-python-a-quick-tutorial-on-ray-99f8d70369b8&#34;&gt;Modern Parallel and Distributed Python: A Quick Tutorial on Ray&lt;/a&gt;을 번역한 글임을 밝힙니다.&lt;/p&gt;
&lt;h2 id=&#34;what-is-ray&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#what-is-ray&#34;&gt;&lt;/a&gt; What is &lt;a href=&#34;https://github.com/ray-project/ray&#34;&gt;Ray&lt;/a&gt;?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ray-project/ray&#34;&gt;Ray&lt;/a&gt;는 파이썬에서 병렬, 분산 프로그래밍을 위한 오픈소스 프로젝트입니다.&lt;/p&gt;
&lt;p&gt;병렬, 분산 컴퓨팅은 현대 애플리케이션을 구성하는 요소 중 하나로 자리잡았습니다. 우리는 필요에 따라 멀티코어나 여러 대의 머신의 리소스를 최대한 활용해서 애플리케이션을 가속해야할 필요가 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;웹 사이트를 크롤링하거나 사용자 질의에 응답하는 소프트웨어들은 누군가의 노트북에서 돌아가는 single thread기반의 프로그램이 아니고, 서로 통신하고 상호작용하는 서비스 집합이라고 볼 수 있습니다&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;cloud.jpeg&#34; alt=&#34;Cloud Computing&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(클라우드 컴퓨팅은 메모리, 연산, 스토리지 등 다방면으로 끊임없는 확장성을 제공하고있습니다. 클라우드가 제공하는 이러한 이점에 적절하게 대응하기 위해서는 분산 어플리케이션을 만들 수 있는 새로운 도구가 필요합니다)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이번 포스팅은 Ray를 사용해서 병렬,분산 어플리케이션을 만드는 방법에 대해서 설명합니다.&lt;/p&gt;
&lt;h2 id=&#34;why-ray&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#why-ray&#34;&gt;&lt;/a&gt; Why Ray?&lt;/h2&gt;
&lt;p&gt;많은 튜토리얼들이 &lt;a href=&#34;https://docs.python.org/3/library/multiprocessing.html&#34;&gt;Python의 multiprocessing 모듈&lt;/a&gt;을 어떻게 사용하는지 설명합니다.&lt;/p&gt;
&lt;p&gt;하지만 Python의 multiprocessing 모듈은 한계점을 가지고 있어 현대 애플리케이션이 요구하는 분산, 병렬에 대한 필수사항을 충족하지 못합니다.&lt;/p&gt;
&lt;p&gt;현대 애플리케이션이 요구하는 분산, 병렬처리에 대한 필수사항은 다음과 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;같은 코드를 한대 이상의 머신(machine)에서 작동시켜야함&lt;/li&gt;
&lt;li&gt;state를 가지고, 통신이 가능한 &lt;a href=&#34;https://en.wikipedia.org/wiki/Actor_model&#34;&gt;actor&lt;/a&gt;와 &lt;a href=&#34;https://en.wikipedia.org/wiki/Microservices&#34;&gt;microservice&lt;/a&gt;를 만들 수 있어야함&lt;/li&gt;
&lt;li&gt;machine failures를 깔끔하게 다룰 수 있어야함&lt;/li&gt;
&lt;li&gt;대규모 객체와 수치 데이터를 효율적으로 다룰 수 있어야함&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ray-project/ray&#34;&gt;Ray&lt;/a&gt;는 위에서 언급한 요구사항을 모두 충족합니다. 또한 간단한 작업을 단순하게 만들며, 복잡한 동작을 하게끔 프로그래밍하는 것 또한 가능합니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;ray.png&#34; alt=&#34;Ray&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;다른 회사들이 자신들의 Python 프로덕션을 확장하기 위해서 Ray를 어떻게 활용하고있는지 배우고싶다면, &lt;a href=&#34;https://events.linuxfoundation.org/ray-summit/?utm_source=robert&amp;amp;utm_medium=blog&amp;amp;utm_campaign=ray_summit#featuredspeakers&#34;&gt;Ray Summit&lt;/a&gt;에 등록하세요!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;ray_summit.png&#34; alt=&#34;Ray Summit&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;necessary-concepts&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#necessary-concepts&#34;&gt;&lt;/a&gt; Necessary Concepts&lt;/h2&gt;
&lt;p&gt;전통적으로 프로그래밍은 &lt;strong&gt;1). 함수(Functions)&lt;/strong&gt; , &lt;strong&gt;2).클래스(Classes)&lt;/strong&gt; 라는 핵심 개념에 의존합니다. 생각해보면 우리는 함수와 클래스만으로 많은 애플리케이션들을 만들어왔습니다.&lt;/p&gt;
&lt;p&gt;하지만, 함수와 클래스로 구성된 애플리케이션을 분산 환경으로 마이그레이션하려고하면 함수, 클래스라는 개념을 사용할 수 없게됩니다.&lt;/p&gt;
&lt;p&gt;따라서 현재까지 알려진 병렬, 분산 도구를 활용해서 싱글 스레드 애플리케이션을 병렬, 분산 애플리케이션으로 마이그레이션을 하기 위해서는 애플리케이션 코드를 처음부터 다시 작성해야합니다.&lt;/p&gt;
&lt;p&gt;현재까지 알려진 병렬, 분산도구는 저수준에서 고수준까지 다양한 도구들이 있습니다.&lt;/p&gt;
&lt;p&gt;먼저 저수준 도구로는 메세지의 송수신을 저수준의 프리미티브로 제공하는 &lt;a href=&#34;https://www.open-mpi.org/&#34;&gt;OpenMPI&lt;/a&gt;, &lt;a href=&#34;https://docs.python.org/3/library/multiprocessing.html&#34;&gt;Python Multiprocessing&lt;/a&gt;, &lt;a href=&#34;https://zeromq.org/&#34;&gt;ZeroMQ&lt;/a&gt;이 있습니다. 이 도구들은 분산, 병렬 환경을 위한 강력한 기능들을 제공합니다. 하지만, 전통적인 프로그래밍과는 다른 추상화 개념을 사용합니다. 이로 인해 위 도구들을 활용해서 기존의 싱글 스레드 애플리케이션을 분산, 병렬 어플리케이션으로 마이그레이션하기 위해서는 코드 전체를 재작성해야합니다.&lt;/p&gt;
&lt;p&gt;또 다른 예로 도메인에 특화되어 고수준의 추상화를 제공하는 도구들이 있습니다. 딥러닝 모델을 학습하기 위한 &lt;a href=&#34;https://www.tensorflow.org/&#34;&gt;TensorFlow&lt;/a&gt;, 데이터와 SQL 처리를 위한 &lt;a href=&#34;https://spark.apache.org/&#34;&gt;Spark&lt;/a&gt;, 스트림 처리를 위한 &lt;a href=&#34;https://flink.apache.org/&#34;&gt;Flink&lt;/a&gt;가 대표적입니다. 이 도구들은 neural network나 데이터셋, 스트림에 대한 고수준의 추상화 API를 제공합니다. 하지만, 고수준 추상화를 제공하는 도구들 역시 &lt;strong&gt;직렬화된 프로그래밍(serial programming)&lt;/strong&gt; 에서 사용하는 추상화와 다르기 때문에, 애플리케이션 코드 전체를 그에 맞게 재작성해줘야하는 단점이 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;distributed_computing_tools.jpeg&#34; alt=&#34;Distributed computing tools&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(분산 컴퓨팅을 위한 도구들. 왼쪽은 저수준의 추상화 API를 지원하는 도구, 오른쪽은 고수준의 추상화 API를 제공하는 도구)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ray는 위에서 설명한 도구들과 같은 고수준, 저수준이 아닌 중간수준에 위치합니다. Ray는 함수와 클래스를 task, actor라고 불리는 분산환경에 적합한 형태로 변환하며, 이를 통해 병렬, 분산 컴퓨팅을 지원하는 메커니즘을 가지고 있습니다. 따라서 사용자들은 이전과 다르게 코드를 재작성 없이 기존의 함수와 클래스 구조를 유지하면서 분산, 병렬 프로그래밍을 할 수 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;starting-ray&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#starting-ray&#34;&gt;&lt;/a&gt; Starting Ray&lt;/h2&gt;
&lt;p&gt;Ray의 &lt;code&gt;ray.init()&lt;/code&gt;명령어는 Ray에서 사용하는 프로세스들을 모두 구동합니다.&lt;/p&gt;
&lt;p&gt;만약 클러스터 환경을 이용해서 분산 컴퓨팅을 하고자 한다면, 클러스터의 주소(address)를 입력하는 코드 라인 하나만 변경하면 됩니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ray.init()&lt;/code&gt;명령어로 구동되는 Ray의 프로세스들은 아래와 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Worker&lt;/strong&gt; : 파이썬의 함수를 병렬적으로 실행할 프로세스(대략 하나의 worker는 하나의 CPU 코어를 의미합니다).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scheduler&lt;/strong&gt; : task들을 worker 혹은 다른 머신에 할당하기 위한 스켸쥴러(task란 Ray에 사용되는 파이썬 함수 혹은 메소드로, Ray에 의해 스켸쥴링되는 단위).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Shared memory object store&lt;/strong&gt; : 워커(worker)들간 객체를 효율적으로 공유하기 위한 공유메모리(copy 발생이 없는)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inmemory database&lt;/strong&gt; : 머신 실패(machine failure)와 같은 이벤트 상황에서 task들을 반환하기 위해 메타 데이터를 저장하는 데이터베이스&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Ray worker는 thread가 아니며, thread와는 다른 개념의 process입니다. Python은 GIL(Global Interpreter Lock)으로 인해 multi-threding 지원에 한계가 있습니다.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;parallelism-with-tasks&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#parallelism-with-tasks&#34;&gt;&lt;/a&gt; Parallelism with Tasks&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;@ray.remote&lt;/code&gt;라는 데코레이터를 함수 위에 선언해주는 것만으로 파이썬 함수를 Ray에서 실행 가능한 &lt;em&gt;remote function&lt;/em&gt; 으로 변경할 수 있습니다.&lt;/p&gt;
&lt;p&gt;(&lt;em&gt;remote function은 Ray의 프로세스에 의해 비동기적으로 실행됩니다.&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;아래 예제와 같이 함수 &lt;code&gt;f&lt;/code&gt;를 &lt;code&gt;@ray.remote&lt;/code&gt; 데코레이터를 통해서 &lt;em&gt;remote function&lt;/em&gt; 으로 변경했다면, &lt;code&gt;f.remote()&lt;/code&gt;를 호출해서 함수를 실행할 수 있습니다. 이때, 호출된 &lt;code&gt;f.remote()&lt;/code&gt;는 즉각적으로 future를 반환하고 실제 함수의 실행은 백그라운드에서 진행됩니다.&lt;/p&gt;
&lt;p&gt;(&lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Futures_and_promises&#34;&gt;future&lt;/a&gt;는 나중에 반환될 함수의 출력값에 대한 참조입니다.&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;아래 예제에서 &lt;code&gt;f.remote()&lt;/code&gt;에 대한 호출이 즉시 반환되고 다음 &lt;em&gt;remote function&lt;/em&gt; 이 실행되기 때문에, 백그라운드에서 실행되는 &lt;code&gt;f&lt;/code&gt;에 대한 4개의 복사본(task)은 단순히 해당 라인을 4번 실행하는 것으로 분산, 병렬로 실행할 수 있습니다.&lt;/p&gt;
&lt;p&gt;파이썬 함수 &lt;code&gt;f&lt;/code&gt;를 &lt;em&gt;remote function&lt;/em&gt; 으로 바꾸기 위해서는 함수에 &lt;code&gt;@ray.remote&lt;/code&gt;라는 데코레이터를 선언해줘야합니다. 그리고 함수를 &lt;code&gt;f.remote()&lt;/code&gt;로 호출하면 즉시 future를 리턴합니다. 그리고 실제 함수의 실행은 백그라운드에서 실행됩니다.&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; ray&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; time&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Start Ray.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ray.init()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@ray.remote&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;f&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;x&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    time.sleep(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Start 4 tasks in parallel.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;result_ids = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    result_ids.append(f.remote(i))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Wait for the tasks to complete and retrieve the results.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# With at least 4 cores, this will take 1 second.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;results = ray.get(result_ids)  &lt;span class=&#34;comment&#34;&gt;# [0, 1, 2, 3]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;task-dependencies&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#task-dependencies&#34;&gt;&lt;/a&gt; Task Dependencies&lt;/h3&gt;
&lt;p&gt;task는 또 다른 task에 의존할 수 있습니다.&lt;/p&gt;
&lt;p&gt;아래 예제에서 &lt;code&gt;multiply_matrices&lt;/code&gt; task는 두개의 &lt;code&gt;create_matrix&lt;/code&gt; task의 결과를 사용합니다. 따라서 첫번째 두 task의 출력은 자동으로 세번째 task의 인자로 입력됩니다.&lt;/p&gt;
&lt;p&gt;결론적으로, 아래 예제를 실행해보면, &lt;code&gt;multiply_matrices&lt;/code&gt;는 첫번째 두 task의 출력의 값이 반환되기 전까지는 실행되지 않습니다.&lt;/p&gt;
&lt;p&gt;이러한 방식으로 task들을 arbitrary DAG dependencies로 구성할 수 있습니다.&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@ray.remote&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;create_matrix&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;size&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; np.random.normal(size=size)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@ray.remote&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;multiply_matrices&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;x, y&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; np.dot(x, y)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_id = create_matrix.remote([&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y_id = create_matrix.remote([&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;z_id = multiply_matrices.remote(x_id, y_id)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Get the results.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;z = ray.get(z_id)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;aggregating-values-efficiently&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#aggregating-values-efficiently&#34;&gt;&lt;/a&gt; Aggregating Values Efficiently&lt;/h3&gt;
&lt;p&gt;task 의존성을 잘 설계하면 효율적인 방식으로 작업을 수행할 수 있습니다.&lt;/p&gt;
&lt;p&gt;예를 들어 아래의 그림처럼 8개의 정수를 더한다고 생각해봅시다.&lt;/p&gt;
&lt;p&gt;매우 간단한 예제이지만, 실제로 이러한 형태로 큰 벡터를 통합하는 것은 애플리케이션에 큰 병목이 되기도 합니다. 이런 병목 지점에서 task 의존성을 잘 설계한다면, 단 한줄의 코드 변경으로 시간 복잡도를 선형 시간에서 로그메틱 시간으로 변경할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;aggregation.jpeg&#34; alt=&#34;Aggregation&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(두 연산 그래프는 같은 결과를 반환하지만, 좌측 그림은 의존성 그래프의 깊이가 7이며, 우측 그림은 의존성 그래프의 깊이가 3입니다. 이 경우 우측 연산 그래프의 연산이 더 빠릅니다)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;위에서 설명한데로 하나의 task에서 생성된 출력을 다른 task의 입력으로 사용하기 위해서는 첫번째 task로부터 반환받은 future를 두번째 task의 입력으로 넣으면 됩니다.&lt;/p&gt;
&lt;p&gt;이때, 두번째 task가 첫번째 task의 출력을 의존하고있으면 두번째 task는 첫번째 task가 끝나기 전에는 실행되지 않습니다.&lt;/p&gt;
&lt;p&gt;task 의존성은 자동으로 ray의 스켸쥴러가 추적하고 관리하므로, 만약 분산환경일 경우, 첫번째 task의 출력은 자동으로 두번째 task가 있는 머신으로 보내져 실행되게됩니다.&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; time&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@ray.remote&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;add&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;x, y&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    time.sleep(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x + y&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Aggregate the values slowly. This approach takes O(n) where n is the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# number of values being aggregated. In this case, 7 seconds.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;id1 = add.remote(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;id2 = add.remote(id1, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;id3 = add.remote(id2, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;id4 = add.remote(id3, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;id5 = add.remote(id4, &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;id6 = add.remote(id5, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;id7 = add.remote(id6, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;result = ray.get(id7)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Aggregate the values in a tree-structured pattern. This approach&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# takes O(log(n)). In this case, 3 seconds.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;id1 = add.remote(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;id2 = add.remote(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;id3 = add.remote(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;id4 = add.remote(&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;id5 = add.remote(id1, id2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;id6 = add.remote(id3, id4)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;id7 = add.remote(id5, id6)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;result = ray.get(id7)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;위의 코드는 명확합니다. 하지만, 이를 &lt;code&gt;while&lt;/code&gt; loop를 통해 구현한다면 더 간결하게 구현할 수 있습니다.&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Slow approach.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;values = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(values) &amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    values = [add.remote(values[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], values[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])] + values[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;:]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;result = ray.get(values[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Fast approach.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;values = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(values) &amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    values = values[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;:] + [add.remote(values[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], values[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;result = ray.get(values[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;from-classes-to-actors&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#from-classes-to-actors&#34;&gt;&lt;/a&gt; From Classes to Actors&lt;/h2&gt;
&lt;p&gt;클래스없이 좋은 애플리케이션을 만드는 것은 어려운 일입니다. 그리고 이는 분산환경에서도 마찬가지로 어렵습니다.&lt;/p&gt;
&lt;p&gt;클래스 데코레이터 &lt;code&gt;@ray.remote&lt;/code&gt;를 사용하면 Ray에서 파이썬 클래스를 사용할 수 있습니다. 클래스를 인스턴스화하면 Ray는 새로운 액터(Actor)를 생성합니다. 액터는 분산환경 어딘가에서 실행되지만 객체의 복제본(object copy)을 유지하는 프로세스입니다.&lt;/p&gt;
&lt;p&gt;액터의 메소드를 실행하면 Ray는 해당 메소드를 액터 프로세스 위에서 작동하는 task로 변환합니다. 액터 프로세스 위에서 작동하는 task는 액터의 상태(state)에 접근이 가능하고 상태를 변경할 수 있습니다. 이러한 방법으로 액터는 액터의 상태값을 여러 task간 공유합니다.&lt;/p&gt;
&lt;p&gt;개별적인 액터는 메소드를 직렬로 실행하며(블럭킹), 액터의 메소드는 atomic 속성을 갖습니다. 따라서 race condition이 발생하지 않게됩니다. 액터를 이용한 병렬성은 다수의 액터를 생성하는 방식으로 구현합니다.&lt;/p&gt;
&lt;p&gt;아래 예제는 액터를 사용하는 간단한 예제입니다. &lt;code&gt;Counter.remote()&lt;/code&gt;는 새로운 액터 프로세스를 생성합니다.&lt;/p&gt;
&lt;p&gt;액터 프로세스는 &lt;code&gt;Counter&lt;/code&gt; 객체의 복사본을 갖으며, &lt;code&gt;c.get_value.remote()&lt;/code&gt;와 &lt;code&gt;c.inc.remote()&lt;/code&gt;는 원격 액터 프로세스(remote actor process)에서 task를 실행하고 액터의 상태를 변경합니다.&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@ray.remote&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Counter&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;object&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.x = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;inc&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.x += &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;get_value&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; self.x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Create an actor process.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;c = Counter.remote()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Check the actor&amp;#x27;s counter value.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(ray.get(c.get_value.remote()))  &lt;span class=&#34;comment&#34;&gt;# 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Increment the counter twice and check the value again.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;c.inc.remote()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;c.inc.remote()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(ray.get(c.get_value.remote()))  &lt;span class=&#34;comment&#34;&gt;# 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;actor-handles&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#actor-handles&#34;&gt;&lt;/a&gt; Actor Handles&lt;/h3&gt;
&lt;p&gt;위에서 우리는 파이썬의 메인 스크립트에서 액터의 메소드를 실행하는 예제를 살펴봤습니다.&lt;/p&gt;
&lt;p&gt;액터의 강력한 장점은 핸들(handle)을 액터에 전달할 수 있는 것입니다. 이는 다른 액터나 다른 task가 동일한 액터의 메소드를 호출할 수 있게 해줍니다.&lt;/p&gt;
&lt;p&gt;아래 예제는 메세지를 저장하는 액터를 생성합니다. 몇몇의 worker task는 반복적으로 messages를 액터로 푸쉬합니다. 그리고 파이썬 메인 스크립트는 주기적으로 이 메세지를 읽습니다.&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; time&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@ray.remote&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;MessageActor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;object&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.messages = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;add_message&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, message&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.messages.append(message)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;get_and_clear_messages&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        messages = self.messages&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.messages = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; messages&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Define a remote function which loops around and pushes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# messages to the actor.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@ray.remote&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;worker&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;message_actor, j&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        time.sleep(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        message_actor.add_message.remote(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;Message &amp;#123;&amp;#125; from worker &amp;#123;&amp;#125;.&amp;quot;&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(i, j))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Create a message actor.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;message_actor = MessageActor.remote()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Start 3 tasks that push messages to the actor.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[worker.remote(message_actor, j) &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; j &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Periodically get the messages and print them.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; _ &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    new_messages = ray.get(message_actor.get_and_clear_messages.remote())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;New messages:&amp;quot;&lt;/span&gt;, new_messages)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    time.sleep(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# This script prints something like the following:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# New messages: []&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# New messages: [&amp;#x27;Message 0 from worker 1.&amp;#x27;, &amp;#x27;Message 0 from worker 0.&amp;#x27;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# New messages: [&amp;#x27;Message 0 from worker 2.&amp;#x27;, &amp;#x27;Message 1 from worker 1.&amp;#x27;, &amp;#x27;Message 1 from worker 0.&amp;#x27;, &amp;#x27;Message 1 from worker 2.&amp;#x27;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# New messages: [&amp;#x27;Message 2 from worker 1.&amp;#x27;, &amp;#x27;Message 2 from worker 0.&amp;#x27;, &amp;#x27;Message 2 from worker 2.&amp;#x27;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# New messages: [&amp;#x27;Message 3 from worker 2.&amp;#x27;, &amp;#x27;Message 3 from worker 1.&amp;#x27;, &amp;#x27;Message 3 from worker 0.&amp;#x27;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# New messages: [&amp;#x27;Message 4 from worker 2.&amp;#x27;, &amp;#x27;Message 4 from worker 0.&amp;#x27;, &amp;#x27;Message 4 from worker 1.&amp;#x27;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# New messages: [&amp;#x27;Message 5 from worker 2.&amp;#x27;, &amp;#x27;Message 5 from worker 0.&amp;#x27;, &amp;#x27;Message 5 from worker 1.&amp;#x27;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Ray의 액터는 매우 강력합니다. 액터는 파이썬의 클래스를 가져와서 다른 액터와의 작업 혹은 다른 애플리케이션에 질의할 수 있는 마이크로 서비스로 인스턴스화할 수 있습니다.&lt;/p&gt;
&lt;p&gt;task와 액터는 Ray가 제공하는 핵심적인 추상입니다. 이 두 가지 개념은 매우 일반적이면서 정교한 애플리케이션 구현에 사용할 수 있습니다.&lt;/p&gt;
&lt;p&gt;Ray는 딥러닝에 사용되는 정교한 애플리케이션 중 하나인 &lt;a href=&#34;https://docs.ray.io/en/latest/rllib.html&#34;&gt;분산 강화학습&lt;/a&gt;, &lt;a href=&#34;https://docs.ray.io/en/latest/tune/index.html&#34;&gt;하이퍼파라미터 튜닝 도구&lt;/a&gt;, &lt;a href=&#34;https://docs.ray.io/en/latest/pandas_on_ray.html&#34;&gt;가속화된 판다스&lt;/a&gt;를 제공하니 한번 살펴보시기 바랍니다.&lt;/p&gt;
&lt;p&gt;또한 이런 기술적인 내용을 함께 논의해보고 싶으시다면 딥백수에서 함께하시면 좋을 것 같습니다. &lt;a href=&#34;/about&#34;&gt;딥백수 소개 페이지&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#reference&#34;&gt;&lt;/a&gt; Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://towardsdatascience.com/modern-parallel-and-distributed-python-a-quick-tutorial-on-ray-99f8d70369b8&#34;&gt;Modern Parallel and Distributed Python: A Quick Tutorial on Ray&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="software engineering" />
        <category term="Martin Hwang" />
        <category term="Ray" />
        <category term="distributed computing" />
        <category term="parallel computing" />
        <updated>2020-09-01T15:15:52.000Z</updated>
    </entry>
    <entry>
        <id>https://deepbaksu.github.io/2020/08/30/first-apply-after-consider/</id>
        <title>선지원 후고민</title>
        <link rel="alternate" href="https://deepbaksu.github.io/2020/08/30/first-apply-after-consider/"/>
        <content type="html">&lt;h2 id=&#34;1-꿈과-실험&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-꿈과-실험&#34;&gt;&lt;/a&gt; 1. 꿈과 실험&lt;/h2&gt;
&lt;p&gt;주말에 편안히 쉬고 있는데, 유튜브에 추천 영상이 올라와서 클릭했습니다.&lt;/p&gt;
&lt;div class=&#34;video-container&#34;&gt;&lt;iframe src=&#34;https://www.youtube.com/embed/CYmyp77d1BU&#34; frameborder=&#34;0&#34; loading=&#34;lazy&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;p&gt;타일러 라쉬의 영상이었죠. 제목에 &#39;동기부여’라는 말이 적혀 있기에 영상을 볼지 안볼지를 1분간 고민했습니다. 보통 ‘동기부여’ 강연이라고 하면 들을 땐 뭔가 고양되는 느낌을 받으면서도 영상이 끝나고 나선 별로 알맹이 없는 느낌을 받거든요. 그런 공허함을 느낄 바엔 차라리 보지 않는게 낫다고 생각이 들어서 동기부여 강의 시청은 자제하는 편입니다.&lt;/p&gt;
&lt;p&gt;그래도 한 번 보자고 생각이 들어 영상을 시청했습니다.&lt;/p&gt;
&lt;p&gt;역시 엄청 특별한 얘기는 아니었어요.&lt;/p&gt;
&lt;p&gt;&#39;꿈’이라는 단어에 대한 옹호를 하기 위해 열심히 준비했다는 건 느낄 수 있었던 강연이었습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/08/30/first-apply-after-consider/dream.jpg&#34; alt=&#34;꿈&#34; /&gt;&lt;/p&gt;
&lt;p&gt;언제부터인지는 모르겠지만 ‘열정’, ‘노력’, &#39;꿈’이라는 말만 듣더라도 ‘열정페이’, ‘노오오오오력’, &#39;착취’와 연결해서 생각하게 되고 밥벌이를 해야 하는 어른이 된 이후로는 &#39;꿈’이라는 단어를 생각하기보단 하루하루 버텨나가는 데 전력을 다하고 있거든요. 저만 그런가요? 하하.&lt;/p&gt;
&lt;p&gt;타일러가 말한 핵심 내용은 이렇습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;첫째, 작게 작게 실험하기.&lt;/li&gt;
&lt;li&gt;둘째, 꿈과 직함을 혼동하지 말기&lt;/li&gt;
&lt;li&gt;셋째, 다른 사람의 꿈을 물을 땐 그 사람이 꿈꾸는 세상을 물어보는 거란 걸 기억하기&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;다른 건 그리 와닿지 않았는데 여기서 주목한 내용은 첫번째 &#39;작게 작게 실험하기’부분 이었어요. 예전 경험이 떠올랐거든요.&lt;/p&gt;
&lt;h2 id=&#34;2-올인-그리고-실패&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-올인-그리고-실패&#34;&gt;&lt;/a&gt; 2. 올인 그리고 실패&lt;/h2&gt;
&lt;p&gt;예전에 썼던 &lt;a href=&#34;https://deepbaksu.github.io/2020/08/16/jonber/&#34;&gt;딥백수 그리고 존버&lt;/a&gt; 라는 글에서 비전공자에 코딩의 ㅋ자도 모른 채 IT쪽으로 전환을 했다고 말씀드린 적이 있어요.&lt;/p&gt;
&lt;p&gt;사실 여기서 조금 빠진 부분이 있는데, 제 처참한 실패 경험이에요.&lt;/p&gt;
&lt;p&gt;18년 10월 데이터 분석 인턴을 하고 있었는데, 제가 생각하던게 아니고 뭔가 채워지지 않는 느낌을 받고 있었어요. &#39;3년 후, 5년 후 미래를 봤을 때 과연 괜찮을까?&#39;라는 생각이 많이 들었고 뭔가 답답함을 느꼈죠. 인턴을 그만두고 국비교육을 수강하러 갔습니다. 그 때는 아무 개념도 없어서 제가 수강하는 과정이 어떤 과정인지, 어떤 걸 가르쳐주고 어떤 거에 중점을 두는 과정인지 어떤 것도 모른 채 그냥 직진했습니다. 지금 생각해보면 너무 생각없이 움직인 거였죠.&lt;/p&gt;
&lt;p&gt;국비교육은 기관이나 과정에 따라 다르지만, 보통 5개월에서 7개월 정도 수업을 진행합니다. 다시말해 1년의 반을 투자해서 자신의 커리어를 바꾸는 의사결정인거죠. 만약 교육과정과 선생님과 FIT이 맞다면 상관없겠지만, 그렇지 않을 경우 1년의 반을 그저 낭비한 게 될 수도 있으니까요. 사실 개발자 친구가 이런 점을 알고 옆에서 경고하고 조언을 해주는 등 얘기를 해주었지만, 그 당시 제겐 다른 대안도 없고 이미 도장을 찍어버린 상태였어요. 말그대로 올인을 했죠.&lt;/p&gt;
&lt;p&gt;저는 데이터분석을 위한 프로그래밍을 수강하길 원했는데 제가 수강한 과정은 빅데이터 플랫폼 개발 과정이었어요. 혹시나해서 상담직원에게 제가 원하는 바(데이터 분석 프로그래밍)를 말했는데 담당 직원은 그것도 배울 수 있다며 수강을 독려했었죠. (알고보니 상담직원은 코딩을 1도 모르는 사람이더군요)&lt;/p&gt;
&lt;p&gt;그렇게 시간이 흘러 수업날이 다가왔습니다.&lt;/p&gt;
&lt;p&gt;그리고 첫 수업날 첫 시간에 선생님께선 말씀하셨죠. “여긴 분석 수업 아닙니다!”&lt;/p&gt;
&lt;p&gt;이후 스토리는 예상이 가질 않으신가요? 맞아요. 처참히 무너졌죠. 자바-JSP-Spring으로 이어지는 웹 개발 교육과정에서 엄청난 벽을 맞이했거든요. 그 이후엔 이미 멘붕상태라 전혀 따라가질 못했습니다.&lt;/p&gt;
&lt;p&gt;엄청난 불안과 공포로 하루하루 잠자는 게 무서울 정도였어요. 왜냐하면 모든 자원과 시간을 다 쏟아부었는데 붕 뜬 느낌이었거든요. 매일같이 남들이 손가락짓 하는 상상이 들었어요. ‘그거 봐라. 내가 뭐랬냐. 너 그거 하지 말랬지’, ‘내가 너 그럴 줄 알았지’ 등등 이런 말들이 머릿속을 떠나질 않더라구요.&lt;/p&gt;
&lt;h2 id=&#34;3-실험의-실제-선지원-후고민&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-실험의-실제-선지원-후고민&#34;&gt;&lt;/a&gt; 3. 실험의 실제 - 선지원 후고민&lt;/h2&gt;
&lt;p&gt;당시 저는 딥백수에서 멘토링을 받고 있었는데, 멘토링 해주시는 분이 늘 강조한 게 있어요.&lt;/p&gt;
&lt;p&gt;바로 &#39;입사지원’이었어요.&lt;/p&gt;
&lt;p&gt;너무 당연하다구요? 맞아요. 당연하죠. 취업을 하려고 국비교육을 들었으니 취업을 해야 할테니까요. 그런데 실제로 기업들의 채용공고를 보다보면 그 벽이 정말 높아보였어요. 우대사항 말고 요구사항을 봐도 제겐 해당하는 사항이 없다고 생각이 들 정도였으니까요. 취준을 하시는 분이라면 아실텐데 요구사항에 자신이 해당하는 게 없다는 느낌만큼 좌절감을 주는 건 없을거에요.&lt;/p&gt;
&lt;p&gt;그러다보니 악순환의 반복에 빠지게 되었죠.&lt;/p&gt;
&lt;p&gt;좌절감 -&amp;gt; 불안감 -&amp;gt; 공부 안함 -&amp;gt; 요구사항에 맞는 게 없음 -&amp;gt; 좌절감 -&amp;gt; 불안감&lt;/p&gt;
&lt;p&gt;그동안 어르고 달래던 멘토분이 정말 지독하게 화를 낸 적이 있어요. 입사지원을 몇 개이상 하라고 했는데 겁이 난다고 하지 않았기 때문이었죠. 아마 계속 악순환에 빠지는 걸 막기 위해 엄청 화내셨던거 같아요.&lt;/p&gt;
&lt;p&gt;생각해보면 버튼 몇 개만 누르면 되는거고 누구에게 허락받고 지원해야 하는 것도 아닌데 자기만의 프레임에 빠져 계속 ‘나는 부족해’, ‘나는 공부를 더 해야해’, &#39;요구사항을 완전히 맞춰야해’라고 생각하고 있었죠.&lt;/p&gt;
&lt;p&gt;가끔 취준생분들과 얘기하다보면 제가 했던 이런 실수를 하시는 경우가 많습니다. 입사지원을 해보라고 하면 ‘아 제가 파이썬 쓴지 얼마 안되서요’, ‘아직 프로젝트 경험이 별로 없어서요’, ‘제가 과연 지원할 수 있을까요?’ 라고 말하는 경우를 많이 봅니다.&lt;/p&gt;
&lt;p&gt;그럴 때마다 멘토가 그랬고 지금은 제가 외치는 말 한 마디가 있죠. “선지원 후고민”&lt;/p&gt;
&lt;p&gt;굳이 너무 어렵게 생각할 필요 없이 실험을 해보는 겁니다. 지원을 해보고 서류통과는 몇 개가 나오는지, 1차 면접통과는 몇 개가 나오는지 실험을 한다는 태도로 생각을 줄이고 지원을 하면 자기가 부족한 게 뭔지 조금씩 보입니다.&lt;/p&gt;
&lt;p&gt;잠시 타일러의 강연으로 돌아가 볼까요?&lt;/p&gt;
&lt;p&gt;타일러는 강연에서 &#39;브라질에서 마이크로파이낸싱’을 해보고 싶다는 사람에게 &#39;오늘 집에 들어가기 전에 한국에서 포르투갈어 공부할 수 있는 곳 5곳 리스트업’이라는 힌트를 제공합니다. 꿈을 매우 작게작게 지원해보고 그 다음에 고민해보라는 의미였죠.&lt;/p&gt;
&lt;p&gt;이게 Apply Driven Study라는 겁니다.&lt;/p&gt;
&lt;p&gt;언젠가 금융권 회사에서 서류를 통과시켜줘서 면접을 보러간 적이 있었습니다. 기분좋게 아무 생각 없이 캐쥬얼하게 입고 갔었죠. 그런데 다들 정장을 빳빳하게 다려서 입고 들어왔고 탄탄한 포트폴리오가 있었고 어떤 활동을 했습니다. 당연히 면접관이 저에게 질문을 3분도 하지 않았죠.&lt;/p&gt;
&lt;p&gt;그 날 속상하고 힘들었지만 배웠습니다. “포트폴리오와 활동이 부족하구나.” 그런데 포트폴리오를 만들 시간이 별로 없네? 그럼 다른 사람이 쓴 책 따라하고 거기 나온 내용을 이야기 해봐야지.&lt;/p&gt;
&lt;p&gt;이런 식으로 지원 -&amp;gt; 부족점 파악 -&amp;gt; 지원, 이 사이클을 만들고 나니 불안감은 줄고 목표는 더 확실해지고 공부량은 늘더군요. 물론 매일같이 보이는 족족 입사지원을 했구요.&lt;/p&gt;
&lt;h2 id=&#34;4-혼자일-필요는-없다&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-혼자일-필요는-없다&#34;&gt;&lt;/a&gt; 4. 혼자일 필요는 없다&lt;/h2&gt;
&lt;p&gt;정말 똑똑하고 강한 사람이라면 혼자서 이런걸 다 해낼 수 있겠죠. 그리고 저처럼 시행착오를 겪지않고 빠르게 실험을 끝냈을겁니다.&lt;/p&gt;
&lt;p&gt;하지만 꼭 혼자 고민할 필요가 있나요? 꿈을 실험하는 목적은 자신이 원하는 목표를 이루기 위해서이지, 자신이 혼자서도 강하다는 걸 증명하기 위한 게 아니지 않을까요?&lt;/p&gt;
&lt;p&gt;사실 우리가 아무리 똑똑해도 내가 보지 못한 관점, 사실, 정보 등이 많습니다. 이건 초보건 고수건 관계없이 적용되는 말이라고 생각해요.&lt;/p&gt;
&lt;p&gt;특히나 자기가 부족하다고 생각하는 사람이라면 다른 사람에게 도움을 요청하는 건 정말 용기있는 행동이라고 생각하고 목표를 이루기 위해 노력하는 사람이라고 생각합니다.&lt;/p&gt;
&lt;p&gt;딥백수엔 이런 용기 있는 사람이 많아요.&lt;br /&gt;
그렇다고 그 분들이 실력이 부족하냐? 그건 아니구요. 서로에게 더 도움이 되기 위해 불철주야 노력하시는 분들이죠.&lt;/p&gt;
&lt;p&gt;(제가 제일 노력 안하는 편이라 많이 혼나요…하하)&lt;/p&gt;
&lt;p&gt;꿈이 있고 꿈을 이루기 위해 도움을 주고받고 싶으신 분이라면&lt;br /&gt;
&lt;a href=&#34;https://bit.ly/2Sqdnws&#34;&gt;https://bit.ly/2Sqdnws&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;여기로 함께해주세요.&lt;/p&gt;
&lt;p&gt;감사합니다.&lt;/p&gt;
</content>
        <category term="Jinyoung Song" />
        <category term="선지원" />
        <category term="후고민" />
        <category term="선지원 후고민" />
        <category term="실험" />
        <category term="Apply Driven Study" />
        <category term="생존" />
        <category term="멘토링" />
        <category term="용기" />
        <updated>2020-08-30T07:11:47.000Z</updated>
    </entry>
    <entry>
        <id>https://deepbaksu.github.io/2020/08/30/ai-robotics-subscriptions/</id>
        <title>내가 최신 딥러닝 / 로보틱스 뉴스를 따라잡는 방법</title>
        <link rel="alternate" href="https://deepbaksu.github.io/2020/08/30/ai-robotics-subscriptions/"/>
        <content type="html">&lt;h2 id=&#34;0-커뮤니티에-기대서-뉴스를-보던-때는&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#0-커뮤니티에-기대서-뉴스를-보던-때는&#34;&gt;&lt;/a&gt; 0. 커뮤니티에 기대서 뉴스를 보던 때는…&lt;/h2&gt;
&lt;p&gt;AI 와 Robotics 뉴스는 매일같이 쏟아져 나온다. 나는 내가 뉴스를 받아보기 위해 종종 내가 관심있는 연구 그룹의 블로그에 들어가서 뉴스를 확인하곤 했다.&lt;/p&gt;
&lt;p&gt;그런데 어떤 때는 내가 직접 찾아보기 전에 페이스북 TensorFlow KR이나 AI Korea 등의 커뮤니티를 통해 뉴스를 접하기도 한다. 이 두 커뮤니티에는 빠르게 뉴스를 전달해서 인지도를 높이시는 분들도 계시고, 심지어 관리자가 만든 뉴스 봇도 있다 (추정). 페이스북을 통해서 뉴스를 받아보는것에 익숙해지다보니, 점차 뉴스를 보기 위해 페이스북에 접속하게 되었다.&lt;/p&gt;
&lt;p&gt;그러다가 느낀 것이 있다. 커뮤니티를 통해서 새로운 정보를 빠르게 접하는 것은 좋았다. 하지만 남들이 골라주는 뉴스만 보다보니, 내가 정말로 보고싶은 나의 취향의 뉴스와 소식을 받을 수 없게 된 것이다. 페이스북에서 SLAM에 대한 뉴스는 잘 나오지도 않는다. 한창 컴퓨터 비전과 SLAM에 관심을 가지고 있었는데, AI 정보에 치우쳐진 페이스북 뉴스를 통해서 파이썬도 배우지 않은 상태로 CNN과 RNN의 기초를 이해하게 되었고, YOLO와 Faster-RCNN의 차이도 알게 되었다. AI 분야의 뉴스를 아는게 잘못된건 아니지만, 내가 당시 집중해야할 것은 기존의 컴퓨터 비전과 SLAM 이였다.&lt;/p&gt;
&lt;p&gt;이렇게 자꾸 물들어 갈 수는 없었다. 내가 보고싶은 뉴스는 내가 골라서 봐야했다.&lt;/p&gt;
&lt;p&gt;이번 주제로 2개의 글을 쓸 것 같다. 하나는 AI 뉴스를 보는 방법, 하나는 SLAM 뉴스를 보는 방법이 될 것 같다. 이번 글은 우선 AI 뉴스를 보는 방법에 대해 설명하고, 다음 글에서 SLAM 뉴스를 보는 방법을 적을 것이다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://cv-learn.com/SLAM-cadf848aa80f4a3bbd291247fb44c209&#34;&gt;내가 최신 SLAM 뉴스를 따라잡는 방법 글 링크&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-첫번째-방법-feedly-앱&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-첫번째-방법-feedly-앱&#34;&gt;&lt;/a&gt; 1. 첫번째 방법: Feedly 앱&lt;/h2&gt;
&lt;p&gt;첫번째 방법은 아이패드에서 사용하는 Feedly 앱이다. 이 앱을 통해 여러 뉴스 웹사이트와 블로그 RSS 피드를 가져와서 한 앱에서 한눈에 쉽게 볼 수 있다. 이러한 방식의 장점은, 구글에서 내가 기억하는 랩실의 이름을을 하나씩 기억하고 찾는 것 보다, 아이패드에서 앱을 한번 누르는 것만으로 쉽게 많은 정보를 빠르게 접할 수 있기 때문이다 (정보를 얻는데에 들어가는 수고를 덜어준다).&lt;/p&gt;
&lt;p&gt;또 다른 좋은 점은 기사 / 블로그 글의 썸네일까지 함께 제공하기 때문에, 시각적으로도 좀 더 끌리는 것 같다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/08/30/ai-robotics-subscriptions/feedly1.png&#34; alt=&#34;Feedly-AI-subscriptions 1&#34; /&gt;&lt;br /&gt;
&lt;img src=&#34;/2020/08/30/ai-robotics-subscriptions/feedly2.png&#34; alt=&#34;Feedly-AI-subscriptions 2&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Arxiv는 끊었다. 너무 논문 업데이트가 많다.&lt;br /&gt;
내가 보고싶어하는 저자의 논문만 보는 방법은 없을까?&lt;/p&gt;
&lt;p&gt;AI 관련으로는 가장 SOTA를 많이 뽑아내는 Google AI Blog, OpenAI, BAIR, Nvidia, FAIR, DeepMind, Microsoft Research, Fast.ai와 몇가지 상업적인 AI 뉴스를 구독했다. 아직 AI 분야는 내가 핸즈온으로 도전하고 있지 않았기 때문에, 논문보다는 기사 제목만 훑는 것 만으로 어느정도 연구 트렌드 변화와 산업 변화를 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;최신 논문을 빨리 훑어보려고 Arxiv 피드도 구독했었다. 그러나 지금은 구독 취소를 했는데, 매일 내 분야도 아닌 논문이 300개씩 추가가 되서이다.&lt;/p&gt;
&lt;p&gt;Robotics 분야의 뉴스는 사실 특정 기술의 내용보다는 제품군이 좀 더 많이 나오는 것 같다. 그나마 조금 깊게 들어가는 IEEE Spectrum을 보는게 조금 좋은 것 같다. 단순히 로보틱스 뿐만이 아니라 주변 기술 (automation, energy) 등등 피드도 구독해놨다.&lt;/p&gt;
&lt;p&gt;기본적으로 나는 이런 피드들을 읽을 때 모든 글을 읽겠다는 생각은 하고있지 않다. 나는 내가 구독한 소스의 수가 많다고 생각하고 있고, 또 너무 많은 정보를 소화하려고 하다보면 정보의 바다에 휩쓸리기 쉽고, 개인 스케줄 등으로 혹시나 딜레이가 생기게 될 경우 스트레스를 받는 편이다.&lt;/p&gt;
&lt;p&gt;실제로 사용할 때는 아래처럼 보인다. 썸네일이 안보이는 이유는 아마 로딩중이라서 그런 것 같다. 아침에 출근하면서 지하철에서 글 하나, 점심시간에 하나, 퇴근하면서 하나 정도 보면 딱 괜찮은 것 같다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/08/30/ai-robotics-subscriptions/feedly3.png&#34; alt=&#34;Feedly 메인 화면&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-paperswithcode&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-paperswithcode&#34;&gt;&lt;/a&gt; 2. Paperswithcode&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/2020/08/30/ai-robotics-subscriptions/papers_with_code.png&#34; alt=&#34;Papers with code&#34; /&gt;&lt;/p&gt;
&lt;p&gt;딥러닝을 업으로 삼으신 지인으로부터, SOTA 랭킹에 대해 알고싶다면 Paperswithcode를 보라고 추천을 받았다.&lt;/p&gt;
&lt;p&gt;종종 논문 검색을 위해 이 페이지를 이용했지만, 아직 딥러닝에 대한 지식이 부족해서 애용하는 정도는 아니다. 그래도 가끔 들어가서 현재 SOTA가 무엇인지 확인하고, 딥러닝을 업으로 삼으시는 분들과 이야기 할 때 도움이 된다.&lt;/p&gt;
&lt;p&gt;최근에는 task의 범위가 넓어지면서, 은근히 non-딥러닝 방식도 올라온 것 같다. 하지만 non-딥러닝 방식의 연구자 분들은 이 웹사이트를 잘 안 쓰시는 것 같다.&lt;/p&gt;
&lt;p&gt;한동안 Detection 분야에서 TridentNet 아키텍처를 사용한 기술이 SOTA 였을 때, Detection task로 어려워하시는 분께 아무것도 모르고 ‘TridentNet이 SOTA래요~ 성능이 제일 좋대요~’ 라고 말했다가 괜히 그분만 TridentNet 구현을 위해 고생하신 것도 기억난다 ㅋㅋ 그 후로는 함부로 랭킹만 믿지 않게 되었다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://paperswithcode.com&#34;&gt;Papers With Code : the latest in machine learning 링크&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-youtube&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-youtube&#34;&gt;&lt;/a&gt; 3. YouTube&lt;/h2&gt;
&lt;p&gt;Paperswithcode는 어떤 기술이 가장 좋은 벤치마크를 내는지 알 수 있지만, 사실 이러한 벤치마크 정보는 이미 해당 분야를 업으로 삼으신 분들께 도움이 되는 것 같다.&lt;/p&gt;
&lt;p&gt;아직 나처럼 딥러닝 꼬꼬마는 YouTube 영상들을 통해서 눈으로 보고 흥미를 느끼는게 좀 더 도움이 될 것이라고 생각한다.&lt;/p&gt;
&lt;h3 id=&#34;31-two-minute-paper&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#31-two-minute-paper&#34;&gt;&lt;/a&gt; 3.1 Two Minute Paper&lt;/h3&gt;
&lt;p&gt;Two Minute Paper는 딥러닝이 적용되는 다양한 분야의 기술들을 짧게 설명해준다. 오전에 지하철 타고 출근하면서 보기 딱 좋은 채널이다. 다루는 분야가 상당히 많은데, 기존의 detection / segmentation과 같은 컴퓨터 비전, BERT, GPT-3 같은 NLP 분야, 강화학습 분야…를 넘어서 종종 물리학 시뮬레이션과 그래픽스, 모션 추정 등 다양한 분야를 섭렵하는게 넓고 얕은 지식을 쌓기에 좋다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/08/30/ai-robotics-subscriptions/two_minutes_paper.png&#34; alt=&#34;Two Minute Paper 채널 화면&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;32-karol-majek&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#32-karol-majek&#34;&gt;&lt;/a&gt; 3.2 Karol Majek&lt;/h3&gt;
&lt;p&gt;Karol Majek 채널은 실제로 컴퓨터 비전 분야의 detection / segmentation / feature extraction 코드를 돌리면서 나오는 결과를 보여준다. 이런 영상이 좋은 이유는, 논문들의 홍보 영상들을 보다보면 항상 좋은 결과만 나오기 때문이다. 이런 영상들 중, 어떤 기술이 실제로 좋고 어떤 영상이 cherry pick인지 알 수 없는데, Majek의 영상들을 보면 각각의 딥러닝 모델들의 실제 퍼포먼스가 어느정도 되는지 알 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/08/30/ai-robotics-subscriptions/karol_majek.png&#34; alt=&#34;Karol Majek 채널 화면&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;33-lex-fridman&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#33-lex-fridman&#34;&gt;&lt;/a&gt; 3.3 Lex Fridman&lt;/h3&gt;
&lt;p&gt;기술 자체를 파고들기보다 여러 기술분야의 전문가들을 데려와서 팟캐스트 인터뷰를 진행한다. 이전에 Elon Musk가 나왔을 때 부터 봤는데, 얼마 지나지 않아 George Hotz가 나오는 것을 보고 완전 팬이 되었다. 이 둘은 사이도 좋지 않고 기술적으로도 경쟁하는 관계라고 들었는데, 그만큼 Lex는 중립을 지키면서 팟캐스트를 운영한다는 것을 보여주는 것 같다.&lt;/p&gt;
&lt;p&gt;자주 나오는 질문 중에 ‘우리가 지금 살아가는 이 세상이, 사실 시뮬레이션 일 것 같은가?’ 라는 질문이 있다. 처음엔 이게 무슨 공상과학 질문인가 싶었는데, 은근히 여러 전문가들마다 색다른 견해를 보여주는게 재밌다.&lt;/p&gt;
&lt;p&gt;단점이라면 너무 길어서 일주일동안 한 영상을 쪼개봐야한다.&lt;/p&gt;
&lt;p&gt;그리고 Lex가 생각보다 기타를 잘 친다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/08/30/ai-robotics-subscriptions/lex_fridman.png&#34; alt=&#34;Lex Fridman 채널 화면&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;34-yannic-kilcher&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#34-yannic-kilcher&#34;&gt;&lt;/a&gt; 3.4 Yannic Kilcher&lt;/h3&gt;
&lt;p&gt;내가 제일 약한 NLP 분야의 기술과 메타러닝 분야를 잘 설명해주는 유투버이다. 설명하는데에 도가 튼 것 같다. 사실 아직 딥러닝의 기초도 탄탄히 잡은 편도 아니고, NLP에는 아직 흥미가 가지 않기 때문에 자주 찾아보지는 않는다. 다만, DETR이라던지, DELF 와 같이 Attention이 컴퓨터 비전에 적용이 되는 것을 보고 Attention을 이해하기 위해 이 채널을 찾게 되었는데, 기술에 대한 설명을 정말로 깔끔하게 하는 것을 보고 이 채널에 대해 좋은 인상을 가지고 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/08/30/ai-robotics-subscriptions/yannic_kilcher.png&#34; alt=&#34;Yannic Kilcher 채널 화면&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;35-henry-ai-labs&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#35-henry-ai-labs&#34;&gt;&lt;/a&gt; 3.5 Henry AI Labs&lt;/h3&gt;
&lt;p&gt;Two Minute Paper와 비슷한 느낌의 채널이다. 채널의 OpenAI와 Facebook의 연구를 특히 좋아하는 것 같은데, 평소에 나오는 영상들은 사실 내 취향은 아니다. 하지만 학회가 진행될 때 마다 특정 기업의 연구 결과와 트렌드를 한번에 정리해주는게 굉장히 도움이 많이 된다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/08/30/ai-robotics-subscriptions/henry_ai_lab.png&#34; alt=&#34;Henry AI Labs 화면&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;37-gadget-seoul&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#37-gadget-seoul&#34;&gt;&lt;/a&gt; 3.7 Gadget Seoul&lt;/h3&gt;
&lt;p&gt;드디어 처음으로 나오는 한국인 채널 ㅋㅋ&lt;/p&gt;
&lt;p&gt;가젯서울 채널은 정확히 이야기하면 딥러닝 채널은 아니다. 반도체, 배터리, 데이터센터 관련된 뉴스가 주를 이루는데, 지난 1년간 엔비디아가 만들어내는 뉴스, 인텔의 자율주행 뉴스 등등으로 인해 딥러닝 프로세서 기업들의 트렌드를 알기 굉장히 좋다. 종종 가젯서울 채널주의 의견과 인사이트가 영상을 통해 공유되는데, 반도체 시장에 대한 굉장히 깊은 이해를 통해 오는 인사이트라고 느껴지고, 개인적으로 이정도 급의 인사이트를 무료로 들을 수 있다는 것에 대해 감사하게 생각한다.&lt;/p&gt;
&lt;p&gt;이 채널을 통해 최근 ARM 인수에 대해 Nvidia의 행보에 대해서 지속적으로 보고 있는 편.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/08/30/ai-robotics-subscriptions/gadget_seoul.png&#34; alt=&#34;Gadget Seoul 채널 화면&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;38-ml-explained-ai-socrates&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#38-ml-explained-ai-socrates&#34;&gt;&lt;/a&gt; 3.8 ML Explained - AI Socrates&lt;/h3&gt;
&lt;p&gt;이 아래부터는 아직 보고 있지 않은 채널들에 대해 소개한다.&lt;/p&gt;
&lt;p&gt;최근 웨비나를 진행하고 녹화를 하는 채널인 것 같은데, 제목들이 심상치 않다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/08/30/ai-robotics-subscriptions/ml_explained.png&#34; alt=&#34;ML Explained - AI Socrates 채널 화면&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;39-fair-vision&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#39-fair-vision&#34;&gt;&lt;/a&gt; 3.9 FAIR Vision&lt;/h3&gt;
&lt;p&gt;갓 3-4일전 만들어진 FAIR Vision의 유투브 채널.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/08/30/ai-robotics-subscriptions/fair_vision.png&#34; alt=&#34;FAIR Vision 채널 화면&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;310-딥러닝-논문읽기-모임-pr12&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#310-딥러닝-논문읽기-모임-pr12&#34;&gt;&lt;/a&gt; 3.10 딥러닝 논문읽기 모임 + PR12&lt;/h3&gt;
&lt;p&gt;그리고 국내에서 유명한 두 딥러닝 논문 읽기 채널들이다. PR12는 워낙 유명해서 말할 것도 없고, 딥러닝 논문 읽기 모임도 업로드한 영상이 많이 쌓이면서 인지도가 많이 쌓이고 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/08/30/ai-robotics-subscriptions/dl_reading.png&#34; alt=&#34;딥러닝 논문 읽기 모음 채널 화면&#34; /&gt;&lt;br /&gt;
&lt;img src=&#34;/2020/08/30/ai-robotics-subscriptions/pr12.png&#34; alt=&#34;PR12 재생목록 화면&#34; /&gt;&lt;/p&gt;
</content>
        <category term="Hyunggi Chang" />
        <category term="AI" />
        <category term="딥러닝" />
        <category term="로보틱스" />
        <category term="YouTube" />
        <category term="News" />
        <updated>2020-08-30T05:17:44.000Z</updated>
    </entry>
    <entry>
        <id>https://deepbaksu.github.io/2020/08/21/Go-wire-dependency-injection-tutorial/</id>
        <title>Go Dependency Injection Tutorial (feat. Wire)</title>
        <link rel="alternate" href="https://deepbaksu.github.io/2020/08/21/Go-wire-dependency-injection-tutorial/"/>
        <content type="html">&lt;p&gt;Dependency Injection(DI)을 한국어로 의존성 주입이라고도 하지만 실제로는 DI라고 했을때 우리는 DI Framework/Library 를 의미합니다. 우선 Dependency Injection 이 무엇인지 에 대해 설명하겠습니다.&lt;/p&gt;
&lt;p&gt;예를 들어 &lt;code&gt;PostService&lt;/code&gt; 는 블로그 포스트를 작성해주는 서비스가 있다고 가정합니다.&lt;/p&gt;
&lt;figure class=&#34;highlight golang&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; PostService &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  CreatePost(Post) Post&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;이때 우리는 블로그 포스트를 데이터베이스에 저장하고 싶습니다. 그러기 위해서 &lt;code&gt;CreatePost(Post)&lt;/code&gt; 함수 안에서&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;데이터베이스에 연결하고&lt;/li&gt;
&lt;li&gt;Post 를 INSERT 한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이런식으로 할 수 도 있습니다. 하지만 이런식으로 하기보다는 비지니스 로직과 데이터베이스를 다루는 코드를 분리하여 데이터베이스에 저장하는 코드는 &lt;code&gt;PostRepository&lt;/code&gt; 에 대행시킬 것입니다.&lt;/p&gt;
&lt;figure class=&#34;highlight golang&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; PostRepository &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  StorePost(Post) &lt;span class=&#34;keyword&#34;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/2020/08/21/Go-wire-dependency-injection-tutorial/architecture.jpg&#34; alt=&#34;Architecture&#34; /&gt;&lt;/p&gt;
&lt;p&gt;즉 보시다싶이 &lt;code&gt;PostService&lt;/code&gt; 가 &lt;code&gt;PostRepository&lt;/code&gt; 에 의존하고 있습니다.&lt;br /&gt;
그러면 &lt;code&gt;PostService&lt;/code&gt; 를 생성하기 위해 다음과 같은 코드를 작성할 것입니다.&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;NewPostService&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(repo PostRepository)&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;PostService&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;amp;postService&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		Repo: repo,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;이게 Dependency Injection 입니다. 이때 만약 Postgres가 아니라 Sqlite 나 심지어 메모리에 저장하고 싶으면 어떻게 될까요? 그에 해당하는 PostRepository 객체를 바꿔껴주기만 하면 됩니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/08/21/Go-wire-dependency-injection-tutorial/different_repository.svg&#34; alt=&#34;InMemoryPostRepository&#34; /&gt;&lt;/p&gt;
&lt;p&gt;이렇게 의존성이 간단하면 Dependency Injection 프레임워크가 없더라도 손으로 Dependency Injection 설계도 가능합니다. 하지만 이렇게 의존하는 서비스가 많아진다면?&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;NewPostService&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(someService SomeService, otherService OtherService, repo PostRepository, ...)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// main.go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  otherSerivce := NewOtherService(&lt;span class=&#34;string&#34;&gt;&amp;quot;secret&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  someService := NewSomeService(otherService)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  postRepository := NewPostRepository(&lt;span class=&#34;string&#34;&gt;&amp;quot;dburl&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  potService := NewPostService(someService, otherService, postRepository)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;일일히 손으로 바꿔주는게 매우 귀찮고 손이 많이갑니다. 순서도 맞춰줘야 되고 argument 위치나 귀찮은게 한두가지가 아닙니다. 이걸 자동으로 해주는 것이 바로 Dependency Injection Framework 이고 Go 에서는 &lt;a href=&#34;https://github.com/google/wire&#34;&gt;wire&lt;/a&gt; 와 &lt;a href=&#34;https://github.com/uber-go/fx&#34;&gt;fx&lt;/a&gt; 가 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;준비물&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#준비물&#34;&gt;&lt;/a&gt; 준비물&lt;/h2&gt;
&lt;p&gt;여기서는 구글의 &lt;a href=&#34;https://github.com/google/wire&#34;&gt;wire&lt;/a&gt; 를 사용하도록 하겠습니다.&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;go get github.com/google/wire/cmd/wire&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;프로젝트-구조&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#프로젝트-구조&#34;&gt;&lt;/a&gt; 프로젝트 구조&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── cmd&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│   └── server.go&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── go.mod&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── go.sum&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── module&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│   └── wire.go&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;└── post&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ├── postrepository.go&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    └── postservice.go&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3 directories, 6 files&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;각 &lt;code&gt;postservice.go&lt;/code&gt; 와 &lt;code&gt;postrepository.go&lt;/code&gt; 파일은 이전에서 본것과 동일합니다.&lt;/p&gt;
&lt;figure class=&#34;highlight golang&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// postservice.go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; post&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// (skip)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// PostService 를 생성하는 factory function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;NewPostService&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(repository PostRepository)&lt;/span&gt; *&lt;span class=&#34;title&#34;&gt;PostService&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;amp;PostService&amp;#123;Repo: repository&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight golang&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// postrepository.go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; post&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; PostRepository &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	StorePost(Post) &lt;span class=&#34;keyword&#34;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; InMemoryPostRepository &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cache &lt;span class=&#34;keyword&#34;&gt;map&lt;/span&gt;[&lt;span class=&#34;keyword&#34;&gt;string&lt;/span&gt;]Post&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(i *InMemoryPostRepository)&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;StorePost&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(post Post)&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;bool&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	i.cache[post.id] = post&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 인메모리 포스트리포지토리를 생성하는 팩토리 함수&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;NewInMemoryPostRepository&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;PostRepository&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;amp;InMemoryPostRepository&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;이제 &lt;code&gt;module/wire.go&lt;/code&gt; 파일은 다음과 같습니다.&lt;/p&gt;
&lt;figure class=&#34;highlight golang&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//+build wireinject  &amp;lt;--- 매우 중요&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; module&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;example/post&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;github.com/google/wire&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;InitializePostService&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; *&lt;span class=&#34;title&#34;&gt;post&lt;/span&gt;.&lt;span class=&#34;title&#34;&gt;PostService&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	wire.Build(post.NewInMemoryPostRepository, post.NewPostService) &lt;span class=&#34;comment&#34;&gt;// &amp;lt;-- Factory 함수들&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;amp;post.PostService&amp;#123;&amp;#125; &lt;span class=&#34;comment&#34;&gt;// &amp;lt;-- Return Type을 마추기 위한 더미로 중요하지 않음&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;이제 shell 에서 &lt;code&gt;wire&lt;/code&gt; 커맨드를 치면 코드가 생성이 됩니다.&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;wire module/wire.go&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;아래는 생성된 코드입니다. &lt;code&gt;PostRepository&lt;/code&gt; 와 &lt;code&gt;PostService&lt;/code&gt; 가 올바른 순서로 생성된 것을 볼 수 있습니다.&lt;/p&gt;
&lt;figure class=&#34;highlight golang&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;InitializePostService&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; *&lt;span class=&#34;title&#34;&gt;post&lt;/span&gt;.&lt;span class=&#34;title&#34;&gt;PostService&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	postRepository := post.NewInMemoryPostRepository()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	postService := post.NewPostService(postRepository)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; postService&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;자세한 내용은 &lt;a href=&#34;https://bit.ly/2Sqdnws&#34;&gt;https://bit.ly/2Sqdnws&lt;/a&gt; 에 참여하셔서 문의주세요 😄&lt;/p&gt;
</content>
        <category term="Mo Kweon" />
        <category term="go" />
        <category term="golang" />
        <category term="dependency injection" />
        <category term="wire" />
        <category term="uber-go" />
        <category term="fx" />
        <updated>2020-08-21T15:15:25.000Z</updated>
    </entry>
    <entry>
        <id>https://deepbaksu.github.io/2020/08/17/slack-bot/</id>
        <title>슬랙봇 Distribute 가능하게 만들기 (OAuth)</title>
        <link rel="alternate" href="https://deepbaksu.github.io/2020/08/17/slack-bot/"/>
        <content type="html">&lt;p&gt;딥백수에는 여러 슬랙봇들이 상주하고 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/08/17/slack-bot/timebot_demo.png&#34; alt=&#34;캘리포니아/한국 시간 변환해주는 timebot&#34; /&gt;&lt;/p&gt;
&lt;p&gt;이렇게 만들어 둔 봇이 유용해서 다른 슬랙 workspace 에서 사용하고 싶을 때가 있습니다. 그러기 위해 distribute 가능하게 봇을 작성해야 합니다. 그러기 위해 OAuth를 사용해야 합니다.&lt;/p&gt;
&lt;h2 id=&#34;oauth-란&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#oauth-란&#34;&gt;&lt;/a&gt; OAuth 란?&lt;/h2&gt;
&lt;p&gt;OAuth는 엑세스를 관리하는 방법중에 표준으로 사용되는 방법입니다. A라는 애플리케이션에서 B사이트의 유저 정보가 필요하다면 B사이트로 OAuth Request 를 보내는 방식입니다.&lt;/p&gt;
&lt;p&gt;여기서 슬랙봇이 A 애플리케이션이고 슬랙이 B에 해당합니다.&lt;/p&gt;
&lt;h2 id=&#34;실제-slack-작동-구조&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#실제-slack-작동-구조&#34;&gt;&lt;/a&gt; 실제 Slack 작동 구조&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://a.slack-edge.com/fbd3c/img/api/articles/oauth_scopes_tutorial/slack_oauth_flow_diagram.png&#34; alt=&#34;OAuth&#34; /&gt;&lt;/p&gt;
&lt;p&gt;위 그림에서 구현해야 될게 많은 것으로 보이지만 실제로 &lt;code&gt;GET /api/oauth?code=XXXXX&lt;/code&gt; 엔드포인트를 서버에 만들어주고 토큰을 저장할 데이터베이스만 있으면 완성입니다.&lt;/p&gt;
&lt;p&gt;예를 들어, 유저가 &lt;a href=&#34;https://slack.com/oauth/v2/authorize?client_id=288745980535.515443770183&amp;scope=channels:history,channels:join,channels:read,chat:write,chat:write.customize,chat:write.public,commands,dnd:read,emoji:read,groups:history,groups:read,groups:write,im:history,im:read,im:write,links:read,links:write,mpim:history,mpim:read,mpim:write,pins:read,pins:write,reactions:read,reactions:write,reminders:read,reminders:write,remote_files:read,remote_files:share,remote_files:write,team:read,usergroups:read,usergroups:write,users.profile:read,users:read,users:read.email,users:write,app_mentions:read&amp;user_scope=&#34;&gt;&lt;img alt=&#34;Add to Slack&#34; height=&#34;40&#34; width=&#34;139&#34; src=&#34;https://platform.slack-edge.com/img/add_to_slack.png&#34; srcSet=&#34;https://platform.slack-edge.com/img/add_to_slack.png 1x, https://platform.slack-edge.com/img/add_to_slack@2x.png 2x&#34; /&gt;&lt;/a&gt; 이 버튼을 누르고 동의를 하게 되면 timebot 서버로 GET /api/oauth?code=XXXX 리퀘스트를 보내게 됩니다. (step 2 에 해당)&lt;/p&gt;
&lt;p&gt;그럼 이 code=XXX 를 사용하여 슬랙 서버에 OAuth 요청을 보내고(step 3) 받은 토큰을 데이터베이스에 저장해주면 됩니다 (step 4).&lt;/p&gt;
&lt;p&gt;수도 코드는 아래와 같이 되어 있습니다.&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OauthHandler&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(writer http.ResponseWriter, request *http.Request)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// GET ?code=XXXX 읽음&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  code, ok := request.URL.Query()[&lt;span class=&#34;string&#34;&gt;&amp;quot;code&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// CODE를 보냄 (POST https://api.slack.com/methods/oauth.v2.access)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  resp, err := getOAuthV2Response(slackClientId, slackClientSecret, code[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// TeamID 및 AccessToken 저장&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  store(resp.TeamID, resp.AccessToken)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// ... send ok response&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;POST https://api.slack.com/methods/oauth.v2.access&lt;/code&gt; 의 예시 response&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;ok&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;access_token&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;xoxb-17653672481-19874698323-pdFZKVeTuE8sk7oOcBrzbqgy&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;token_type&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;bot&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;scope&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;commands,incoming-webhook&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;bot_user_id&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;U0KRQLJ9H&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;app_id&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;A0KRD7HC3&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;team&amp;quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;Slack Softball Team&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;T9TK3CUKW&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;enterprise&amp;quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;slack-sports&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;E12345678&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;authed_user&amp;quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;U1234&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;scope&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;chat:write&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;access_token&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;xoxp-1234&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;token_type&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;이때 TeamID(workspace) 와 코드를 함께 저장해주면 나중에 유저 메시지로부터 반응하는 봇을 만들때 유저 메시지에 포함된 TeamID를 읽어 Access Token 을 DB에서 불러오는 식으로 사용합니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/08/17/slack-bot/timebot_sequential.svg&#34; alt=&#34;timebot 순서도&#34; /&gt;&lt;/p&gt;
&lt;p&gt;자세한 내용은 &lt;a href=&#34;https://bit.ly/2Sqdnws&#34;&gt;https://bit.ly/2Sqdnws&lt;/a&gt; 에 참여하셔서 문의주세요 😄&lt;/p&gt;
</content>
        <category term="Mo Kweon" />
        <category term="go" />
        <category term="slack" />
        <category term="bot" />
        <category term="oauth" />
        <updated>2020-08-17T08:32:54.000Z</updated>
    </entry>
    <entry>
        <id>https://deepbaksu.github.io/2020/08/17/bitcoin-imperialism/</id>
        <title>Retro 대항해시대 - 비트코인 제국주의</title>
        <link rel="alternate" href="https://deepbaksu.github.io/2020/08/17/bitcoin-imperialism/"/>
        <content type="html">&lt;h2 id=&#34;제국과-전쟁&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#제국과-전쟁&#34;&gt;&lt;/a&gt; 제국과 전쟁&lt;/h2&gt;
&lt;p&gt;책 제목에 있는 &#39;제국주의’라는 단어를 보고 거부감이 들 수도 있을 것 같다. 하지만 시장에서 치열하게 경쟁하는 기업들의 분투를 &#39;전쟁’이라고 표현하고, 세계 패권국의 지위를 놓고 미국과 중국이 경쟁하는 걸 보며 &#39;무역전쟁’이라고 표현하는 걸 인정한다면, &#39;제국주의’라는 말은 현실을 적나라하게 표현했다는 의미로 이해할 수 있다.&lt;/p&gt;
&lt;p&gt;전쟁은 본래 누가하는 건가? 맞다. 영토를 넓히고 싶은 제국의 황제가 하는 일이다. &lt;strong&gt;이 책은 패권전쟁에 관한 이야기&lt;/strong&gt;다. 그 패권의 중심에 비트코인이 있다.&lt;/p&gt;
&lt;p&gt;의아할 수 있다. &lt;strong&gt;17년에 광풍이 일었던 그 비트코인?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;맞다. 그 비트코인이다. 그 비트코인을 둘러싸고 전 세계 시장에서 힘 깨나 쓴다는 야수들은 어떻게 자신의 영토를 늘리고 깃발을 꽂을지 다른 야수들을 어떻게 제압할지 전략을 짜고 있다. 다만 우리에게 보이지 않게 감추고 있을 뿐이다. 그리고 그 야수들에겐 목줄이 달려 있는데 거기엔 어느 나라 야수인지 적혀있다. 즉, 이건 단순히 기업들간의 경쟁이 아닌 국가간의 경쟁이라는 얘기다.&lt;/p&gt;
&lt;p&gt;이상하다.&lt;/p&gt;
&lt;p&gt;얼핏 유튜브에서 본 영상에서 블록체인은 &#39;탈중앙화’를 지향하고 중앙권력을 해체하고 사회를 더욱 투명하게 만든다고 한 것 같았는데, 중앙권력이 나서서 인프라를 깔고 경쟁을 하고 있다.&lt;/p&gt;
&lt;p&gt;말이 아닌 행동을 봐야 한다. 왜 그렇게 지원을 하고 경쟁을 할까? 사회를 더욱 투명하게 만들기 위해서? 좋은 세상을 만들기 위해?&lt;/p&gt;
&lt;p&gt;당연히 그럴일은 없다.&lt;br /&gt;
야수에게 피냄새가 나면 반응하듯, 기업에겐 돈냄새를 정부에겐 통제의 수단을 제공하기 때문에 반응할 뿐이다.&lt;/p&gt;
&lt;p&gt;무슨 말이냐고?&lt;/p&gt;
&lt;p&gt;이 책 83~84페이지를 보자.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;강조하고 싶은 것은 비트코인 암호화 기술의 원천이 NSA라는 점이다. 비트코인의 SHA-256 해시 알고리즘은 NSA가 고안한 것이다. 최초의 인터넷이 미국이 만든 군사적 목적의 네트워크였듯이, 비트코인도 미국 정보기관의 암호화 기술에 그 뿌리를 두고 있다. 게다가 세간의 오해와는 달리 비트코인은 익명성이 거의 없을뿐더러 정보기관의 감시에 턱없이 취약하다. NSA의 내부 고발자 스노든은 비트코인의 지나친 투명성 신화에 대해 다음과 같이 말한 바 있다. “모든 사람들이 비트코인의 제한적인 거래 처리 능력에 집중하고 있는데 이는 비트코인의 주요한 결함이 맞다. 그러나 나는 비트코인의 훨씬 구조적이고 심각한 결함은 공개 장부라고 생각한다.”&lt;/p&gt;
&lt;p&gt;실제로 NSA는 일찍이 비트코인을 주목해왔다. 스노든이 유출한 기밀문서에 의하면, NSA는 2013년 이후 &#39;오크스타OAKSTAR’라는 코드명으로 비트코인 네트워크 참여자들을 감시했고 오크스타의 하위 프로그램인 &#39;몽키로켓MONKEYROCKET’은 네트워크 장비를 이용해 유럽, 중동, 아시아, 중남미에서 데이터를 수집했다. 즉, NSA는 비트코인으로 거래를 주고받는 사람들의 신원뿐 아니라 이들의 비밀번호 정보, 인터넷 활동, MAC 주소 등을 파악할 수 있는 것이다. 전 세계적으로 비트코인 관련 거래소를 통제하고 KYC/AML(Know Your Customer - 고객 신원 확인 /Anti Money Laundering - 자금 세탁 방지)을 강화하는 추세인데, 이렇게 되면 NSA는 전 세계 비트코인의 흐름을 추적하고 이와 연관된 사람들을 감시 및 통제할 수 있는 권한을 얻게 되는 셈이다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;그토록 강조한 &#39;탈중앙화’의 이상은 어디로 갔을까? 이 책의 저자는 단언한다. 그런거 없다고. 하지만 이상점이 사라졌다 해서 외면할 순 없다. 아니 그래선 안된다.&lt;/p&gt;
&lt;h2 id=&#34;비트코인은-둥글다&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#비트코인은-둥글다&#34;&gt;&lt;/a&gt; 비트코인은 둥글다&lt;/h2&gt;
&lt;p&gt;지구는 평평한가 아니면 둥근가? 너무 바보같은 질문이라 여기겠지만 이 질문으로 인해 수많은 사람들이 살육을 당하고 역사는 새로운 흐름으로 전개되었다. 원주민들에게 총쏘고 깃발만 꽂으면 새로운 땅을 얻을 수 있다는 소문은 수많은 사람들 속에 내재된 야망을 자극했다. 당연히 그 소식은 지배층이 가장 먼저 접했다. 그리고 지배층은 당연히 깃발을 더 많이 꽂기 위해 선단을 꾸렸다.&lt;/p&gt;
&lt;p&gt;하지만 일반 사람들에겐 머나먼 얘기였다. 정보와 자본이 없었기 때문이다. 그들에겐 그저 떠도는 소문일 뿐 실제하지 않는 세상이었고 그들에게 지구는 계속 평평했다.&lt;/p&gt;
&lt;p&gt;인류는 이런 대항해시대를 거치며 지구에 있는 모든 곳을 알아보고 개발했다. 단순히 개발한 것 뿐만 아니라 인공위성을 날려 24시간 감시까지 진행했다. 그럼에도 인류에겐 계속해서 새로운 개척지가 필요했다. 그리고 이 새로운 개척지가 비트코인이다.&lt;/p&gt;
&lt;p&gt;선릉역에서 흔히 볼 수 있는 알트코인 사기꾼 업자도, 리브라를 만든다는 페이스북의 저커버그도, 이젠 없어선 안될 카카오톡의 카카오 그라운드X도 이 개척지에 깃발을 꽂으려 하고 있다.&lt;/p&gt;
&lt;p&gt;이 깃발꽂기의 경쟁자는 단지 여기에 머물지 않는다.&lt;/p&gt;
&lt;p&gt;공부를 할 때도, 데이트를 할 때도, 업무상 미팅을 할 때 커피를 열심히 대접해주던 스타벅스가 군침을 흘리고 있고, 맥북과 앱스토어로 익숙한 애플이 군침을 흘리고 있다. 마이크로소프트는? 구글은? 당연한걸 묻지 말자.&lt;/p&gt;
&lt;p&gt;한 마디로 정리해서 모두 군침을 흘리고 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;지금 이 시대에 비트코인은 대항해시대다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/08/17/bitcoin-imperialism/hanghae.jpg&#34; alt=&#34;대항해시대 - 출처 넷마블&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;제국의-관점으로-봐야-보인다&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#제국의-관점으로-봐야-보인다&#34;&gt;&lt;/a&gt; 제국의 관점으로 봐야 보인다&lt;/h2&gt;
&lt;blockquote&gt;&lt;p&gt;누군가를 비판하고 싶을 때는 이 점을 기억해두는 게 좋을 거다. 세상의 모든 사람이 다 너처럼 유리한 입장에 서 있지는 않다는 것을&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;스콧 피츠제럴드&lt;/strong&gt;&lt;cite&gt;위대한 개츠비&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;p&gt;우리는 너무 당연하게 체크카드나 신용카드로 결제한다.&lt;/p&gt;
&lt;p&gt;2020년 3월 10일 한은이 발간한 보고서에 따르면 설문조사 응답자의 97.9%가 예금계좌를 보유하고 있고, 신용카드는 81.3%, 체크(직불)카드는 68.8%를 보유하고 있다고 한다. 이런 우리의 맥락으로만 보면 왜 비트코인이 대항해시대라고 할 수 있는지 공감할 수 없다.&lt;/p&gt;
&lt;p&gt;정말 제대로 보고 싶다면 제국의 시선으로 넓게 봐야 한다.&lt;/p&gt;
&lt;p&gt;책 173~174페이지를 보자.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;전 세계 17억 명은 은행 계좌가 없고 이 중 약 67퍼센트는 모바일 기기를 사용한다. 은행 인프라가 낙후된 곳은 법정 화폐 가치 또한 불안정해서 비트코인의 인기가 높다. 따라서 중남미, 동남아, 아프리카는 스타벅스의 먹잇감이 되기 쉬운 상황이다. 실제로 스타벅스는 2018년 10월 아르헨티나 현지 은행 방코 갈리시아와 파트너십을 맺고 스타벅스 은행 지점을 오픈했다. 물론 비트코인 이야기는 쏙 빼고 고객의 경험, 편의 같은 이야기를 하면서 말이다. 아르헨티나는 베네수엘라와 더불어 비트코인의 인기가 높은 나라 중 하나다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;제국의 시선은 한 지역에 머물지 않는다. 제국이 하는 행위를 세계경영이라고 하지 않나. 좁은 관점을 버리고 멀리 볼 필요가 있다. 그래야 생존전략이 보인다. 좋든 싫든 이들이 한 번 흐름을 만들고 표준을 만들면 그 표준을 따라야 한다. 특히 한번 표준이 설정되고 그 경로를 따라 발전하다보면 거기에 의존성이 생겨 다른 방향으로 바꾸기는 거의 불가능하다. 경제추격론에서 말하는 경로의존성이 있기 때문이다.&lt;/p&gt;
&lt;p&gt;만약 이런 제국의 관점과 생존전략이 궁금하다면 이 책을 읽기를 추천하고 싶다.&lt;/p&gt;
</content>
        <category term="Jinyoung Song" />
        <category term="비트코인" />
        <category term="제국주의" />
        <category term="미래전망" />
        <category term="플랫폼전략" />
        <category term="디지털자산" />
        <updated>2020-08-17T07:40:20.000Z</updated>
    </entry>
    <entry>
        <id>https://deepbaksu.github.io/2020/08/16/jonber/</id>
        <title>딥백수 그리고 존버</title>
        <link rel="alternate" href="https://deepbaksu.github.io/2020/08/16/jonber/"/>
        <content type="html">&lt;h2 id=&#34;첫-만남&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#첫-만남&#34;&gt;&lt;/a&gt; 첫 만남&lt;/h2&gt;
&lt;p&gt;딥백수와 함께한지 2년정도 된거 같네요.&lt;br /&gt;
2년전 서울에 올라와 고시원에 살며 어떻게 적응해야할지 잘 모를 때 딥백수를 처음으로 만나게 되었어요.&lt;/p&gt;
&lt;p&gt;사실 저는 딥백수와 어울리는 사람은 아니었어요.&lt;br /&gt;
딥러닝은 고사하고, 코딩의 ㅋ자도 모르고(지금도 그렇지만), 경영학을 전공한 문과 of 문과였거든요.&lt;br /&gt;
그런데 무슨 바람이 불었는지 딥백수 슬랙에 들어왔고 참여하고 싶다고 얘기를 했어요.&lt;/p&gt;
&lt;p&gt;그리고 진우님이 직접 커피한잔 사주시면서 딥백수의 철학(&lt;a href=&#34;https://www.slideshare.net/CurtPark1/agile-102881026&#34;&gt;https://www.slideshare.net/CurtPark1/agile-102881026&lt;/a&gt;) 에 대해서 설명해주셨죠.&lt;br /&gt;
당시엔 진우님이 갭이어(Gap-year)를 가지고 계시던 시기라 가능했던 즐거운 얘기였어요.&lt;/p&gt;
&lt;p&gt;그렇게 아무것도 모르던 문돌이가 엔지니어들과 함께 이야기하고 성장하면서 조금씩 개발에 관심을 갖게 되었어요.&lt;/p&gt;
&lt;h2 id=&#34;느슨하지만-끈끈한-관계&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#느슨하지만-끈끈한-관계&#34;&gt;&lt;/a&gt; 느슨하지만 끈끈한 관계&lt;/h2&gt;
&lt;p&gt;딥백수는 슬랙으로 소통하는 단체이기에 느슨한 관계라고 할 수 있어요.&lt;br /&gt;
하지만 힘들 때 할 수 있는만큼의 도움을 주고 받으며 관계를 쌓아나가다보니 느슨하지만 끈끈한 관계가 되더군요.&lt;/p&gt;
&lt;p&gt;사실 딥백수에 처음왔을 때 저는 어떤 직업을 선택할지 어떻게 해야할지 전혀 갈피조차도 못잡고 있던 시절이었어요. 그런 제게 딥백수 멤버들이 사준 식사와 커피 그리고 정보와 조언은 정말 큰 힘이 됐죠.&lt;/p&gt;
&lt;p&gt;생활코딩 페이스북을 보다보면 하루에 1번은 빠지지 않고 올라오는 질문 중 하나가&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;“비전공자인데 어떻게 해야 개발자가 될 수 있을까요?”&lt;br /&gt;
“비전공자인데 어떻게 해야 분석가가 될 수 있을까요?”&lt;br /&gt;
“비전공자인데 어떤 커리큘럼/책으로 공부해야 할까요?”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;와 같은 방향설정 질문이에요.&lt;/p&gt;
&lt;p&gt;방향설정 질문에 대한 답은 한 번으로 끝날 수가 없어요. 하다보면 또 방황하거든요.&lt;br /&gt;
꾸준한 관찰과 피드백이 필요한데 딥백수에선 그 점에서 꾸준히 관계를 맺으며 피드백을 받을 수 있었죠.&lt;/p&gt;
&lt;p&gt;지금 생각해보면 정말 큰 행운이었다고 생각해요.&lt;br /&gt;
그리고 이젠 저도 조금씩 나눔을 하고 있어요. 그렇게 딥백수 멤버들도, 저도 모두 관계속에서 성장해 나가고 있어요.&lt;/p&gt;
&lt;h2 id=&#34;존버-그리고-딥백수&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#존버-그리고-딥백수&#34;&gt;&lt;/a&gt; 존버 그리고 딥백수&lt;/h2&gt;
&lt;p&gt;존버가 답이라는 건 이미 워렌 버핏까지 말을 할 정도인 명제죠 (농담).&lt;br /&gt;
&lt;img src=&#34;/2020/08/16/jonber/jonber.jpeg&#34; alt=&#34;Jonber Picture&#34; /&gt;&lt;/p&gt;
&lt;p&gt;하지만 인간은 그리 강한 존재가 아니라고 저는 생각해요.&lt;br /&gt;
사람에 따라 어느정도 차이가 있겠지만 아무리 강인한 사람이더라도 혼자서 모든 걸 짊어질 순 없다고 생각하거든요.&lt;/p&gt;
&lt;p&gt;존버하더라도 더 나은 방향, 좀 더 효과적인 존버를 하기 위해선 연결망이 필요하고 딥백수는 충분히 그 역할을 해내고 있다고 생각해요.&lt;/p&gt;
&lt;p&gt;결국 힘든 사람들끼리 ‘함께’ 존버하는 것.&lt;br /&gt;
그게 딥백수에 있는 멤버들의 목표가 아닐까 생각합니다.&lt;/p&gt;
&lt;p&gt;이런 딥백수에 함께 하고 싶은 분은&lt;br /&gt;
&lt;a href=&#34;https://bit.ly/2Sqdnws&#34;&gt;https://bit.ly/2Sqdnws&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;이 곳으로 함께 해주세요.&lt;br /&gt;
감사합니다.&lt;/p&gt;
</content>
        <category term="Jinyoung Song" />
        <category term="존버" />
        <category term="jonber" />
        <category term="딥백수" />
        <category term="회고" />
        <updated>2020-08-16T07:06:38.000Z</updated>
    </entry>
    <entry>
        <id>https://deepbaksu.github.io/2020/08/15/cqrs/</id>
        <title>Command Query Responsibility Segregation</title>
        <link rel="alternate" href="https://deepbaksu.github.io/2020/08/15/cqrs/"/>
        <content type="html">&lt;p&gt;제가 서비스를 만들 때 가장 좋아하는 패턴인 &lt;abbr title=&#34;Command Query Responsibility Segregation&#34;&gt;CQRS&lt;/abbr&gt; 에 대해서 적어보겠습니다.&lt;/p&gt;
&lt;h2 id=&#34;cqrs란&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cqrs란&#34;&gt;&lt;/a&gt; CQRS란?&lt;/h2&gt;
&lt;p&gt;원 단어를 보면 어려우 것 같지만 쉽게 얘기하면 &lt;code&gt;read&lt;/code&gt; 와 &lt;code&gt;write&lt;/code&gt; operation 을 나누어서 서비스를 만드는 것을 의미합니다. 특히 일반적으로 event sourcing 과 함께 구현됩니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/08/15/cqrs/cqrs_diagram.svg&#34; alt=&#34;CQRS Diagram&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;왜-사용하는가&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#왜-사용하는가&#34;&gt;&lt;/a&gt; 왜 사용하는가?&lt;/h2&gt;
&lt;p&gt;쓰는 작업과 읽는 작업이 분리가 되있을 경우 (많은 서비스가 그러합니다) 한 서비스에서 둘다 처리할 경우 유용합니다. 만약에 한 서비스에서 처리하는데 쓰는 작업에 어떤 문제가 발생할 경우 읽는 작업 또한 불가능해지게 될 것입니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/08/15/cqrs/dead_cqrs.svg&#34; alt=&#34;Dead Service Monolithic&#34; /&gt;&lt;/p&gt;
&lt;p&gt;또 쓰는 작업은 트래픽의 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;0.01&lt;/mn&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;%&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;0.01\%&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.80556em;vertical-align:-0.05556em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 정도 밖에 안되고 읽는 서비스가 대부분의 트래픽을 차지할 수 도 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;예시&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#예시&#34;&gt;&lt;/a&gt; 예시&lt;/h2&gt;
&lt;p&gt;CQRS 을 &lt;a href=&#34;https://youtube.com/premium&#34;&gt;YouTube Premium&lt;/a&gt; 서비스를 사용해 예시를 들어보도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.gstatic.com/youtube/img/promos/growth/ytr_lp2_logo_premium_desktop_552x71.png&#34; alt=&#34;YouTube Premium&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;functional-requirements&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#functional-requirements&#34;&gt;&lt;/a&gt; Functional Requirements&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;유저는 Youtube Premium 을 signup 할 수 있습니다.&lt;/li&gt;
&lt;li&gt;YouTube Premium 유저는 광고를 스킵합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위 요구사항을 통해 다음과 같이 두개의 서비스로 나타낼 수 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Premium Service
&lt;ul&gt;
&lt;li&gt;실제 Premium 회원 가입을 받는 서비스&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Premium Access Service
&lt;ul&gt;
&lt;li&gt;Premium Access 를 가진 유저인지 확인하는 서비스&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/2020/08/15/cqrs/premium_service.svg&#34; alt=&#34;Premium Service Diagram&#34; /&gt;&lt;/p&gt;
&lt;p&gt;어느 날 무슨 이유로 Premium Service 가 다운 됬을 경우에도 기존의 Premium User들은 아무 문제 없이 광고 없이 동영상 시청이 가능합니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/08/15/cqrs/premium_service_down.svg&#34; alt=&#34;Premium Service is down&#34; /&gt;&lt;/p&gt;
&lt;p&gt;실제로도 이런 CQRS 패턴을 사용해 구현되어 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;sync&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sync&#34;&gt;&lt;/a&gt; Sync&lt;/h2&gt;
&lt;p&gt;그럼 이제 문제는 Query의 DB와 Command를 받는 DB의 consistency 를 어떻게 유지하는지가 관건일 것입니다. 이 문제는 &lt;a href=&#34;https://microservices.io/patterns/data/event-sourcing.html&#34;&gt;event sourcing&lt;/a&gt; 패턴을 사용합니다. 이벤트소싱에 대해서는 다음 포스트에서 쓰도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;오신 김에 딥백수 그룹에 관심 있으신 분들은 &lt;a href=&#34;/about&#34;&gt;소개 페이지&lt;/a&gt; 를 방문해주세요!&lt;/p&gt;
</content>
        <category term="Mo Kweon" />
        <category term="microservice" />
        <category term="CQRS" />
        <category term="architecture" />
        <category term="software engineering" />
        <updated>2020-08-15T11:56:22.000Z</updated>
    </entry>
</feed>

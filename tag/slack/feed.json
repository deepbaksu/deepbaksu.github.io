{
    "version": "https://jsonfeed.org/version/1",
    "title": "딥백수 • All posts by \"slack\" tag",
    "description": "우리는 '지속가능한 백수질'을 지향합니다. 고로 외롭게 공부하고 있을 당신을 응원합니다. 딥러닝에 관련된 글 뿐만 아니라, 백수생활의 넋두리도 환영합니다.",
    "home_page_url": "https://deepbaksu.github.io",
    "items": [
        {
            "id": "https://deepbaksu.github.io/2020/09/18/slack-github-action-automation/",
            "url": "https://deepbaksu.github.io/2020/09/18/slack-github-action-automation/",
            "title": "GitHub Action을 이용한 알림 자동화",
            "date_published": "2020-09-18T14:54:37.000Z",
            "content_html": "<h2 id=\"1-why-did-i-do-this\"><a class=\"markdownIt-Anchor\" href=\"#1-why-did-i-do-this\"></a> 1. Why did I do this?</h2>\n<p>간단합니다. 회사 슬랙에 과제 알림을 자동화시키고 싶었기 때문입니다. 어떻게 해야 하는지 알기 위해 시중에 나온 자동화 관련 책들을 펼쳤습니다. 크롤러 만드는 방법과 crontab에 대해서 설명을 잘해주었지만 문제가 있었죠. 제가 따로 쓸 만한 서버가 없었습니다. 기본적으로 자동화는 24시간 돌아가는 서버를 통해서 진행하는 경우가 많습니다. 그렇다고 간단한 알림을 가지고 클라우드로 돌리긴 좀 손이 가질 않았습니다. 즉, 돈을 들이지 않고 자동화를 시키고 싶었습니다.</p>\n<p>그러던 중 어떤 생각 하나가 떠올랐습니다.</p>\n<p>지금 제가 이 글을 쓰고 있는 딥백수 블로그는 Branch를 나누고 GitHub Action을 format check이라든지 테스트를 자동화하는데, GitHub Action을 통해서 제가 가진 문제를 해결할 수 있을 거라고 생각했습니다.</p>\n<p>다행히 GitHub Action에 익숙한 Mo Kweon님이 계시기에 페어 프로그래밍을 하면서 하나하나 가르쳐주셨습니다. 다른 분께 배운 지식이기에 당연히 나눠야 한다고 생각했고 이 글을 쓰며 혹시 비슷한 고민을 하시는 분께 매뉴얼이 되었으면 합니다.</p>\n<h2 id=\"2-make-a-crawler\"><a class=\"markdownIt-Anchor\" href=\"#2-make-a-crawler\"></a> 2. Make a Crawler</h2>\n<p>크롤러는 만드셨다고 가정하겠습니다.</p>\n<h2 id=\"3-make-a-slack-channel\"><a class=\"markdownIt-Anchor\" href=\"#3-make-a-slack-channel\"></a> 3. Make a Slack Channel</h2>\n<p>알림을 받을 슬랙 채널을 만들어줍니다. 테스트해야 하는 채널이기 때문에 다른 슬랙 멤버들이 메시지 수신을 하지 않도록 혼자만의 채널에서 테스트하시는 걸 권합니다. 저는 alert라는 채널을 만들었습니다.</p>\n<p><img src=\"/2020/09/18/slack-github-action-automation/create_slack_channel.jpg\" alt=\"슬랙 채널 생성\" /></p>\n<h2 id=\"4-make-a-slack-app\"><a class=\"markdownIt-Anchor\" href=\"#4-make-a-slack-app\"></a> 4. Make a Slack App</h2>\n<p>이제 슬랙 알림을 위한 설정을 들어가야 합니다. 아래 사진처럼 하늘색 동그라미를 쳐놓은 버튼을 클릭해주세요.</p>\n<p><img src=\"/2020/09/18/slack-github-action-automation/slack_setting.jpg\" alt=\"Slack Setting\" /></p>\n<p>들어가 보면 다음과 같은 페이지에 접속되실 겁니다. 하늘색 동그라미를 쳐놓은 검색창에 webhook이라고 입력해준 뒤 검색해주세요.</p>\n<p><img src=\"/2020/09/18/slack-github-action-automation/slack_app_directory.jpg\" alt=\"Slack App directory\" /></p>\n<p>그러면 다음과 같이 결과 창이 뜰 텐데 하늘색 동그라미를 쳐놓은 Incoming Webhooks를 클릭해주세요.</p>\n<p><img src=\"/2020/09/18/slack-github-action-automation/result_search_webhooks.jpg\" alt=\"Result Searching webhooks\" /></p>\n<p>그럼 다음과 같이 Webhooks에 대한 소개를 보실 수 있습니다. JSON을 사용해서 POST 하는군요.(크롤러에서 JSON으로 데이터를 보내줘야 한다는 의미입니다) 당연히 Add 해줘야겠죠?</p>\n<p><img src=\"/2020/09/18/slack-github-action-automation/incoming_webhooks.jpg\" alt=\"Incoming Webhooks\" /></p>\n<p>어떤 채널에 메시지를 보낼지 설정을 해줘야 합니다. 이전에 만들었던 채널을 설정해준 뒤 Add 해줍니다.</p>\n<h2 id=\"5-configure-webhooks\"><a class=\"markdownIt-Anchor\" href=\"#5-configure-webhooks\"></a> 5. Configure Webhooks</h2>\n<p><img src=\"/2020/09/18/slack-github-action-automation/webhooks_configuration.jpg\" alt=\"Webhooks Configuration\" /></p>\n<p>그러면 다음과 같이 Setup Instructions 화면이 출력되는데 여기에 가장 중요한 Webhook URL이 있습니다. 이 URL에 JSON 데이터를 보내면 우리가 원하는 대로 메시지가 슬랙 채널에 전송된다는 의미입니다.</p>\n<p><img src=\"/2020/09/18/slack-github-action-automation/webhooks_setup_instructions.jpg\" alt=\"Webhooks Setup Instructions\" /></p>\n<p>당연히 이 Webhook URL이 다른 사람에게 알려지면 안 되겠죠?</p>\n<p>화면을 아래로 쭉 내려보면 Example이라고 해서 어떻게 데이터가 Posting 되는지 시험해볼 수 있는 API가 있습니다.</p>\n<p><img src=\"/2020/09/18/slack-github-action-automation/webhooks_example.jpg\" alt=\"Webhooks Example\" /></p>\n<p>한번 시험해볼까요? 해당 코드를 복사한 뒤 터미널 창에 붙여넣기 해보겠습니다. 다음과 같이 채널에 메시지가 잘 전달된 걸 보실 수 있을 겁니다.</p>\n<p><img src=\"/2020/09/18/slack-github-action-automation/webhooks_example_result.jpg\" alt=\"Webhooks Example API Result\" /></p>\n<h2 id=\"6-edit-the-crawler\"><a class=\"markdownIt-Anchor\" href=\"#6-edit-the-crawler\"></a> 6. Edit the Crawler</h2>\n<p>Webhooks설정까지 마쳤으니 본격적으로 GitHub Action으로 들어가 보겠습니다. 그 전에 크롤러에 다음과 같은 코드를 추가해주세요.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url = os.environ.get(<span class=\"string\">&#x27;SLACK_URL&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">slack_post_text</span>(<span class=\"params\">url, text</span>):</span></span><br><span class=\"line\">    result = requests.post(url, json = &#123;<span class=\"string\">&quot;text&quot;</span>: text&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n<p>Webhooks를 설정하면서 Webhooks URL은 다른 사람에게 보여선 안 된다고 했습니다. 그렇기 때문에 우리는 이 URL을 SLACK_URL이란 환경변수로 지정해서 다른 사람에겐 보이지 않되 코드에선 변수를 가져와 사용할 수 있도록 만들어줄 겁니다.</p>\n<p>그리고 <code>slack_post_text</code> 라는 함수를 통해 슬랙에 보내고자 하는 메시지를 JSON으로 URL에 전달해줍니다.</p>\n<h2 id=\"7-configure-github-repository-settings\"><a class=\"markdownIt-Anchor\" href=\"#7-configure-github-repository-settings\"></a> 7. Configure GitHub Repository Settings</h2>\n<p>GitHub 저장소 하나를 만들어준 뒤, 크롤러를 저장소에 push 해주세요. 그리고 우리가 그토록 기다리던 <strong>GitHub Action</strong>을 진행하기 위해 저장소 메뉴 중 Pull requests 오른쪽에 있는 Action을 클릭해주세요.</p>\n<p>라고 하고 싶지만, 우리에겐 조금 더할 일이 남아있습니다. 환경변수를 지정해줘야 한다고 했던 거 기억하시나요?</p>\n<p>맞습니다. 그 환경변수를 지정해보도록 하겠습니다.</p>\n<p>Settings에 들어가 주시고 아래 하늘색 표시해놓은 것처럼 Secrets를 클릭해주세요.</p>\n<p><img src=\"/2020/09/18/slack-github-action-automation/github_settings.jpg\" alt=\"GitHub Settings\" /></p>\n<p>왠지 뭘 해야 할지 감 오시죠? 맞습니다. New secret 버튼을 눌러주세요.</p>\n<p><img src=\"/2020/09/18/slack-github-action-automation/github_secrets.jpg\" alt=\"GitHub Secrets\" /></p>\n<p>Name엔 전에 말씀드렸던 SLACK_URL을 입력해주시고, Value에 Webhooks URL을 입력해주신 다음 추가해주세요.<br />\n<img src=\"/2020/09/18/slack-github-action-automation/add_secret.jpg\" alt=\"Add Secrets\" /></p>\n<h2 id=\"8-make-a-github-action\"><a class=\"markdownIt-Anchor\" href=\"#8-make-a-github-action\"></a> 8. Make a GitHub Action</h2>\n<p><strong>드디어</strong> 정말 우리가 기다리고 기다리던 GitHub Action을 할 시간입니다.</p>\n<p>GitHub Action에 관한 글인데 뭐가 이렇게 많냐고요? 뭐 어쩔 수 없습니다.</p>\n<p><img src=\"/2020/09/18/slack-github-action-automation/experience_kim.jpg\" alt=\"좋은 경험이다 생각하고... 흠흠... - 출처 YTN\" /></p>\n<p>데이터 분석을 배울 때 거의 귀가 닳도록 듣는 말이 전처리에 전체 프로젝트 중 80%의 시간을 쏟는다는 얘기인데, Github Action도 마찬가지인 듯 합니다. 환경설정을 해줘야 할 게 많이 있어서 시간이 오래 걸렸습니다.</p>\n<p>각설하고, 여기서는 크롤러를 python으로 만들었다고 가정하겠습니다.</p>\n<p>하늘색 표시를 해놓은 Python application에서 Set up this workflow를 클릭해주세요.</p>\n<p><img src=\"/2020/09/18/slack-github-action-automation/github_action_python_application.jpg\" alt=\"Select Workflow\" /></p>\n<p>workflow 내용을 다음과 같이 바꿔주세요.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Python</span> <span class=\"string\">application</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">&quot;5 0 * * *&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\">    <span class=\"attr\">inputs:</span></span><br><span class=\"line\">      <span class=\"attr\">logLevel:</span></span><br><span class=\"line\">        <span class=\"attr\">description:</span> <span class=\"string\">&quot;Log level&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">required:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">default:</span> <span class=\"string\">&quot;warning&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">tags:</span></span><br><span class=\"line\">        <span class=\"attr\">description:</span> <span class=\"string\">&quot;Test scenario tags&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">build:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Set</span> <span class=\"string\">up</span> <span class=\"string\">Python</span> <span class=\"number\">3.8</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.8</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">dependencies</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          python -m pip install --upgrade pip</span></span><br><span class=\"line\"><span class=\"string\">          pip install bs4 requests</span></span><br><span class=\"line\"><span class=\"string\"></span>      <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">python</span> <span class=\"string\">크롤러이름.py</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span> <span class=\"comment\"># Or as an environment variable</span></span><br><span class=\"line\">          <span class=\"attr\">SLACK_URL:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.SLACK_URL</span> <span class=\"string\">&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"9-edit-workflow\"><a class=\"markdownIt-Anchor\" href=\"#9-edit-workflow\"></a> 9. Edit workflow</h2>\n<p>특히 들여쓰기에 유의해주세요. 파이선을 해보셨다면 아시겠지만, 들여쓰기 하나 때문에 빨간색 에러가 발생하곤 합니다. 위의 8번 챕터에서는 코드 설명 없이 우선 고치라고 말씀드렸는데 여기서 하나하나 설명해 드리도록 하겠습니다. 우선 <strong>on</strong> 부분을 보겠습니다.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">&quot;5 0 * * *&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\">    <span class=\"attr\">inputs:</span></span><br><span class=\"line\">      <span class=\"attr\">logLevel:</span></span><br><span class=\"line\">        <span class=\"attr\">description:</span> <span class=\"string\">&quot;Log level&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">required:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">default:</span> <span class=\"string\">&quot;warning&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">tags:</span></span><br><span class=\"line\">        <span class=\"attr\">description:</span> <span class=\"string\">&quot;Test scenario tags&quot;</span></span><br></pre></td></tr></table></figure>\n<p><strong>schedule</strong> 밑에 있는 cron은 언제 해당 크롤러를 작동시킬지에 대한 내용입니다. 이에 대한 문법을 다 외우시는 것보다는 <a href=\"https://crontab.guru/\">crontab.guru</a>라는 사이트를 방문해서 원하시는 날짜 설정을 하시길 권해드리고 싶습니다. 주의할 사항은 설정되는 시간이 UTC(협정 시계시) 기준이라는 겁니다. 한국은 UTC+9를 설정해줘야 한다는 점을 유의해주세요.</p>\n<p><strong>workflow_dispatch</strong>부분은 해당 action이 작동하는지 작동하지 않는지 확인하기 위해 수동으로 GitHub Action을 작동시킬 수 있도록 해주는 코드입니다.</p>\n<p>그럼 다음으로 <strong>jobs</strong>를 보겠습니다.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">build:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Set</span> <span class=\"string\">up</span> <span class=\"string\">Python</span> <span class=\"number\">3.8</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.8</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">dependencies</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          python -m pip install --upgrade pip</span></span><br><span class=\"line\"><span class=\"string\">          pip install bs4 requests</span></span><br><span class=\"line\"><span class=\"string\"></span>      <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">python</span> <span class=\"string\">크롤러이름.py</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span> <span class=\"comment\"># Or as an environment variable</span></span><br><span class=\"line\">          <span class=\"attr\">SLACK_URL:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.SLACK_URL</span> <span class=\"string\">&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n<p>대강 눈치채실 수도 있겠지만, runs-on을 보면 GitHub Action이 우분투 환경에서 작동한다는 것을 알 수 있습니다.</p>\n<p><strong>- name: Install dependencies</strong> 이 부분에선 익숙한 pip install이 등장합니다. 필요한 라이브러리가 있으시다면 추가해주세요.</p>\n<p>마지막으로 <strong>run</strong> 부분에 크롤러를 실행할 수 있도록 해주시고 <strong>env</strong>에는 그토록 강조했던 SLACK_URL 환경변수를 입력해줍니다.</p>\n<p>그렇게 한 뒤 화면 우상단에 있는 Start commit 버튼을 누르고 커밋해주세요.</p>\n<p><img src=\"/2020/09/18/slack-github-action-automation/github_action_commit.jpg\" alt=\"GitHub Action Commit\" /></p>\n<h2 id=\"10-test-github-action\"><a class=\"markdownIt-Anchor\" href=\"#10-test-github-action\"></a> 10. Test GitHub Action</h2>\n<p>이제 테스트를 한 번 해보겠습니다.</p>\n<p>GitHub 저장소에서 Action 메뉴를 클릭해주세요. 그리고 하늘색 표시해 준 Python application을 클릭해주세요</p>\n<p><img src=\"/2020/09/18/slack-github-action-automation/workflow_test.jpg\" alt=\"workflow test\" /></p>\n<p>잘 작동하는지 아닌지 수동으로 확인해보겠습니다. Run workflow를 실행해주세요.</p>\n<p>그럼 슬랙 채널에 다음과 같이 메시지가 도착했음을 보실 수 있을 겁니다.</p>\n<p><img src=\"/2020/09/18/slack-github-action-automation/test_result.jpg\" alt=\"Test Results\" /></p>\n<p>여기까지 GitHub Action을 이용한 Slack 알림 자동화를 해보셨는데 어떠셨나요?</p>\n<p>많이 어려우셨나요? 그렇죠? 맞아요. 저도 많이 어렵더라고요.</p>\n<p>하지만 안되면 될 때까지, 계속해서 해보거나 <a href=\"https://bit.ly/2Sqdnws\">딥백수 슬랙</a>에 오셔서 질문해주시면 다른 구성원분들이 많이 도움을 주시지 않을까 생각을 합니다.</p>\n<p>사실 이 글을 쓰는 저는 컴맹에 가까운 수준이라 많이 어렵더라고요. 하나하나 이해하는 데 시간이 얼마나 많이 걸리던지… 그렇게 헤매던 저를 인내심을 가지고 가르쳐주신 Mo Kweon님께 감사하다는 말을 마지막으로 남기고 싶습니다.</p>\n<p>긴 글 읽어주셔서 고맙습니다.</p>\n",
            "tags": [
                "Jinyoung Song",
                "Github Action",
                "Slack",
                "Automation",
                "자동화",
                "cron"
            ]
        },
        {
            "id": "https://deepbaksu.github.io/2020/08/17/slack-bot/",
            "url": "https://deepbaksu.github.io/2020/08/17/slack-bot/",
            "title": "슬랙봇 Distribute 가능하게 만들기 (OAuth)",
            "date_published": "2020-08-17T08:32:54.000Z",
            "content_html": "<p>딥백수에는 여러 슬랙봇들이 상주하고 있습니다.</p>\n<p><img src=\"/2020/08/17/slack-bot/timebot_demo.png\" alt=\"캘리포니아/한국 시간 변환해주는 timebot\" /></p>\n<p>이렇게 만들어 둔 봇이 유용해서 다른 슬랙 workspace 에서 사용하고 싶을 때가 있습니다. 그러기 위해 distribute 가능하게 봇을 작성해야 합니다. 그러기 위해 OAuth를 사용해야 합니다.</p>\n<h2 id=\"oauth-란\"><a class=\"markdownIt-Anchor\" href=\"#oauth-란\"></a> OAuth 란?</h2>\n<p>OAuth는 엑세스를 관리하는 방법중에 표준으로 사용되는 방법입니다. A라는 애플리케이션에서 B사이트의 유저 정보가 필요하다면 B사이트로 OAuth Request 를 보내는 방식입니다.</p>\n<p>여기서 슬랙봇이 A 애플리케이션이고 슬랙이 B에 해당합니다.</p>\n<h2 id=\"실제-slack-작동-구조\"><a class=\"markdownIt-Anchor\" href=\"#실제-slack-작동-구조\"></a> 실제 Slack 작동 구조</h2>\n<p><img src=\"https://a.slack-edge.com/fbd3c/img/api/articles/oauth_scopes_tutorial/slack_oauth_flow_diagram.png\" alt=\"OAuth\" /></p>\n<p>위 그림에서 구현해야 될게 많은 것으로 보이지만 실제로 <code>GET /api/oauth?code=XXXXX</code> 엔드포인트를 서버에 만들어주고 토큰을 저장할 데이터베이스만 있으면 완성입니다.</p>\n<p>예를 들어, 유저가 <a href=\"https://slack.com/oauth/v2/authorize?client_id=288745980535.515443770183&scope=channels:history,channels:join,channels:read,chat:write,chat:write.customize,chat:write.public,commands,dnd:read,emoji:read,groups:history,groups:read,groups:write,im:history,im:read,im:write,links:read,links:write,mpim:history,mpim:read,mpim:write,pins:read,pins:write,reactions:read,reactions:write,reminders:read,reminders:write,remote_files:read,remote_files:share,remote_files:write,team:read,usergroups:read,usergroups:write,users.profile:read,users:read,users:read.email,users:write,app_mentions:read&user_scope=\"><img alt=\"Add to Slack\" height=\"40\" width=\"139\" src=\"https://platform.slack-edge.com/img/add_to_slack.png\" srcSet=\"https://platform.slack-edge.com/img/add_to_slack.png 1x, https://platform.slack-edge.com/img/add_to_slack@2x.png 2x\" /></a> 이 버튼을 누르고 동의를 하게 되면 timebot 서버로 GET /api/oauth?code=XXXX 리퀘스트를 보내게 됩니다. (step 2 에 해당)</p>\n<p>그럼 이 code=XXX 를 사용하여 슬랙 서버에 OAuth 요청을 보내고(step 3) 받은 토큰을 데이터베이스에 저장해주면 됩니다 (step 4).</p>\n<p>수도 코드는 아래와 같이 되어 있습니다.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">OauthHandler</span><span class=\"params\">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// GET ?code=XXXX 읽음</span></span><br><span class=\"line\">  code, ok := request.URL.Query()[<span class=\"string\">&quot;code&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// CODE를 보냄 (POST https://api.slack.com/methods/oauth.v2.access)</span></span><br><span class=\"line\">  resp, err := getOAuthV2Response(slackClientId, slackClientSecret, code[<span class=\"number\">0</span>], <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// TeamID 및 AccessToken 저장</span></span><br><span class=\"line\">  store(resp.TeamID, resp.AccessToken)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ... send ok response</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>POST https://api.slack.com/methods/oauth.v2.access</code> 의 예시 response</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;ok&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;access_token&quot;</span>: <span class=\"string\">&quot;xoxb-17653672481-19874698323-pdFZKVeTuE8sk7oOcBrzbqgy&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;token_type&quot;</span>: <span class=\"string\">&quot;bot&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;scope&quot;</span>: <span class=\"string\">&quot;commands,incoming-webhook&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;bot_user_id&quot;</span>: <span class=\"string\">&quot;U0KRQLJ9H&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;app_id&quot;</span>: <span class=\"string\">&quot;A0KRD7HC3&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;team&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;Slack Softball Team&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;id&quot;</span>: <span class=\"string\">&quot;T9TK3CUKW&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">&quot;enterprise&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;slack-sports&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;id&quot;</span>: <span class=\"string\">&quot;E12345678&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">&quot;authed_user&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;id&quot;</span>: <span class=\"string\">&quot;U1234&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;scope&quot;</span>: <span class=\"string\">&quot;chat:write&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;access_token&quot;</span>: <span class=\"string\">&quot;xoxp-1234&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;token_type&quot;</span>: <span class=\"string\">&quot;user&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>이때 TeamID(workspace) 와 코드를 함께 저장해주면 나중에 유저 메시지로부터 반응하는 봇을 만들때 유저 메시지에 포함된 TeamID를 읽어 Access Token 을 DB에서 불러오는 식으로 사용합니다.</p>\n<p><img src=\"/2020/08/17/slack-bot/timebot_sequential.svg\" alt=\"timebot 순서도\" /></p>\n<p>자세한 내용은 <a href=\"https://bit.ly/2Sqdnws\">https://bit.ly/2Sqdnws</a> 에 참여하셔서 문의주세요 😄</p>\n",
            "tags": [
                "Mo Kweon",
                "go",
                "slack",
                "bot",
                "oauth"
            ]
        }
    ]
}
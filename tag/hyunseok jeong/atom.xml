<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://deepbaksu.github.io</id>
    <title>딥백수 • Posts by &#34;hyunseok jeong&#34; tag</title>
    <link href="https://deepbaksu.github.io" />
    <updated>2020-12-14T03:46:51.000Z</updated>
    <category term="Mo Kweon" />
    <category term="go" />
    <category term="golang" />
    <category term="dependency injection" />
    <category term="wire" />
    <category term="uber-go" />
    <category term="fx" />
    <category term="Hyunggi Chang" />
    <category term="AI" />
    <category term="딥러닝" />
    <category term="로보틱스" />
    <category term="YouTube" />
    <category term="News" />
    <category term="Hyunseok Jeong" />
    <category term="Software Architecture" />
    <category term="Agile" />
    <category term="Architect" />
    <category term="Jinyoung Song" />
    <category term="데이터분석" />
    <category term="통계분석" />
    <category term="통계학" />
    <category term="통계역사" />
    <category term="비트코인" />
    <category term="제국주의" />
    <category term="미래전망" />
    <category term="플랫폼전략" />
    <category term="디지털자산" />
    <category term="microservice" />
    <category term="CQRS" />
    <category term="architecture" />
    <category term="software engineering" />
    <category term="선지원" />
    <category term="후고민" />
    <category term="선지원 후고민" />
    <category term="실험" />
    <category term="Apply Driven Study" />
    <category term="생존" />
    <category term="멘토링" />
    <category term="용기" />
    <category term="free web server" />
    <category term="heroku" />
    <category term="aws" />
    <category term="gcp" />
    <category term="netlify" />
    <category term="github actions" />
    <category term="구글애널리틱스" />
    <category term="GA" />
    <category term="Google Analytics" />
    <category term="Data Analysis" />
    <category term="Web Log Analysis" />
    <category term="Happy working" />
    <category term="Mindfulness" />
    <category term="Noble Eightfold Path" />
    <category term="gRPC" />
    <category term="Go" />
    <category term="REST" />
    <category term="존버" />
    <category term="jonber" />
    <category term="딥백수" />
    <category term="회고" />
    <category term="bluehole" />
    <category term="krafton" />
    <category term="communication" />
    <category term="GitHub CLI" />
    <category term="Gist" />
    <category term="Leaning by Doing" />
    <category term="Repo" />
    <category term="Alias" />
    <category term="습관" />
    <category term="중용" />
    <category term="꾸준함" />
    <category term="성실" />
    <category term="대화" />
    <category term="비폭력대화" />
    <category term="Golang" />
    <category term="Slice" />
    <category term="example" />
    <category term="Windows" />
    <category term="PowerShell" />
    <category term="PowerShell script" />
    <category term="Git" />
    <category term="Prompt" />
    <category term="Martin Fowler" />
    <category term="Refactoring" />
    <category term="Principles" />
    <category term="파이썬" />
    <category term="실무" />
    <category term="데이터분석 실무" />
    <category term="네트워크 분석" />
    <category term="최적화" />
    <category term="시뮬레이션" />
    <category term="자연어처리" />
    <category term="회귀" />
    <category term="예측 분석" />
    <category term="semantic release" />
    <category term="semantic version" />
    <category term="slack" />
    <category term="bot" />
    <category term="oauth" />
    <category term="Github Action" />
    <category term="Slack" />
    <category term="Automation" />
    <category term="자동화" />
    <category term="cron" />
    <category term="Seunghwan Chang" />
    <category term="English" />
    <category term="would" />
    <category term="ppt" />
    <category term="발표" />
    <category term="consulting" />
    <category term="보고서" />
    <category term="파워포인트" />
    <category term="PT고자" />
    <category term="ppt고자" />
    <category term="ppt공포" />
    <category term="슬라이드" />
    <category term="Martin Hwang" />
    <category term="Ray" />
    <category term="distributed computing" />
    <category term="parallel computing" />
    <entry>
        <id>https://deepbaksu.github.io/2020/12/14/nonviolent-communication/</id>
        <title>비폭력대화를 다시 읽다</title>
        <link rel="alternate" href="https://deepbaksu.github.io/2020/12/14/nonviolent-communication/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/2020/12/14/nonviolent-communication/helena-lopes-UZe35tk5UoA-unsplash.jpg&#34; alt=&#34;Photo by Helena Lopes on Unsplash&#34; /&gt;&lt;/p&gt;
&lt;p&gt;이 책에 처음 끌리게 된 건 마이크로소프트 CEO인 사티아 나넬라가 추천한 책이라는 마케팅 때문이었다.&lt;br /&gt;
눈부시게 성장하는 기업을 이끄는 것 보다도, 비대해진 공룡인 마이크로소프트를 변화시키기가 백만배 어렵지 않을까? 그 변화의 수장이 추천한 책이라는 것에 끌린 것이다.&lt;/p&gt;
&lt;p&gt;약간의 개똥철학이 섞여 있지는 않을지, 착하게 살기를 강요하거나 신비주의 공동체같은 이야기는 아닐까 하는&lt;br /&gt;
의구심을 가지고 읽기 시작했던 이 책은, 2019년에 읽은 책들 중 다시 읽고 싶은 책의 하나가 되었고, 이제 2020년의 끝자락에&lt;br /&gt;
이렇게 재독과 정리를 하게 되었다.&lt;/p&gt;
&lt;p&gt;현재의 심정은 이 책을 한 번씩 다시 읽으며 내 것으로 만들고 싶다는 것, 가족과 함께 워크샵에 참석하고 싶으며,&lt;br /&gt;
이 책이 담고 있는 내용이 정규 교과 과정에 포함되어 모든 사람들이 비폭력대화를 아는 사회가 되었으면 한다는 것이다.&lt;br /&gt;
누구나 비폭력대화의 용어를 아는 사회가 되었으면 하고, 나 자신이 비폭력대화가 몸에 베인 사람이 되었으면 싶다.&lt;/p&gt;
&lt;h2 id=&#34;관찰-느낌-욕구-부탁&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#관찰-느낌-욕구-부탁&#34;&gt;&lt;/a&gt; 관찰, 느낌, 욕구, 부탁&lt;/h2&gt;
&lt;p&gt;비폭력대화란 &lt;strong&gt;관찰, 느낌, 욕구, 부탁&lt;/strong&gt;의 4단계로 말을 한다.&lt;br /&gt;
서로간의 진정한 욕구를 알아내고, 연민으로 연결되면 모든 갈등과 오해가 풀린다는 것이다.&lt;/p&gt;
&lt;h3 id=&#34;관찰&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#관찰&#34;&gt;&lt;/a&gt; 관찰&lt;/h3&gt;
&lt;p&gt;인간은 감각기관으로 들어온 정보를 &lt;strong&gt;분석, 비교, 판단&lt;/strong&gt;을 한다. 하지만 비폭력대화에서 말하는 관찰이란 있는 그대로의 &lt;strong&gt;관찰&lt;/strong&gt;을 말한다. 가공하여 &lt;strong&gt;분석, 비교, 판단&lt;/strong&gt;한 것이 아닌 날 것 그대로의 데이터.&lt;/p&gt;
&lt;p&gt;“너는 약속시간에 매번 늦어!” 는 비난이고 공격이다.&lt;br /&gt;
“지난 두 번의 약속에 늦게 왔어” 는 있는 그대로의 관찰이다.&lt;/p&gt;
&lt;p&gt;분석, 비교, 판단이 맞는지 여부는 중요하지 않다. 그 자체 상대를 공격하는 것이고, 그때문에 상대가 자학, 변명, 분노를 준비한다는 것이 문제이다. 반면, 관찰은 있는 그대로의 사실, 서로가 오해할 수 없는 사실이기 때문에 상대에게 거부감을 주지 않는다. 또한, 이와 같이 공감할 수 있는 사실을 기반으로 대화를 시작할 수 있게 해준다.&lt;/p&gt;
&lt;h3 id=&#34;느낌&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#느낌&#34;&gt;&lt;/a&gt; 느낌&lt;/h3&gt;
&lt;p&gt;그런 관찰이 자신에게 불러 일으키는 느낌을 이야기한다.&lt;br /&gt;
혹은 반대로, 상대의 느낌과 욕구를 추측하여 물어볼 수도 있다.&lt;/p&gt;
&lt;p&gt;가장 많이 하는 실수는 생각과 느낌을 혼동하는 것이다.&lt;/p&gt;
&lt;p&gt;“나를 무시한다는 느낌이 들어.” 이것은 생각이며, 조금만 비틀어서 “무시한다는 생각이 들어서 마음이 속상하다” 말하면 느낌이 된다.&lt;br /&gt;
“내가 너무 무책임했다는 자책감을 느껴.” 이러한 생각을 조금만 비틀어서 “내가 무책임했다는 생각이 들어서 우울해졌어” 라고 말하면 느낌이 된다.&lt;/p&gt;
&lt;p&gt;책은 느낌을 제대로 표현할 수 있는 단어들을 소개하고 있다(88-91 pages). 느낌을 어떻게 표현해야 할지 모를때에 펼쳐보거나 하나씩 실생활에서 써보며 익숙해져야 할 것이다. 예를 들어, 감격, 짜릿, 안도, 갑갑, 맥풀리는, 민망한 등의 표현이 있다.&lt;/p&gt;
&lt;p&gt;느낌은 욕구를 보여주는 표지판이다. 욕구의 충족여부가 느낌으로 드러나는 것이다.&lt;br /&gt;
그렇기에 욕구를 알기 위해서는 드러난 느낌에서부터 추적해 나가야 한다.&lt;/p&gt;
&lt;h3 id=&#34;욕구&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#욕구&#34;&gt;&lt;/a&gt; 욕구&lt;/h3&gt;
&lt;p&gt;우리가 알아내야 하는 것은 나의 진정한 욕구, 상대의 진정한 욕구이다.&lt;br /&gt;
관찰하고 느낌을 제대로 표현하는 이유는 그 뒤에 있는, 원인이 되는 욕구가 무엇인지를 드러내기 위한 것이다.&lt;br /&gt;
왜냐하면, 사람들이 상대의, 그리고 나 자신의, 진정한 욕구를 모르기에 대화가 어긋나는 것이기 때문이다.&lt;/p&gt;
&lt;p&gt;느낌과 욕구는 강력하게 이어져 있어서 &lt;code&gt;~욕구가 있어서 ~라고 느낀다.&lt;/code&gt; 라는 문장으로 나올 수 있겠다.&lt;/p&gt;
&lt;p&gt;“나는 내 시간을 존중받고 싶은데, 너가 약속시간에 늦으니 서운해.”&lt;br /&gt;
“너는 아빠와 시간을 보내고 싶은데, 아빠가 지난 3주간 주말에도 출근을 해서 속상하니?”&lt;br /&gt;
이 경우 이러한 추측은 틀려도 된다. 물어보면서 상대의 욕구를 찾아내야 한다.&lt;/p&gt;
&lt;p&gt;우리가 관찰하고 느낌을 표현하는 이유는 바로 이 욕구를 알아내려는 것이다.&lt;/p&gt;
&lt;h3 id=&#34;부탁&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#부탁&#34;&gt;&lt;/a&gt; 부탁&lt;/h3&gt;
&lt;p&gt;이렇게 서로의 진정한 욕구까지 알게 되면, 그 다음으로 부탁을 할 수 있다. 나와 상대가 정말 원하는 것, 그 욕구를 알아야 거기에 맞게 대응할 수 있는 것이니 이렇게 보면 당연한 것이다.&lt;/p&gt;
&lt;p&gt;부탁은 &lt;strong&gt;정확&lt;/strong&gt;하고 &lt;strong&gt;구체적&lt;/strong&gt;이어야 한다. 욕구를 만족시킬 수 있는 무언가를 부탁해야 한다.&lt;br /&gt;
“나를 좀더 이해해 줬으면 좋겠어.” 가 아니라 “내가 주말 저녁 2시간, 동네 친구들과 맥주 한잔 하는걸 기꺼이 보내주면 좋겠어” 라고 말해야 하는 것이다.&lt;/p&gt;
&lt;p&gt;구체적이지 않은 부탁의 예가 책에 소개되어 있다.&lt;br /&gt;
자신과 함께하는 시간을 가졌으면 하는 아내가 남편에게 너무 일에만 매달리지 말라고 부탁을 했더니 골프 토너먼트를 신청했다는 이야기. 웃프다.&lt;/p&gt;
&lt;h2 id=&#34;비폭력대화-더-나아간-이야기들&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#비폭력대화-더-나아간-이야기들&#34;&gt;&lt;/a&gt; 비폭력대화 - 더 나아간 이야기들&lt;/h2&gt;
&lt;h3 id=&#34;나의-책임&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#나의-책임&#34;&gt;&lt;/a&gt; 나의 책임&lt;/h3&gt;
&lt;p&gt;불우한 어린시절을 보내었건, 끔찍한 범죄의 희생자였건 현재의 나의 욕구에 대한 책임은 온전히 나에게 있다. 로젠버그는 전쟁, 분쟁의 유가족들, 성범죄 피해자들을 많이 도왔다. 유사한 상황에 놓여 있었지만 그들의 대응은 다들 달랐다. 그 대응의 책임은 나에게 있는 것이다.&lt;/p&gt;
&lt;p&gt;“어린시절 왕따를 당했으니, 나는 그 트라우마로 나자신을 이렇게 자책하고 비하하고 망가뜨려도 돼” 라고 현재의 나의 행동의 책임을 타인에게 전가해서는 안되는 것이다. 상대방의 행위에 대해 상대방이 책임이 없다는 것은 아니니 주의하여 읽어야 할 부분이다.&lt;/p&gt;
&lt;h3 id=&#34;감사하기&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#감사하기&#34;&gt;&lt;/a&gt; 감사하기&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;위험한 것&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;감사는 비난만큼 위험한 것이다. 나를 우쭐하게 하고 자만하게 한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;진정한 감사&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;진정한 감사는 세 가지 요소가 들어가 있어야 한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;구체적으로 &lt;strong&gt;어떠한 행위&lt;/strong&gt;때문에&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;어떤 욕구&lt;/strong&gt;가 채워졌으며,&lt;/li&gt;
&lt;li&gt;그 결과로 &lt;strong&gt;어떤 기분&lt;/strong&gt;인지를 이야기 해야 하는 것이다.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1) 차를 태워줘서 2) 일찍 퇴근해 아이들을 안아주고 싶다는 욕구가 채워져서 3) 너무 기뻐 - 고마워&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1) 여행 정보를 알려줘서 2) 여행 준비를 충실히 하고 싶다는 욕구가 채워져서 3) 준비의 큰 걱정을 덜어서 홀가분해 - 고마워&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;나-자신에게도-비폭력대화를-쓰기&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#나-자신에게도-비폭력대화를-쓰기&#34;&gt;&lt;/a&gt; 나 자신에게도 비폭력대화를 쓰기&lt;/h3&gt;
&lt;p&gt;자책하는 것도 폭력이다. &lt;code&gt;이런 욕구가 있는데 충족하지 못해서 이런 느낌이 든다.&lt;/code&gt; 라고 표현해야는 것이다.&lt;/p&gt;
&lt;p&gt;“매번 숙제가 하기 싫고, 미루기도 하고, 까먹기도 하니 나는 정말 한심한 녀석이야!” 라고 자신에게 라벨을 붙여서는 안된다.&lt;br /&gt;
“숙제를 한번도 빼먹지 않아 성실하게 보이고 싶었는데, 숙제를 깜박해서 너무 속상하다.” 라고 자신의 욕구와 느낌을 표현해야 하는 것이다.&lt;br /&gt;
그렇게 욕구를 알고 나면 그 욕구를 어떻게 충족시킬 수 있을지 고민할 수 있게 되는 것이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;드라마를 줄이자.&lt;/li&gt;
&lt;li&gt;친구와 스터디 모임을 하자&lt;/li&gt;
&lt;li&gt;숙제 알람앱을 이용하자. 등등&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;비폭력대화가-일상이-되는-나를-꿈꾼다&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#비폭력대화가-일상이-되는-나를-꿈꾼다&#34;&gt;&lt;/a&gt; 비폭력대화가 일상이 되는 나를 꿈꾼다.&lt;/h2&gt;
&lt;p&gt;2020년은 나 자신의 현재를 많이 돌아볼 수 있는 시간이었다. 소통과 커뮤니케이션은 잘하는 편이라 생각하였었는데, 완벽한 착각이었다. 자학은 아니다. 비폭력대화를 읽은 지금, 자학이면 안된다. 현재를 알았으니 앞으로 나아가면 된다.&lt;br /&gt;
앞으로도 가능하면 매년 이 책, 혹은 비폭력대화와 관련한 책을 읽으며 나 자신의 것으로 만들 것이며, 가족과 회사생활, 인터넷의 댓글들에서도 비폭력대화가 녹아들게 나 자신을 단련하겠다.&lt;/p&gt;
&lt;h2 id=&#34;기억나는-문장들&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#기억나는-문장들&#34;&gt;&lt;/a&gt; 기억나는 문장들&lt;/h2&gt;
&lt;p&gt;“다른 사람들을 이렇게 판단하거나 분석하는 것은 우리 자신의 가치관과 욕구의 비극적인 표현이라고 나는 믿는다.” 47p&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- &amp;quot;나는 퇴근하면 깨끗하게 정돈된 집에서 쉬고 싶은 욕구가 있어&amp;quot; 라는 표현을 자기파괴적으로 표현하는 것이 자칼 언어이며 &amp;quot;집안꼴이 이게 뭐야!&amp;quot; 가 된다.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- 그렇기에 우리는 그 폭언에 즉각 반응하는 대신에 상대의 느낌과 욕구에 귀를 기울이는 기린이 되어야 한다.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;“나는 사람들이 벌을 피하기 위해서가 아니라 바꾸는 것이 자신에게 이롭다는 걸 알기 때문에 변할 때 모두에게 이익이 된다고 믿는다.” 56p&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- 아이들에게 상과 벌을 주고 있는 나 자신들 돌아보았다. 어떻게 해야 할까?&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;“&#39;게으르다’나 &#39;바보같다’라는 부정적인 꼬리표의 효과는 명백하지만, 긍정적이거나 &#39;요리사’처럼 중립적으로 보이는 말도 한 사람을 전인격적인 존재 그 자체로 보는 능력을 제한한다.” 64p&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- 라벨을 붙이지 말자.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;“평가가 들어가지 않은 관찰은 인간 지성의 최고 형태” 크리슈나무르티, 64p&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- 호문호찰하는 순임금이 생각난 구절이다. 명상에서도 과거나 미래가 아닌 현재를 관찰하라 말한다.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;“관찰에 평가를 섞으면 듣는 사람은 그것을 비판으로 받아들이고 우리가 하는 말에 저항감을 느끼기 쉽다.” 69p&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- &amp;quot;너는 내 전화를 세 번 받지 않았어&amp;quot; 에는 비판, 비난이 없지만, &amp;quot;너 나 무시하는 거야? 왜 전화를 안받아?&amp;quot; 는 비난이 들어가있다.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- &amp;quot;너는 이번주에 세 번 지각을 했어&amp;quot;는 관찰이지만, &amp;quot;넌 게으름뱅이에다 무책임하구나&amp;quot;는 판단, 비난이다. 옳은 판단이라 하더라도 해서는 안된다.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;“NVC는 다른 사람들의 말과 행동이 우리의 느낌을 불러일으키는 자극은 될 수 있어도, 결코 우리 느낌의 원인은 아니라는 인식을 새롭게 해준다.&lt;br /&gt;
우리의 느낌은 그 순간 자신의 필요와 기대에 따른 것이기도 하지만, 다른 사람의 말과 행동을 어떻게 받아들이기로 선택했는가에도 달려있다.” 99p&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- 원인은 우리 자신의 욕구에 있다. 욕구는 느낌으로 드러나게 된다. 반대로 느낌을 통해서 우리, 그리고 타인의 욕구를 유추해 낼 수도 있다.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;“사람들이 상대방을 탓하기 보다 자신들이 원하는 것을 말하기 시작하는 순간부터 모두의 욕구를 충족할 방법을 찾을 가능성이 훨씬 커지는 것을 나는 여러 번 경험했다.” 106p&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- 자신의 욕구를 자신이 충족시킬 책임이 있다.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;“우리가 상대로부터 무엇을 받고 싶은지 명확하기 표현할수록 우리의 욕구가 충족될 가능성이 커진다.” 138p&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- 그러려면 나의 욕구가 무엇인지를 알아야 한다.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;“진심으로 부탁하고 있다는 사실을 알리는 가장 확실한 방법은, 상대방이 우리의 부탁에 응하지 않았을 때 그 사람의 말에 공감해주는 것이다.” 147p&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- 방청소좀 해줄래?&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- 싫어요!&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- 싫어요? 어디서 감히! 이렇게 말하는 순간 이것은 부탁이 아니라 강요였다는 것이 드러나게 된다.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;“NVC의 목적은 자신이 원하는 것을 얻기 위해 다른 사람의 행동을 바꾸려는 것이 아니다. 솔직함과 공감에 바탕을 둔 인간관계를 형성하여 결국에는 모든 사람의 욕구가 충족되도록 하는 것이다.” 154p&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- NVC를 통해 누군가를 내 입맛대로 하도록 하는게 목적이 아닌 것이다.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;“무언가를 하려고 하지 말고 그곳에 그대로 있어라.” 167p&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- 위로, 조언, 동정, 심문, 설명 같은것보다 가만히 옆에서 공감만 하고 있는 것이다.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;“강한 느낌을 표현하는 사람들은 대체로 자신의 의도를 확인해 주기를 바란다고 생각하면 안전할 것이다.” 176p&lt;br /&gt;
“우리에게 위협적으로 들렸던 모든 메시지 뒤에는, 자신들의 삶에 기여해 달라고 우리에게 호소하는, 충족되지 않은 욕구를 가진 사람이 있다는 것이다.” 178p&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- 거친 말과 행동에 바로 반응하지 말고 그 상대를 관찰하고 느낌을 이해하고, 결국은 욕구를 알아내야 하는 것이다.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;“공감이란 다른 사람이 경험하는 것을 존중하는 마음으로 이해하는 것이다. 그러나 우리는 공감을 하는 대신에 자신의 견해나 느낌을 설명하거나, 조언을 하거나, 상대를 안심시키고 싶은 충동을 강하게 느낀다.” 185p&lt;/p&gt;
&lt;p&gt;“그들이 나를 얼마나 무례하게 대하는지 판단하는 대신, 그들의 행동 뒤에 숨은 고통과 욕구를 듣는데 집중했다.” 204p&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- 자칼 언어는 부탁의 말을 자멸적으로 표현하는 것이라 한다. 무례, 폭언이라는 껍질 뒤에 숨겨진 그들의 욕구를 찾아내야 한다.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;“분노를 온전히 표현하는 방법의 첫 단계는 다른 사람의 행동은 결코 우리 느낌의 원인이 아니라는 점을 깨닫는 것이다.” 245p&lt;br /&gt;
“그러므로 우리 느낌의 원인은 다른 사람의 행동이 아니라 그 순간의 우리 욕구이다.” 246p&lt;br /&gt;
“분노를 일으키는 것은 다른 사람의 행동이 아니라 바로 내 머릿속에 있는, 상대에 대한 생각과 그의 행동에 대한 나의 해석임을 깨달았다.” 249p&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- 분노를 일으키는 나의 욕구를 찾아야 한다. 분노라는 강렬한 표현은 나의 욕구를 찾기 쉽게 해준다.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;“두 당사자가 바로 지금 서로에게 무엇을 원하는지를 분명히 표현할 수 있다면, 우리는 모든 사람의 욕구를 충족하기 위해서 어떻게 하면 되는지 알게 될 것이다.” 279p&lt;/p&gt;
&lt;p&gt;“욕구는 사람이 특정한 어떤 행동을 하는 것과는 아무 관계도 없다.”&lt;br /&gt;
“수단/방법은 요청, 바람, 필요한 것, 그리고 &#39;해법’의 형태로 나타날 수 있는데 특정한 사람들이 취할 수 있는 특정한 행동과 관계가 있다.” 281p&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- 욕구와 수단/방법을 혼동하지 말것. 어떤 수단/방법을 하고 싶다고 말하는 것을 욕구라고 착각하고는 한다.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- 자동차를 사고 싶어는 욕구가 아니다. 그것을 통해 얻고자 하는 진정한 욕구를 찾아내야 한다.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;“그들이 ‘아니요’ 할 때, 그들은 우리가 부탁하는 것에 ‘예!’ 하지 못하게 하는 어떤 욕구가 있다고 말하고 있는 것이다.” 295p&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- 거부마저 즐거운 분석의 소재가 된다.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;“일반적인 칭찬은 아무리 긍정적이더라도 판단 형식으로 나타나고 다른 사람의 행동을 조종하기 우해 쓰이는 경우가 많다. NVC는 오로지 서로 기쁜 마음을 나누려는 목적으로 감사의 마음을 표현한다. (1) 우리 행복에 기여한 상대방의 행동 (2) 충족된 나의 욕구 (3) 그 결과 우리가 느끼는 기쁨을 말함으로써 고마운 마음을 표현한다.” 362p&lt;/p&gt;
&lt;p&gt;“춤을 출 수 있을 때는 절대 걷지 마라” 저자의 할머니, 366p&lt;/p&gt;
</content>
        <category term="Hyunseok Jeong" />
        <category term="대화" />
        <category term="비폭력대화" />
        <updated>2020-12-14T03:46:51.000Z</updated>
    </entry>
    <entry>
        <id>https://deepbaksu.github.io/2020/12/03/happy-working/</id>
        <title>행복하게 일하자</title>
        <link rel="alternate" href="https://deepbaksu.github.io/2020/12/03/happy-working/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/2020/12/03/happy-working/8-fold.png&#34; alt=&#34;Noble Eightfold Path&#34; /&gt;&lt;/p&gt;
&lt;p&gt;9년 전 쯤에 코이케 류노스케 스님의 책들을 몇 권을 이어 읽었었다. 최근에 명상을 접하며, 이 책들이 떠올라 다시 읽는데 9년의 세월 덕인지 나름의 이해가 늘어났다.&lt;/p&gt;
&lt;p&gt;원시 불교는 마음의 구조에 대한 학문이고, 이를 기반으로 마음을 단련하는 방법을 알려준다.&lt;br /&gt;
이 책에서 스님은 불교에서 얻은 깨달음을 일터에 적용하는 법을 이야기해준다. 책에 대한 나름의 이해와 정리, 밑줄을 공유해본다.&lt;/p&gt;
&lt;p&gt;알라딘 링크: &lt;a href=&#34;http://aladin.kr/p/x6otp&#34;&gt;http://aladin.kr/p/x6otp&lt;/a&gt; (품절)&lt;/p&gt;
&lt;h2 id=&#34;머리말&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#머리말&#34;&gt;&lt;/a&gt; 머리말&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;...원시 불교는 &amp;#x27;사람의 마음 구조는 어떻게 되어있는지를 완벽하게 해명한 학문과 그런 탄탄한 심리학에 기초하여&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;마음을 단련하기 위한 연습이라는 두 가지로 나눠져 있다.&amp;quot; 맺음말. 245p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;이렇게 불교에서 얻은 이해와 학습을 일에 어떻게 적용할 수 있을까?&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;그 순간에 해야 할 일에만 마음을 집중시키고, 마음속에서 번뇌라는 부정적인 사고가 나오지 않도록 관리할 수&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;있게 되었다.&amp;quot; 8p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;이 책에서 지향하는 궁극의 상태이다. 눈 앞의 일에 몰입하자는 것이며, 그러기 위해 몰입을 방해하는 번뇌를 멀리하고 관리하는 것도 배우자는 것이다.&lt;/p&gt;
&lt;h2 id=&#34;번뇌는-어디에서-올까&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#번뇌는-어디에서-올까&#34;&gt;&lt;/a&gt; 번뇌는 어디에서 올까?&lt;/h2&gt;
&lt;p&gt;스님의 한글 번역서 각각은 약간씩 다르게 표현하고 있지만 불교에서 삼독(三毒) 이라 부르는 탐욕, 분노, 어리석음 이 세가지에서 온다.&lt;/p&gt;
&lt;p&gt;탐욕은 더 받고 싶은 것이다.&lt;br /&gt;
누군가에게 인정받고 사랑받고 싶어하는 것도 탐욕이라 하겠다.&lt;/p&gt;
&lt;p&gt;분노는 반대로 밀어내고 싶은 것이다.&lt;/p&gt;
&lt;p&gt;어리석음은 언듯 이해가 쉽지 않은데 마음이 어지러워서 제대로 이해하지 못하는 것이라 하겠다.&lt;/p&gt;
&lt;h3 id=&#34;일터에서의-번뇌&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#일터에서의-번뇌&#34;&gt;&lt;/a&gt; 일터에서의 번뇌&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;상사에게 잘보이고 승진하고 싶어하는 욕심에 잡아먹히면 탐욕의 번뇌가 일어난다.&lt;/li&gt;
&lt;li&gt;같이 밥먹기 싫은 사람에게 차마 거절을 못하고 억지로 밥을 먹으면 분노의 번뇌가 일어난다.&lt;/li&gt;
&lt;li&gt;나 같이 잘난 사람에게 이렇게 시시한 일을 시킨다고? 분노의 번뇌가 일어난다.&lt;/li&gt;
&lt;li&gt;뒤에서 욕하고, 앞에서는 아첨을 하면 머리속 정보가 엉켜서 어지러워진다. 어리석음의 번뇌가 일어난다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;일터에서의 번뇌를 어떻게 다루어야 할까?&lt;br /&gt;
&lt;code&gt;아! 지금 탐욕/분노/어리석음의 번뇌가 일어나고 있구나!&lt;/code&gt; 하고 포착하는 것이고, 그 번뇌가 걷잡을 수 없어지기 전에 통제하고 멈추는 훈련을 반복하는 것이다. 반복하면 잘하게 된다.&lt;/p&gt;
&lt;p&gt;싫은 사람이 밥을 먹자고 하는 경우를 들어보자.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;싫다는 분노의 번뇌부터 인지하고 다독인 다음에, 정중히 거절해야 한다. 그래야 싫은 내색이 전달되지 않는다.&lt;/li&gt;
&lt;li&gt;같이 먹게 되었다면, 그 순간에 집중하여 열심히 함께 먹어야 한다. 먹기 싫다는 생각을 되내면 안된다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;마음을-통제하는-기술&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#마음을-통제하는-기술&#34;&gt;&lt;/a&gt; 마음을 통제하는 기술&lt;/h3&gt;
&lt;p&gt;마음을 통제하는 기술이란 뭘까? 우선 여기서 통제한다는 그 &#39;마음’이란 뭘까?&lt;br /&gt;
대니얼 카너먼의 “생각에 관한 생각” (알라딘: &lt;a href=&#34;http://aladin.kr/p/k1NiJ&#34;&gt;http://aladin.kr/p/k1NiJ&lt;/a&gt; )을 읽으면 &lt;code&gt;system1&lt;/code&gt;, &lt;code&gt;system2&lt;/code&gt; 라는 말이 나온다.&lt;/p&gt;
&lt;p&gt;매우 단순하게 표현하자면 &lt;code&gt;system1&lt;/code&gt;은 무의식중에 튀어나오는 생각들이라보면 된다. 요즘 인터넷에서 흔한 표현이 된 &amp;quot;의식의 흐름&amp;quot;이라고 보면 되겠다. 밥먹다 말고, 가스불을 끄고 왔는지 생각하다가 결혼기념일은 언제지? 새로나온 전자제품을 사고싶다는 식으로 이리저리 튀는 생각들. &lt;code&gt;system2&lt;/code&gt;는 좀더 의식적인 뇌의 활동이라고 보면 되겠다. 2 x 3 + 5 * 6 = 이라는 문제를 풀때의 의식이다. 한 마디만 덧붙이자면 &lt;code&gt;system1&lt;/code&gt;이 무조건 나쁜 것은 아니다.&lt;/p&gt;
&lt;p&gt;마음을 통제한다는 것은 &lt;code&gt;system1&lt;/code&gt;에 휘둘리지 않고, &lt;code&gt;system2&lt;/code&gt;로 의식의 흐름을 통제하는 것이다.&lt;br /&gt;
밥을 먹으면 밥을 먹는 것에, 대화를 나누면 대화에, 일을 할때에는 일 그 자체에 몰입하며, &lt;code&gt;system1&lt;/code&gt;이 머리를 들이밀고 들어와도 바로 알아채고 딱 잡아서 멀리 던져버리는 것이다.&lt;/p&gt;
&lt;h3 id=&#34;번뇌의-순간을-포착하여-통제하기&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#번뇌의-순간을-포착하여-통제하기&#34;&gt;&lt;/a&gt; 번뇌의 순간을 포착하여 통제하기&lt;/h3&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;언제 어느 순간이건, 주의 깊게 의식을 통제할 수 있다면 번뇌 에너지의 연쇄작용에 변화를 줘서 긍정적인 방향으로&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;전환시킬 수 있다.&amp;quot; 45p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;명상을 한다는 것은 바로 이런 통제를 하는 연습을 따로 시간을 내서 하는 것이다. 숙달이 되면 일상에 적용할 수 있게 되는 것이다.&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;&amp;#x27;왜 내가 이런 일을 해야만 하는 거냐고!&amp;#x27; 이렇게 외치고 싶은 분노의 번뇌에너지는 &amp;#x27;이런 일을 내가 하는 것이&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;무슨 의미가 있지?&amp;#x27; 라고 번역할 수 있을 것이다. 즉, 의미를 묻는다는 사실은 그 자체로 어떤 오만함을&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;동반하고 있다.&amp;quot; 50p, 51p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;이번 재독에서 가장 많이 얻은 부분이다. (오만할 근거가 하나도 없는 나인데) 회사에서 화가 올라오는 많은 상황은 바로 나의 오만함에서 비롯되었다는 것을 깨달았다. 겸손해져야 한다.&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;싫다는 뇌 속의 불쾌감으로 마음이 빨려 들어가는 것을 의식적으로 통제해서 어쨌든 싫더라도 청소를 시작해 보는 것은&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;승리로 가는 첫걸음이 될 것이다.&amp;quot; 54p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;업무이건 개인사이건 손이 안가고, 하기 싫고, 스트레스인 일이 있을 것이다. 계속 미루지만 마음 한구석에서 스트레스로 남아있는 녀석. 그냥 당장 하자. 그것이 통제이다. 컨트롤이다. 하기 싫은 마음을 통제, 컨트롤하며 하게 하는 것.&lt;/p&gt;
&lt;h3 id=&#34;스님의-상담&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#스님의-상담&#34;&gt;&lt;/a&gt; 스님의 상담&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;험담하는 자리에서 빠져나오고 싶어요&lt;/strong&gt;&lt;br /&gt;
거절해야 한다. 하지만 본인의 부정적인 시각, 번뇌를 잘 다스린 다음 거절 할 것&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;아무런 고민이 없다는 것이 고민입니다&lt;/strong&gt;&lt;br /&gt;
집착없는 고독, 기대와 반발이 없이 온화한 상태라면 문제 없지만, 그건 아닐 것이다. 자신의 진짜 속마음과 말과 행동을 일치 시켜라&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;꼴 보기 싫은 사람, 어떻게 하나요?&lt;/strong&gt;&lt;br /&gt;
분노로 나에게 불이 붙었을 때는 불을 끄는데 먼저 집중해야 한다. 불을 붙인 사람부터 잡으려 해서는 안된다.&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;화를 내는 사람이 되어서는 안된다. 화를 내고 있는 것을 바라보는 사람이 되어야 한다.&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;분노와 일체되지 않는다.&amp;quot; 70p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;직장동료들로부터 따돌림 당하고 있어요&lt;/strong&gt;&lt;br /&gt;
당신 탓이다. 당신이 내뿜는 번뇌 에너지 탓이다.&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;아무리 표정이나 말로 아닌 척 꾸미려고 해도 마음이 번뇌 에너지로 오염되어 있으면&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;그 에너지는 한순간에 주위에 전달된다.&amp;quot; 78p&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;사실은 당신이 발산하는 부정적인 사고로 오염된 번뇌가 그들의 무의식적인 번뇌에 연쇄반응을 일으킨 것이다.&amp;quot; 79p&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;감정을 속여서는 안 된다. 감정은 당신이 아니며 당신의 소유물도 아니다. 또한 감정 속에 당신이 있어서도 안 된다.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;감정이란 것은 아주 짧은 한순간에만 당신의 집을 방문해서 무책임하게 방을 어지럽히고 당신이 정신을 차렸을때는&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;흔적도 없이 내빼 버리는 제행무상(諸行無常)에 지나지 않기 때문이다.&amp;quot; 83p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;스트레스 때문에 폭식 습관이 생겼어요&lt;/strong&gt;&lt;br /&gt;
욕구를 참지 못한 순간을 체험학습의 순간으로 삼아라. 이렇게 먹었더니 배가 더부룩하고 머리도 지끈하네, 다음날 아침이 되니 더 힘드네 하고 예민하게 자신을 관찰하라. 일로 쌓인 스트레스는 일로 풀어야 한다. 술, 도박, 과식등 부정적인 수단을 쓰면 안된다.&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;이렇게 과식했을 때의 신체 상태를 자세히 느껴 보고 &amp;#x27;이런 충격을 두 번 다시는 반복하고 싶지 않다&amp;#x27;는 생각을&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;마음의 밑바닥에서 확실하게 인식할 수 있도록 만든다. 이렇게 해보면 자신을 통제할 수 있는 지혜가 생기게 된다.&amp;quot; 87p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;위선적인 말을 해야 돼서 괴롭습니다&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;마음이 충실감으로 가득 차려면 &amp;#x27;마음과 언어와 신체가 완전히 일치&amp;#x27;되어야 한다.&amp;quot; 93p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;불일치는 번뇌의 원인인 탐욕, 분노, 어리석음 중에서 어리석음을 유발하게 된다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;인생에서든 일에서든 목표가 없어요&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;거창하고 환상에 가까운 목표를 세우려고 할 바에는 오히려 목표라는 것이 없이 단지 그때그때 주어진 일만을&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;착실하게 해나가는 편이 훨씬 마음에는 유익하다.&amp;quot; 103p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;일에 집중이 안 되고 효율이 떨어져요&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;무슨 일이 되었든 머리만 이리저리 굴리지 말고, 몸과 마음을 완전히 일치시켜서 파고들면 스트레스는&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;전혀 발생하지 않는다.&amp;quot; 114p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;(책내용 아님) &lt;code&gt;일이란 해치우는 것이 아니라 정성스럽게 하나하나 마무리 하는 것이다.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;의욕이 없고, 일을 미루고만 싶어요&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;의욕이 없다는 것은 에너지가 소진된 게 아니라 분노에너지가 꽉 찬 것이다.&lt;br /&gt;
기분 전환이라는 변명으로 술, 오락, 여행으로 도망가면 안된다. 눈 앞의 일, 작은 것부터 하나씩 해치워나가야 한다.&lt;/p&gt;
&lt;h2 id=&#34;몸과-마음-삶-그리고-일이-하나가-되는-연습&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#몸과-마음-삶-그리고-일이-하나가-되는-연습&#34;&gt;&lt;/a&gt; 몸과 마음, 삶 그리고 일이 하나가 되는 연습&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;어떤 일이든지 부정적인 번뇌 사고에 사로잡히지 말고 여유로운 마음으로 야무지게 하나하나 극복해 나가면&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;자신의 능력이 향상될 뿐만 아니라 이런저런 욕망이나 번뇌에 휩쓸리지 않는 굳건한 인격이 형성될 것이다.&amp;quot; 145p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;재미없고 하찮아 보이는 일이라 하더라도 전심을 다해 하나씩 해나가야 한다.&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;마음이 신체와 언어와 완전히 일치해 있는 상태여야만 우리는 최고의 충실감을 약속받을 수 있다.&amp;quot; 149p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;몰입의 순간이 탄생하는 지점이다.&lt;/p&gt;
&lt;h3 id=&#34;올바르게-살며-일하기-위해서&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#올바르게-살며-일하기-위해서&#34;&gt;&lt;/a&gt; 올바르게 살며 일하기 위해서&lt;/h3&gt;
&lt;p&gt;팔정도. 올바른 8가지 - &lt;a href=&#34;https://bit.ly/3qeGVeZ&#34;&gt;https://bit.ly/3qeGVeZ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;모든 번뇌의 근원인 탐욕, 분노, 어리석음을 벗어나는 방법이 팔정도와 삼학이다. 그 중 팔정도를 보자.&lt;br /&gt;
올바르지 않은 것은 무엇인가? 탐욕, 분노, 어리석음의 번뇌로 마음이 오염되고 머리속이 잡념으로 가득차 있고 스트레스 받는 상황이다. 그러면 올바름은 무엇을 말하는 것일까? 여기서의 올바름은 절대적인 선과 같은 개념이라기 보다는 있는 그대로를 말한다.&lt;/p&gt;
&lt;p&gt;중용의 시작을 잠깐 언급해보자.&lt;/p&gt;
&lt;p&gt;천명지위성, 솔성지위도, 수도지위교. 타고나는 것을 성이라고 하며, 그 성에서 올바른 것들을 선택하는 것을 도라고 하며, 반복 수련하여 내 것으로 만드는 것을 교라고 한다. 올바름을 이렇게 해석해보고 싶다. 번뇌에 휩싸이지 않고 성 중에서 올바른 것을 선택한다는 것이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;정사유, 올바르게 사유하기&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;생각, 말, 행동의 일치가 중요한데 가장 중요한 것은 생각이다.&lt;br /&gt;
의식이 흘러가는 대로 내버려두지 말고, 탐욕, 분노, 어리석음이 스며들지 않게 통제해야 한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;정언, 올바르게 말하기&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;생각, 말, 행동 삼업(三業)의 일치가 중요하다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;거짓말하지 않기: 말로 나온 것과 마음속 진실의 불일치&lt;/li&gt;
&lt;li&gt;비난하지 않기: 비난은 분노라는 번뇌와 관련이 있다.&lt;/li&gt;
&lt;li&gt;나쁜 소문 만들어내지 않기: 상대방 앞에서 못할 말을 만들어내서 생기는 불일치&lt;/li&gt;
&lt;li&gt;쓸데없는 이야기 말기: 불필요한 말은 삼가야 한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;이 네 가지 덕목을 범하지 않도록 매일매일 주의해야 한다. 그렇게만 된다면 마음과 언어와 신체가 서서히&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;일치를 이루게 되고, 말로 인해 벌어지는 인간관계의 갈등과 스트레스도 줄어들 것이다.&amp;quot; 175p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;정업, 올바르게 일하기&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;현재 눈앞의 일에 집중하는 것이다.&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;여러 다양한 상황 속에서 현재 자신의 신체가 어디에 있고, 무엇을 위해서 무슨 일을 하고 있는지를&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;의식하는 감지력을 갈고 닦아 두어야 한다. 이걸 의식적으로 유념하게 되면&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;지금 이 순간의 현실에 마음이 완전히 연동하고 바싹 달라붙게 된다.&amp;quot; 180p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;정명, 올바르게 살아가기&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;올바른 사명, 혹은 인간으로 태어나서 받는 명(령)대로 살아가기라고 해석해본다.&lt;br /&gt;
중용의 &amp;quot;천명지위성&amp;quot;과 같이 해석해보았다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;정정진, 올바르게 마음쓰기&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;무엇을 추구하고 무엇을 멀리해야 하는 지를 안다면, 이것을 꾸준히 반복하여 내 것으로 만들어야 한다.&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;정진이란 &amp;#x27;이미 일어난 좋은 일들을 반복하려 하고, 자기에게 해를 주었던 일을 두 번 다시 반복하지&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;않도록 마음에게 들려주는 것&amp;#x27;이라고 집약할 수 있다.&amp;quot; 191p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;정념, 올바르게 인식하기&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;센서를 예민하게 잘 관리하는 것을 말한다.&lt;br /&gt;
탐욕, 분노, 어리석음의 번뇌가 끼어들려고 하면 재빨리 눈치채는 것이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;회의시간에 딴짓 하고 있구나! 어리석게 그러지 말자!&lt;/li&gt;
&lt;li&gt;발표 잘해서 인정받고 싶은 탐욕에 휩싸여 있구나! 그러지 말자!&lt;/li&gt;
&lt;li&gt;나에게 감히 이런 말을 하다니 하고 오만함에 휩싸여 분노하고 있구나! 그러지 말자!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;하고 나 자신을 알아채는 것이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;정정, 올바르게 몰두하기&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;정념으로 재빨리 눈치 채었다면, 정정으로 그걸 끊어내는 것이다.&lt;br /&gt;
공부하다 스마트폰 만지는 나를 알아채면, 바로 스마트폰을 끌 수 있는 능력이다.&lt;br /&gt;
이를 위한 준비가 지금까지 말해왔던 것이다.&lt;br /&gt;
정사유, 정어, 정업으로 생각, 말, 행동을 일치시켜서 번뇌를 제거하고&lt;br /&gt;
정정진으로 이를 꾸준히 반복하며&lt;br /&gt;
정념으로 인식하여 놓치지 않는 것이다.&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;있는 힘을 다해서 마음을 무언가 한 가지 일에만 집중시키고 묶어 두는 것이다. 이리저리 날뛰는&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;마음을 한곳에 고정시켜 둬야 한다.&amp;quot; 209p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;정견, 올바르게 바라보기&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;바른 견해를 가지는 것이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;제행무상(諸行無常)&lt;/code&gt; 모든 것은 끊임 없이 변한다는 것을 이해하고 받아들이는 것이다. 삶의 변화를 힘들어하지 말자.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;일체개고(一切皆苦)&lt;/code&gt; 우리의 마음을 가지고 놀려고 하는 탐욕, 분노, 어리석음이 모두 괴로움과 스트레스를 유발한다는 것을 이해하자.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;제법무아(諸法無我)&lt;/code&gt; 나 라는 존재는 없다는 것을 인정한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;우리는 무언가에 몰두하여 강한 충실감을 느낄 수 있게 되면 &amp;#x27;자신&amp;#x27;을 실감할 수 없게 된다.&amp;quot; 223p&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;자아라는건 불행하고 충실하지 않을 때에만 발생하게 되는 환각에 지나지 않는다는 사실을 알아 두어야 한다.&amp;quot; 223p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;이제-제대로-일해봅시다&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#이제-제대로-일해봅시다&#34;&gt;&lt;/a&gt; 이제 제대로 일해봅시다&lt;/h3&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;좌선을 하고 나서야 태어나서 처음으로 집중한다는 것이 어떤 것인지를 이해하게 되었습니다. 그리고 직장에서 의식이&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;일탈될 것 같을 때마다 마음을 통제해서 제대로 집중할 수 있게 되었습니다. 업무를 마친 후에도 스트레스가 쌓이지 않게&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;되니 일을 한다는 게 즐거워졌습니다.&amp;quot; 243p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
        <category term="Hyunseok Jeong" />
        <category term="Happy working" />
        <category term="Mindfulness" />
        <category term="Noble Eightfold Path" />
        <updated>2020-12-03T07:52:06.000Z</updated>
    </entry>
    <entry>
        <id>https://deepbaksu.github.io/2020/11/20/principles-in-refactoring/</id>
        <title>리팩터링 2판 - 리팩터링 원칙</title>
        <link rel="alternate" href="https://deepbaksu.github.io/2020/11/20/principles-in-refactoring/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/2020/11/20/principles-in-refactoring/edgar-chaparro-r6mBXuHnxBk-unsplash.jpg&#34; alt=&#34;Photo by Marc Edgar Chaparro on Unsplash&#34; /&gt;&lt;/p&gt;
&lt;p&gt;리팩터링(2판)의 구성은 1-5장의 개론과 설명, 6-12장의 실제 기법 설명으로 이루어져 있다.&lt;br /&gt;
그 중 4장은 테스트에 관한 내용인데, 물론 리팩터링과 밀접한 주제이긴 하지만 여기서는 연관성과 간략한 소개만 있으며, 5장은 6장부터 12장을 보는 방법에 대한 안내이다.&lt;br /&gt;
리팩터링의 전반적 개요를 다룬 2장 리팩터링 원칙을 정리하여 공유한다.&lt;/p&gt;
&lt;h2 id=&#34;리팩터링이란&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#리팩터링이란&#34;&gt;&lt;/a&gt; 리팩터링이란&lt;/h2&gt;
&lt;p&gt;리팩터링은 외부에서 보이는 &lt;code&gt;겉보기 동작(observable behavior)&lt;/code&gt;은 그대로 유지하되,&lt;br /&gt;
코드를 이해하고 수정하기 쉽게 내부의 구조를 변경하는 것이다. 즉, 설계 변경이다.&lt;/p&gt;
&lt;p&gt;새 집으로 이사를 와서 가구와 전자제품을 적당히 편리하다 싶은 곳에 두고 살아가면서&lt;br /&gt;
점차 가장 적합하다 싶은 위치로 재배치를 한다고 할까? 아무리 고심해서 결정한다 하여도&lt;br /&gt;
살아보기 전에는 최적의 배치를 알 수 없는 것이다. 심지어는 그때는 맞았는데 시간이 흐르며 바뀌는 것도 있다.&lt;/p&gt;
&lt;p&gt;특정한 방식으로 코드를 정리하는 것만이 리팩터링이다. 겉보기 동작에 변화가 없는 작은 단계들을 거쳐서 완성하는데,&lt;br /&gt;
그렇기에 언제든 중간 단계에서 멈출 수 있다.&lt;/p&gt;
&lt;p&gt;코드 정리 및 구조 변경은 &lt;code&gt;재구성(restructuring)&lt;/code&gt; 이며, 리팩터링은 재구성의 특수한 한 형태이다.&lt;br /&gt;
사실 이 책을 읽기 전에는 재구성을 리팩터링이라 오해하고 있었다.&lt;/p&gt;
&lt;p&gt;겉보기 동작에 변화가 없다는 점에 리팩터링과 성능 최적화는 같다고 볼 수 있지만 그 목표는 다르다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;리팩터링: 겉보기 동작 변화없음. 목표는 이해와 수정이 쉬운 코드&lt;/li&gt;
&lt;li&gt;성능 최적화; 겉보기 동작 변화없음. 목표는 속도 개선&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;두-개의-모자&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#두-개의-모자&#34;&gt;&lt;/a&gt; 두 개의 모자&lt;/h2&gt;
&lt;p&gt;켄트 벡의 비유인데 기능을 추가하는 것과 리팩터링을 하는 것은 엄격히 구분하라는 것이다. 둘을 섞어서 하다가는 탈이 나고 만다.&lt;br /&gt;
기능 추가할 때는 기능 추가 모자를 쓰고, 기능 추가만 한다. 리팩터링을 할 때는 리팩터링 모자를 쓰고, 리팩터링만 한다.&lt;/p&gt;
&lt;h2 id=&#34;리팩터링을-왜-하나요&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#리팩터링을-왜-하나요&#34;&gt;&lt;/a&gt; 리팩터링을 왜 하나요?&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;난 뛰어난 프로그래머가 아니에요. 단지 뛰어난 습관을 지닌 괜찮은 프로그래머일 뿐이에요.&amp;quot; 83p, 켄트 벡&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;소프트웨어 아키텍처가 좋아진다&lt;/li&gt;
&lt;li&gt;소프트웨어를 이해하기 쉬워진다.&lt;/li&gt;
&lt;li&gt;버그를 쉽게 찾을 수 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이와 같은 이유로, 프로그래밍 속도가 빨라진다.&lt;/p&gt;
&lt;p&gt;마틴 파울러는 &lt;code&gt;설계 지구력 가설(Design Stamina Hypothesis)&lt;/code&gt; 이라는 표현을 썼는데&lt;br /&gt;
리팩터링을 잘 해두어서 &lt;code&gt;설계가 잘 되어 있고&lt;/code&gt;, &lt;code&gt;이해하기 쉬우며&lt;/code&gt;, &lt;code&gt;버그도 찾기 쉬운 코드&lt;/code&gt;에서는&lt;br /&gt;
코드에 기능을 추가하거나, 유지 보수하는 속도가 결코 느려지지 않는다는 것이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/11/20/principles-in-refactoring/designStaminaGraph.png&#34; alt=&#34;design stamina hypothesis&#34; /&gt;&lt;/p&gt;
&lt;p&gt;프로젝트 초기에 아무리 세심하고 치밀하게 설계를 해도 코딩을 시작하면 그때부터 디자인은 점차 망가지게 마련이다.&lt;br /&gt;
리팩터링을 한다는 것은 설계를 지속적으로 개선한다는 것이다. 그 덕분에 시간이 지나도 생산성이 떨어지지 않게 되는 것이다.&lt;/p&gt;
&lt;h2 id=&#34;리팩터링은-언제-해야-할까&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#리팩터링은-언제-해야-할까&#34;&gt;&lt;/a&gt; 리팩터링은 언제 해야 할까?&lt;/h2&gt;
&lt;p&gt;책에서는 다양한 기준으로 리팩터링의 시점을 이야기하고 있다.&lt;/p&gt;
&lt;h3 id=&#34;세-번-반복하면-리팩터링-돈-로버츠don-roberts&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#세-번-반복하면-리팩터링-돈-로버츠don-roberts&#34;&gt;&lt;/a&gt; 세 번 반복하면 리팩터링 - 돈 로버츠(Don Roberts)&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;그냥 코딩하다가&lt;/li&gt;
&lt;li&gt;중복 작업을 인식하면 일단은 그냥 코딩한다.&lt;/li&gt;
&lt;li&gt;하지만, 비슷한 작업을 세 번째 하게 되면 리팩터링을 할 때이다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;준비를-위한-리팩터링preparatory-refactoring-기능을-쉽게-추가할-수-있다&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#준비를-위한-리팩터링preparatory-refactoring-기능을-쉽게-추가할-수-있다&#34;&gt;&lt;/a&gt; 준비를 위한 리팩터링(Preparatory Refactoring) - 기능을 쉽게 추가할 수 있다.&lt;/h3&gt;
&lt;p&gt;현재 구조를 살펴보고 구조를 다듬어서 새로운 기능을 적용하기 좋게 만들어주자.&lt;br /&gt;
버그를 잡을때도 좋다. 버그를 한 군데로 모아서 리팩터링하는 것이다.&lt;/p&gt;
&lt;h3 id=&#34;이해를-위한-리팩터링comprehension-refactoring&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#이해를-위한-리팩터링comprehension-refactoring&#34;&gt;&lt;/a&gt; 이해를 위한 리팩터링(Comprehension Refactoring)&lt;/h3&gt;
&lt;p&gt;수정을 하려면 이해를 해야한다.&lt;br /&gt;
이해를 한 다음 간단하게 변수, 함수의 이름을 바꾸는 것 만으로도 전체 설계가 눈에 들어오기 시작한다.&lt;br /&gt;
이해한 것을 코드 속에 녹여내야 한다. 그래야 다음에 코드를 들여다 볼때 또다시 이해를 해야하는 과정을 뛰어넘을 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;쓰레기-줍기-리팩터링litter-pickup-refactoring&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#쓰레기-줍기-리팩터링litter-pickup-refactoring&#34;&gt;&lt;/a&gt; 쓰레기 줍기 리팩터링(Litter-Pickup Refactoring)&lt;/h3&gt;
&lt;p&gt;코드 분석중 원래 하려던 일과 다른 문제들, 비유하자면 쓰레기들을 발견하였다면?&lt;br /&gt;
당장 할 수 있는 것들을 조금이라도 해두고, 나머지는 메모를 해둔 다음에 하던 일로 돌아간다.&lt;br /&gt;
리팩터링은 작은 단계들로 이루어지고, 각각의 단계는 전체 코드를 깨뜨리지 않는다는 것을 기억하자.&lt;br /&gt;
작은 단계라도 할 수 있는 단계만큼 해두는 것이다.&lt;/p&gt;
&lt;h3 id=&#34;계획된-리팩터링과-수시로-하는-리팩터링&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#계획된-리팩터링과-수시로-하는-리팩터링&#34;&gt;&lt;/a&gt; 계획된 리팩터링과 수시로 하는 리팩터링&lt;/h3&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;보기 싫은 코드를 발견하면 리팩터링하자. 그런데 잘 작성된 코드 역시 수많은 리팩터링을 거쳐야 한다.&amp;quot; 88p&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;무언가 수정하려 할 때는 먼저 수정하기 쉽게 정돈하고(단, 만만치 않을 수 있다) 그런 다음 수정하자.&amp;quot; - 켄트 벡. 88p&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;리팩터링 작업 대부분은 드러나지 않게, 기회가 될 때마다 해야 한다.&amp;quot; 89p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;앞서 언급한 준비를 위한, 이해를 위한, 쓰레기 줍기 리팩터링은 기회가 될때에 하는 것이다.&lt;br /&gt;
(때로는 필요할 수 있지만) 리팩터링이란 계획적으로 하는게 아니다.&lt;/p&gt;
&lt;h3 id=&#34;오래-걸리는-리팩터링&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#오래-걸리는-리팩터링&#34;&gt;&lt;/a&gt; 오래 걸리는 리팩터링&lt;/h3&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;팀 전체가 리팩터링에 매달리는 데는 회의적이다.&amp;quot; 89p, 마틴 파울러&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;일부러 시간을 내서 하지 말고, 리팩터링 해야할 코드를 만날 때 마다, 리팩터링 하자.&lt;/p&gt;
&lt;h3 id=&#34;코드-리뷰에-리팩터링-활용하기&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#코드-리뷰에-리팩터링-활용하기&#34;&gt;&lt;/a&gt; 코드 리뷰에 리팩터링 활용하기&lt;/h3&gt;
&lt;p&gt;코드를 보고 떠오르는 걸 개선안을 제시하지 말고 리팩터링을 하면 어떻게 될까 생각하거나, 실제로 해보자&lt;br /&gt;
작성자 없이 pull request 하는 것은 효과적이지 않다. 작성자와 함께 앉아 코드를 훑어가면서 리팩터링 하자(pair programming)&lt;/p&gt;
&lt;h3 id=&#34;관리자에게는-뭐라고-말해야-할까&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#관리자에게는-뭐라고-말해야-할까&#34;&gt;&lt;/a&gt; 관리자에게는 뭐라고 말해야 할까?&lt;/h3&gt;
&lt;p&gt;필요성을 아는 관리자라면 리팩터링을 권장할 것이며, 팀원의 리팩터링 역량이 충분한지 수시로 살펴볼 것이다.&lt;br /&gt;
필요성을 모르는 관리자라면 말하지 말자. 내가 필요성을 알고, 그 덕분에 더 빠르게 개발할 수 있다는 것을 알면 &lt;code&gt;책임있게&lt;/code&gt;, &lt;code&gt;프로답게&lt;/code&gt;, 리팩터링을 하는 것이다.&lt;/p&gt;
&lt;h3 id=&#34;리팩터링하지-말아야-할-때&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#리팩터링하지-말아야-할-때&#34;&gt;&lt;/a&gt; 리팩터링하지 말아야 할 때&lt;/h3&gt;
&lt;p&gt;굳이 수정할 필요 없다면 하지 말자. 외부 API 또는 그와 유사하게 호출하여 쓰는 코드라면 그냥 두자. 충분히 내부동작을 이해해야 할 시점에 리팩터링을 하면 된다.&lt;/p&gt;
&lt;h2 id=&#34;리팩터링-시-고려할-문제&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#리팩터링-시-고려할-문제&#34;&gt;&lt;/a&gt; 리팩터링 시 고려할 문제&lt;/h2&gt;
&lt;p&gt;발생할 수 있는 문제에 대한 고려도 해야 한다.&lt;/p&gt;
&lt;h3 id=&#34;새-기능-개발-속도가-저하된다고&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#새-기능-개발-속도가-저하된다고&#34;&gt;&lt;/a&gt; 새 기능 개발 속도가 저하된다고?&lt;/h3&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;리팩터링의 궁극적인 목적은 개발 속도를 높여서, 더 적은 노력으로 더 많은 가치를 창출하는 것이다.&amp;quot; 92p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;당장 보아서는 속도가 느려지는 것 같지만, 애초에 리팩터링의 목표중 하나는 개발 속도를 높이는 것이다.&lt;br /&gt;
리팩터링은 &lt;code&gt;도덕적&lt;/code&gt;, &lt;code&gt;미학적&lt;/code&gt; 이유로 하는 것이 아니다. &lt;code&gt;경제적&lt;/code&gt;인 이유로 하는 것이다.&lt;/p&gt;
&lt;h3 id=&#34;코드-소유권&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#코드-소유권&#34;&gt;&lt;/a&gt; 코드 소유권&lt;/h3&gt;
&lt;p&gt;다른 팀원, 또는 나아가 외부로 공개된 코드는 변경하기가 쉽지 않다.&lt;br /&gt;
그래도 최소한 팀 단위의 소유권을 가지도록 하여(=좀 더 자유롭고 넓은 코드 수정권한을 주어서) 관리의 책임은 나누되 수정은 자유롭게 해주자. 단, 이것은 마틴 파울러의 의견이다.&lt;/p&gt;
&lt;h3 id=&#34;브랜치&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#브랜치&#34;&gt;&lt;/a&gt; 브랜치&lt;/h3&gt;
&lt;p&gt;브랜치로 나누어서 작업하는 경우 머지(브랜치를 master로 합치기), 또는 통합(수시로 master를 브랜치로 합치기)을 할 수 있다.&lt;br /&gt;
마틴 파울러는 매우 짧게 통합하기를 주장한다. 2-3일 보다도 짧게 CI(Continuous Integration) 또는 TBD(Truck-Based Development) 하자고 한다. 다만 master 브랜치를 건강하게 유지하려면, 개발중인 기능은 flag를 이용하여 disable 을 시켜두도록 한다.&lt;/p&gt;
&lt;p&gt;무엇보다 CI와 리팩터링은 궁합이 좋다. 켄트 백이 &lt;code&gt;익스트림 프로그래밍(eXtreme Programming)&lt;/code&gt;을 만든 이유이다.&lt;/p&gt;
&lt;h3 id=&#34;테스팅&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#테스팅&#34;&gt;&lt;/a&gt; 테스팅&lt;/h3&gt;
&lt;p&gt;리팩터링의 대표적 특징은 겉보기 동작이 똑같이 유지된다는 것이다.&lt;br /&gt;
절차에 따라서 하면 단계별 변경이 작다. 테스트를 그 단계별로 매번 하면 된다. 테스트 코드가 필요한 이유이다.&lt;br /&gt;
믿을 수 있는 &lt;code&gt;자동 리팩터링&lt;/code&gt;만 쓰자는 사람들도 있으니 참고하자.&lt;/p&gt;
&lt;h3 id=&#34;레거시-코드&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#레거시-코드&#34;&gt;&lt;/a&gt; 레거시 코드&lt;/h3&gt;
&lt;p&gt;어마무시한, 손도 대기 싫은 레거시 코드를 만져야 한다면?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;테스트를 보강한다.&lt;/li&gt;
&lt;li&gt;조금씩이라도 더 개선하려고 노력한다.&lt;/li&gt;
&lt;li&gt;자주보는 곳을 더 개선한다. 더 잘 이해하게 되는 곳이고, 더 중요한 곳일 가능성이 높다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;데이터베이스&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#데이터베이스&#34;&gt;&lt;/a&gt; 데이터베이스&lt;/h3&gt;
&lt;p&gt;데이터베이스도 리팩터링 할 수 있다.&lt;br /&gt;
변환 수행토드 작성후, VCS에 저장한 다음 마이그레이션 스크립트를 실행한다.&lt;br /&gt;
가능한 여러단계로 나누어서 한다. 프로덕션 환경에서 문제 생겼을때 되돌리기 쉽기 때문이다.&lt;/p&gt;
&lt;h2 id=&#34;리팩터링-아키텍처-애그니yagni&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#리팩터링-아키텍처-애그니yagni&#34;&gt;&lt;/a&gt; 리팩터링, 아키텍처, 애그니(YAGNI)&lt;/h2&gt;
&lt;p&gt;먼저 충분히 고려하는 것과, 나중에 개선하는 것 중에서 어느게 나을까?&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;나는 나중에 문제를 더 깊이 이해하게 됐을 때 처리하는 쪽이 훨씬 낫다고 생각하는 편이다.&amp;quot; 101p, 마틴 파울러&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;이 부분은 현업에서 느끼고는 했었는데 많은 공감이 되었다.&lt;/p&gt;
&lt;p&gt;당장 필요한 기능만 구현하자. 대신 제대로, 멋지게, 정성스럽게 구현하자.&lt;br /&gt;
불확실한 미래에 대한 대비보다는 당장 눈앞의 기능을 잘 구현하자는 것이다.&lt;br /&gt;
개발을 해나가며 요구사항을 더 잘 이해하게 되면 리팩터링을 하면서 더 개선하자.&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;- You Aren&amp;#x27;t Going to Need It.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- Simple design&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- Incremental design&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;리팩터링과-소프트웨어-개발-프로세스&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#리팩터링과-소프트웨어-개발-프로세스&#34;&gt;&lt;/a&gt; 리팩터링과 소프트웨어 개발 프로세스&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;자가 테스트 코드, 지속적 통합, 리팩터링이라는 세 기법은 서로 강력한 상승효과를 발휘한다.&amp;quot; 102p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Test-Driven Development = 자가 테스트 코드(self-testing code) + 리팩터링&lt;br /&gt;
단계별로 리팩터링을 하면서, 사이사이마다 테스트를 통해 겉보기 동작이 변함 없는지 확인하는 것이다.&lt;/p&gt;
&lt;h2 id=&#34;리팩터링과-성능&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#리팩터링과-성능&#34;&gt;&lt;/a&gt; 리팩터링과 성능&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;나는 실제로 소프트웨어를 이해하기 쉽게 만들기 위해 속도가 느려지는 방향으로 수정하는 경우가 많다.&amp;quot; 103p&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;하드 리얼타임(hard real-time) 시스템을 제외한 소프트웨어를 빠르게 만드는 비결은, 먼저 튜닝하기 쉽게 만들고 나서 원하는 속도가 나게끔 튜닝하는 것이다.&amp;quot; 103p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;성능 개선의 세 방법은 다음과 같은데 3번으로 가자.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;시간예산 분배(time budgeting): 하드 리얼타임 시스템에서 많이 사용. 자원을 최적으로 할당함&lt;/li&gt;
&lt;li&gt;끊임없이 관심 기울이기: 성능 개선에만 신경쓰면 코드가 점점더 알아먹기 어렵게 되고, 컴파일러, 런타임, 하드웨어 동작을 충분히 이해하지 못한 코드가 된다.&lt;/li&gt;
&lt;li&gt;일단은 코드를 다루기 쉽게 만드는데 집중하자. 때가 되면 각을 잡고 성능 최적화를 하는 것이다.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;프로파일러로 분석하여 시간, 공간을 잡아먹는 지점을 알아낸다. 짬밥과 직관으로 하는 것이 아니다.&lt;/li&gt;
&lt;li&gt;알아낸, 개선할 수 있는 작은 부분들을 개선한다. 적은 노력으로 큰 효과를 얻을 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;시스템에 대해 잘 알더라도 섣불리 추측하지 말고 성능을 측정해봐야 한다.(profiling)&amp;quot; 105p&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;성능에 대한 흥미로운 사실은, 대부분 프로그램은 전체 코드 중 극히 일부에서 대부분의 시간을 소비한다는 것이다.&amp;quot; 105p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;이와 같이 하면&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;성능 개선에 투입하는 시간 최적화&lt;/li&gt;
&lt;li&gt;리팩터링 잘 되어 있으니 세밀하게 분석하기 쉽고, 프로파일러가 지적하는 성능문제 범위가 좁아진다.&lt;/li&gt;
&lt;li&gt;당장의 리팩터링은 성능을 저하시키지만, 나중에 튜닝하기 훨씬 좋아진다&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Hyunseok Jeong" />
        <category term="Martin Fowler" />
        <category term="Refactoring" />
        <category term="Principles" />
        <updated>2020-11-20T11:10:02.000Z</updated>
    </entry>
    <entry>
        <id>https://deepbaksu.github.io/2020/11/12/powershell-prompt-script/</id>
        <title>윈도우 PowerShell - custom prompt 스크립트 만들기</title>
        <link rel="alternate" href="https://deepbaksu.github.io/2020/11/12/powershell-prompt-script/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/2020/11/12/powershell-prompt-script/kerensa-pickett-sTnZRUJm-kI-unsplash.jpg&#34; alt=&#34;Photo by Kerensa Pickett on Unsplash&#34; /&gt;&lt;/p&gt;
&lt;p&gt;지난번에는 git 자동 완성기능을 사용하고, prompt에 git 정보를 추가하고 싶어서&lt;br /&gt;
재빨리 구글링하여 PowerShell 에서 원하는 기능을 만들었다.&lt;/p&gt;
&lt;p&gt;참고링크: &lt;a href=&#34;https://jusths.tistory.com/180&#34;&gt;https://jusths.tistory.com/180&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;아래는 그 결과물이다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;git 자동완성이 되며&lt;/li&gt;
&lt;li&gt;git 정보가 prompt 에 나오며&lt;/li&gt;
&lt;li&gt;마지막 명령의 실행 소요시간이 표시된다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/2020/11/12/powershell-prompt-script/1.png&#34; alt=&#34;previous result&#34; /&gt;&lt;/p&gt;
&lt;p&gt;이번에는 이를 위해 사용한 스크립트를 조금 더 분석하여 나만의 prompt 를 만들어 보았다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;디렉토리를 Linux 스타일로 표현하고, 이어서 &lt;code&gt;posh-git&lt;/code&gt;의 git 정보가 표시된다.
&lt;ul&gt;
&lt;li&gt;디렉토리가 너무 길면 … 으로 줄여서 표현한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;명령의 실행 소요시간을 우측 정렬로 노란색 배경컬러로 표시했다.&lt;/li&gt;
&lt;li&gt;이어서 User 정보, 현재 시간을 표시하였다. User 정보는 Administrator 이면 Admin 으로 표시된다.&lt;/li&gt;
&lt;li&gt;프롬프트는 다음줄에 작고 앙증맞은 → 화살표로 하였다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/2020/11/12/powershell-prompt-script/2.png&#34; alt=&#34;final result&#34; /&gt;&lt;/p&gt;
&lt;p&gt;최종 결과는 GitHub Gist 에 올려두었다.&lt;br /&gt;
GitHub Gist: &lt;a href=&#34;https://gist.github.com/83ea6615ff5a8c2baf5682443f39dc42&#34;&gt;https://gist.github.com/83ea6615ff5a8c2baf5682443f39dc42&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;스크립트-간단-분석&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#스크립트-간단-분석&#34;&gt;&lt;/a&gt; 스크립트 간단 분석&lt;/h2&gt;
&lt;p&gt;본인의 PowerShell prompt 에 적용하려면 user 디렉토리의 Documents\PowerShell 로 들어가서 profile.ps1 파일에 Gist의 스크립트를 덮어쓰면 된다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;PowerShell이 실행될 때마다 &lt;code&gt;function Prompt()&lt;/code&gt; 를 가져와서 PowerShell 의 prompt 를 그릴때에 사용한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Write-Host&lt;/code&gt; 는 echo 와 같다고 보면 된다. 화면에 출력을 해주는 기능이다.
&lt;ul&gt;
&lt;li&gt;명령들 사이에 한 줄을 띄워주려 사용하였다. 줄 바꿈을 하지 않으려면 &lt;code&gt;-NoNewLine&lt;/code&gt; 옵션을 주면 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PowerShell 의 배열을 다루는 함수들을 사용하여 현재 디렉토리 경로 문자열을 다듬었다.
&lt;ul&gt;
&lt;li&gt;Linux 처럼 보이게 콜론(:)을 없애고, 역슬래시()를 기준으로 문자열을 나누어 배열에 담은 다음&lt;/li&gt;
&lt;li&gt;배열의 개수가 3개 이상인지 여부로 분기하여, 너무 긴 경로는 &lt;code&gt;…&lt;/code&gt; 로 줄여줄 수 있도록 하였다.&lt;/li&gt;
&lt;li&gt;그리고 &lt;code&gt;-join&lt;/code&gt; 을 사용하여 슬래시(/)로 Linux 느낌이 나게 다시 경로 문자열을 만들었다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;만든 문자열을 &lt;code&gt;Write-Host&lt;/code&gt; 로 출력하여 첫번째 출력을 완성하였다.
&lt;ul&gt;
&lt;li&gt;이때 &lt;code&gt;-ForegroundColor Cyan&lt;/code&gt; 옵션을 이용하여 글자색을 바꾸어 보았으며&lt;/li&gt;
&lt;li&gt;같은 라인에 추가적인 정보를 담으려 하기에 &lt;code&gt;-NoNewLine&lt;/code&gt; 으로 줄바꿈을 방지했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Prompt&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;Write-Host&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;# one blank line&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 1. pwd&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$pwdArray&lt;/span&gt; = &lt;span class=&#34;variable&#34;&gt;$&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$pwd&lt;/span&gt;.path &lt;span class=&#34;operator&#34;&gt;-replace&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;:&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;).split(&lt;span class=&#34;string&#34;&gt;&amp;#x27;\&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;variable&#34;&gt;$pwdArray&lt;/span&gt;.count &lt;span class=&#34;operator&#34;&gt;-gt&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable&#34;&gt;$linuxPath&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;quot;/&lt;span class=&#34;variable&#34;&gt;$&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$pwdArray&lt;/span&gt;[0], &amp;#x27;...&amp;#x27;, &lt;span class=&#34;variable&#34;&gt;$pwdArray&lt;/span&gt;[-2], &lt;span class=&#34;variable&#34;&gt;$pwdArray&lt;/span&gt;[-1] -join (&amp;#x27;/&amp;#x27;))&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable&#34;&gt;$linuxPath&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;quot;/&lt;span class=&#34;variable&#34;&gt;$&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$pwdArray&lt;/span&gt; -join (&amp;#x27;/&amp;#x27;))&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;write-host&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$linuxPath&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;-ForegroundColor&lt;/span&gt; Cyan &lt;span class=&#34;literal&#34;&gt;-NoNewline&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;vcsStatus 출력은 Posh-git 이 import 되었는지를 확인하여, Write-VcsStatus 를 이용하여 출력을 하였다.&lt;/li&gt;
&lt;li&gt;이 출력부분 역시 costomize 가능한 것으로 알고 있는데 심심할 때 한 번 들여다보고 싶은 부분이다.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2. git status&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;Get-Module&lt;/span&gt; Posh&lt;span class=&#34;literal&#34;&gt;-git&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$vcsStatus&lt;/span&gt; = &lt;span class=&#34;built_in&#34;&gt;Write-VcsStatus&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;write-host&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$vcsStatus&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;-NoNewline&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;오른쪽-정렬하여-출력할-세-가지-정보&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#오른쪽-정렬하여-출력할-세-가지-정보&#34;&gt;&lt;/a&gt; 오른쪽 정렬하여 출력할 세 가지 정보&lt;/h3&gt;
&lt;p&gt;마지막 실행한 명령의 실행 소요시간, Administrator 인지를 포함한 User 정보, 현재 시간을 오른쪽 정렬로 뿌려보려고 한다.&lt;br /&gt;
이를 위해서 각각의 정보를 우선 문자열로 뽑아 보았다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$elapsedTime&lt;/code&gt; 은 마지막 명령의 실행 소요시간을 담고 있다.&lt;br /&gt;
참고 코드는 소요시간의 범위에 따라 다른 색깔, 다른 포맷으로 출력이 되도록 분기한 것이었는데,&lt;br /&gt;
그 결과를 바로 출력하지 않고 문자열에 담도록 하고, 색깔과 관련한 부분은 제외하였다.&lt;br /&gt;
조금 복잡해 보이지만 차근히 따라가면 이해가 될 것이다.&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3. get command execution time&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$history&lt;/span&gt; = &lt;span class=&#34;built_in&#34;&gt;Get-History&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;-ErrorAction&lt;/span&gt; Ignore &lt;span class=&#34;literal&#34;&gt;-Count&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;variable&#34;&gt;$history&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$elapsedTime&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$ts&lt;/span&gt; = &lt;span class=&#34;built_in&#34;&gt;New-TimeSpan&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$history&lt;/span&gt;.StartExecutionTime &lt;span class=&#34;variable&#34;&gt;$history&lt;/span&gt;.EndExecutionTime&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt; (&lt;span class=&#34;variable&#34;&gt;$ts&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123; &lt;span class=&#34;variable&#34;&gt;$_&lt;/span&gt;.TotalSeconds &lt;span class=&#34;operator&#34;&gt;-lt&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;#125; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            [&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;]&lt;span class=&#34;variable&#34;&gt;$d&lt;/span&gt; = &lt;span class=&#34;variable&#34;&gt;$_&lt;/span&gt;.TotalMilliseconds&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;variable&#34;&gt;$elapsedTime&lt;/span&gt; += &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#123;0&amp;#125;ms&amp;#x27;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;-f&lt;/span&gt; (&lt;span class=&#34;variable&#34;&gt;$d&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123; &lt;span class=&#34;variable&#34;&gt;$_&lt;/span&gt;.totalminutes &lt;span class=&#34;operator&#34;&gt;-lt&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;#125; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            [&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;]&lt;span class=&#34;variable&#34;&gt;$d&lt;/span&gt; = &lt;span class=&#34;variable&#34;&gt;$_&lt;/span&gt;.TotalSeconds&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;variable&#34;&gt;$elapsedTime&lt;/span&gt; += &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#123;0&amp;#125;s&amp;#x27;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;-f&lt;/span&gt; (&lt;span class=&#34;variable&#34;&gt;$d&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123; &lt;span class=&#34;variable&#34;&gt;$_&lt;/span&gt;.totalminutes &lt;span class=&#34;operator&#34;&gt;-ge&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;#125; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;variable&#34;&gt;$elapsedTime&lt;/span&gt; += &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;#123;0:HH:mm:ss&amp;#125;&amp;quot;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;-f&lt;/span&gt; ([&lt;span class=&#34;built_in&#34;&gt;datetime&lt;/span&gt;]&lt;span class=&#34;variable&#34;&gt;$ts&lt;/span&gt;.Ticks)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Default &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;variable&#34;&gt;$elapsedTime&lt;/span&gt; += &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#123;0&amp;#125;ms&amp;#x27;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;-f&lt;/span&gt; (&lt;span class=&#34;variable&#34;&gt;$d&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$elapsedTime&lt;/span&gt; += &lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;$adminHeader&lt;/code&gt; 는 PowerShell 이 Administrator 로 실행되고 있는지 확인하여, Admin 또는 USERNAME 으로 문자열을 저장해둔다.&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 4. check if admin&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$currentUser&lt;/span&gt; = [&lt;span class=&#34;type&#34;&gt;Security.Principal.WindowsPrincipal&lt;/span&gt;](&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;type&#34;&gt;Security.Principal.WindowsIdentity&lt;/span&gt;]::GetCurrent())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$isAdminProcess&lt;/span&gt; = &lt;span class=&#34;variable&#34;&gt;$currentUser&lt;/span&gt;.IsInRole(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;type&#34;&gt;Security.Principal.WindowsBuiltInRole&lt;/span&gt;]::Administrator)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$adminHeader&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;variable&#34;&gt;$isAdminProcess&lt;/span&gt;) &amp;#123; &lt;span class=&#34;string&#34;&gt;&amp;#x27; Admin &amp;#x27;&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123; &lt;span class=&#34;string&#34;&gt;&amp;quot; &lt;span class=&#34;variable&#34;&gt;$env:USERNAME&lt;/span&gt; &amp;quot;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;현재 시간을 &lt;code&gt;$now&lt;/code&gt; 변수에 담는다.&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 5. time&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$now&lt;/span&gt; = &lt;span class=&#34;built_in&#34;&gt;get-date&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;-format&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot; HH:mm:ss &amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;만들어둔 세 문자열 &lt;code&gt;$elapsedTime&lt;/code&gt;, &lt;code&gt;$adminHeader&lt;/code&gt;, &lt;code&gt;$now&lt;/code&gt; 을 오른쪽 정렬로 출력한다.&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 6. align right: elapsedTime, adminHeader, now&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$rightInfo&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;quot;&lt;span class=&#34;variable&#34;&gt;$elapsedTime&lt;/span&gt;&lt;span class=&#34;variable&#34;&gt;$adminHeader&lt;/span&gt;&lt;span class=&#34;variable&#34;&gt;$now&lt;/span&gt;  &amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$startposx&lt;/span&gt; = &lt;span class=&#34;variable&#34;&gt;$Host&lt;/span&gt;.UI.RawUI.windowsize.width - &lt;span class=&#34;variable&#34;&gt;$rightInfo&lt;/span&gt;.length&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$startposy&lt;/span&gt; = &lt;span class=&#34;variable&#34;&gt;$Host&lt;/span&gt;.UI.RawUI.CursorPosition.Y&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$Host&lt;/span&gt;.UI.RawUI.CursorPosition = &lt;span class=&#34;built_in&#34;&gt;New-Object&lt;/span&gt; System.Management.Automation.Host.Coordinates &lt;span class=&#34;variable&#34;&gt;$startposx&lt;/span&gt;,&lt;span class=&#34;variable&#34;&gt;$startposy&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;variable&#34;&gt;$elapsedTime&lt;/span&gt;.length &lt;span class=&#34;operator&#34;&gt;-ne&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;write-host&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$elapsedTime&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;-ForegroundColor&lt;/span&gt; Black &lt;span class=&#34;literal&#34;&gt;-NoNewline&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;-BackgroundColor&lt;/span&gt; DarkYellow&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;write-host&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$adminHeader&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;-ForegroundColor&lt;/span&gt; Black &lt;span class=&#34;literal&#34;&gt;-NoNewline&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;-BackgroundColor&lt;/span&gt; DarkGreen&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;write-host&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$now&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;-ForegroundColor&lt;/span&gt; Gray &lt;span class=&#34;literal&#34;&gt;-NoNewline&lt;/span&gt;  &lt;span class=&#34;literal&#34;&gt;-BackgroundColor&lt;/span&gt; Red&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;화살표를 출력한다. 왜 마지막 줄은 Write-Host 를 사용하지 않아도 출력이 되는 것인지는 모르겠다.&lt;br /&gt;
이렇게 하면 &lt;code&gt;PS&amp;gt;&lt;/code&gt; 라는 prompt 도 사라진다. 이것 역시 정확한 이유는 알지 못한다.&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 8. prompt arrow&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;variable&#34;&gt;$host&lt;/span&gt;.UI.RawUI.CursorPosition.X &lt;span class=&#34;operator&#34;&gt;-gt&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123; &lt;span class=&#34;built_in&#34;&gt;Write-Host&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;&lt;span class=&#34;variable&#34;&gt;$&lt;/span&gt;([char]0x2192) &amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;마지막으로 posh-git 을 import 해주면 된다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Import-Module posh-git&lt;/code&gt; 은 말 그대로 posh-git 을 가져와서 git 과 관련한 정보를 쓸 수 있게 해준다.&lt;/p&gt;
&lt;p&gt;끝&lt;/p&gt;
</content>
        <category term="Hyunseok Jeong" />
        <category term="Windows" />
        <category term="PowerShell" />
        <category term="PowerShell script" />
        <category term="Git" />
        <category term="Prompt" />
        <updated>2020-11-12T10:27:12.000Z</updated>
    </entry>
    <entry>
        <id>https://deepbaksu.github.io/2020/11/05/powershell-with-git-support/</id>
        <title>윈도우 PowerShell에서 git을 좀더 편하게 사용하자</title>
        <link rel="alternate" href="https://deepbaksu.github.io/2020/11/05/powershell-with-git-support/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/2020/11/05/powershell-with-git-support/marc-rentschler-F1rES0sVuIw-unsplash.jpg&#34; alt=&#34;Photo by Marc Rentschler on Unsplash&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Linux&lt;/code&gt; 또는 &lt;code&gt;macOS&lt;/code&gt; 환경에서는 &lt;code&gt;git&lt;/code&gt; 명령들이 자동으로 완성되어 편리한데 윈도우 &lt;code&gt;cmd&lt;/code&gt;나 &lt;code&gt;PowerShell&lt;/code&gt;에서는 기본적으로 되지않아 불편하였다.&lt;br /&gt;
그렇다고 &lt;code&gt;git bash&lt;/code&gt;를 사용하자니 윈도우에서는 다른 불편한 상황이 종종 발생하여&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;git 명령어를 tab으로 자동완성 할 수 있고&lt;/li&gt;
&lt;li&gt;prompt에 git 정보를 담을 수 있는 방법을 찾아 보았다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;tldr-너무-길면-읽지-않을꺼죠&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#tldr-너무-길면-읽지-않을꺼죠&#34;&gt;&lt;/a&gt; TL;DR - 너무 길면 읽지 않을꺼죠?&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;PowerShell 은 당연히 설치되어 있어야 한다. 현시점에서는 버전 &lt;code&gt;7.1.0-rc.2&lt;/code&gt;를 설치하였다.&lt;/li&gt;
&lt;li&gt;posh-git 을 설치한다.&lt;/li&gt;
&lt;li&gt;PowerShell profile 파일을 수정하여 custom prompt를 설정한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;그러면 git 을 사용하는 디렉토리 내에서 아래와 같이 prompt 가 나온다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;시간은 명령 수행 시간&lt;/li&gt;
&lt;li&gt;현재 브랜치와 Working directory 상태 (현재는 modified 된 파일이 3개라는 뜻이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/2020/11/05/powershell-with-git-support/1.png&#34; alt=&#34;custom prompt of the Windows PowerShell&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;posh-git-설치하기&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#posh-git-설치하기&#34;&gt;&lt;/a&gt; posh-git 설치하기&lt;/h2&gt;
&lt;p&gt;GitHub: &lt;a href=&#34;https://github.com/dahlbyk/posh-git&#34;&gt;https://github.com/dahlbyk/posh-git&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;posh-git&lt;/code&gt; 은 PowerShell 모듈이며 Git 사용에 도움이 되는 여러 기능을 제공한다.&lt;br /&gt;
GitHub &lt;a href=&#34;http://README.md&#34;&gt;README.md&lt;/a&gt; 에 다양한 설치 방법이 나오니 참고하여 설치한다.&lt;br /&gt;
PowerShell에서 설치를 한다면 Administrator 로 PowerShell을 실행하고 설치해본다.&lt;/p&gt;
&lt;h2 id=&#34;custom-prompt-설정하기&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#custom-prompt-설정하기&#34;&gt;&lt;/a&gt; Custom prompt 설정하기&lt;/h2&gt;
&lt;p&gt;참고 링크: &lt;a href=&#34;https://github.com/dahlbyk/posh-git/wiki/Customizing-Your-PowerShell-Prompt&#34;&gt;https://github.com/dahlbyk/posh-git/wiki/Customizing-Your-PowerShell-Prompt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;posh-git&lt;/code&gt; 이 하는 것은 결국 PowerShell이 실행되기 전에 미리 prompt에 대한 설정을 해두는 것이다.&lt;br /&gt;
&lt;strong&gt;그래서 어느 파일을 건드려야 하는건가?&lt;/strong&gt; 이걸 알아내기가 힘들어서 헤매었고, 이 포스팅을 하게 되었다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;profile.ps1&lt;/code&gt; 을 수정해야 한다. 이 파일은 사용자 디렉토리의 &lt;code&gt;Documents\PowerShell&lt;/code&gt; 폴더에 있다.&lt;br /&gt;
처음 &lt;code&gt;posh-git&lt;/code&gt; 을 설치하면 단 한 줄 밖에 없을 것이다.&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Import-Module posh-git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;즉, posh-git을 가져온 다음에 PowerShell 을 실행하겠다는 것이다.&lt;br /&gt;
이렇게 가져오기 전에 function Prompt 를 정의해주면 된다.&lt;/p&gt;
&lt;p&gt;구글링하여 아래 링크를 참고하여 설정해보았다.&lt;/p&gt;
&lt;p&gt;링크: &lt;a href=&#34;https://melcher.dev/2019/03/powershell-prompt-awesomeness-you-need-this/&#34;&gt;https://melcher.dev/2019/03/powershell-prompt-awesomeness-you-need-this/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;항목 하나하나에 대한 자세한 분석은 하지 않았다. 조금 더 커스터마이즈 하고 싶으면 조금씩 수정해가면서 확인하면 될 것이다.&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function Prompt &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        $history = Get-History -ErrorAction Ignore -Count 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if ($history) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Write-Host &amp;quot;[&amp;quot; -NoNewline&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            $ts = New-TimeSpan $history.StartExecutionTime $history.EndExecutionTime&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            switch ($ts) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#123;$_.TotalSeconds -lt 1&amp;#125; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    [int]$d = $_.TotalMilliseconds&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &amp;#x27;&amp;#123;0&amp;#125;ms&amp;#x27; -f ($d) | Write-Host -ForegroundColor Black -NoNewline -BackgroundColor DarkGreen&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    break&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#123;$_.totalminutes -lt 1&amp;#125; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    [int]$d = $_.TotalSeconds&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &amp;#x27;&amp;#123;0&amp;#125;s&amp;#x27; -f ($d) | Write-Host -ForegroundColor Black -NoNewline -BackgroundColor DarkYellow&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    break&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#123;$_.totalminutes -ge 1&amp;#125; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &amp;quot;&amp;#123;0:HH:mm:ss&amp;#125;&amp;quot; -f ([datetime]$ts.Ticks) | Write-Host -ForegroundColor Gray -NoNewline  -BackgroundColor Red&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    break&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Write-Host &amp;quot;] &amp;quot; -NoNewline&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(Get-Module Posh-git) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Write-VcsStatus&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Write-Host &amp;quot; &amp;quot; -NoNewline&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    catch &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # New line&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Write-Host &amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # show the drive and then last 2 directories of current path&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if (($pwd.Path.Split(&amp;#x27;\&amp;#x27;).count -gt 3))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        write-host &amp;quot;$($pwd.path.split(&amp;#x27;\&amp;#x27;)[0], &amp;#x27;...&amp;#x27;, $pwd.path.split(&amp;#x27;\&amp;#x27;)[-2], $pwd.path.split(&amp;#x27;\&amp;#x27;)[-1] -join (&amp;#x27;\&amp;#x27;))&amp;quot; -NoNewline&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Write-Host &amp;quot;$($pwd.path)&amp;quot; -NoNewline&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;&amp;gt; &amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Import-Module posh-git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;참-잘했어요&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#참-잘했어요&#34;&gt;&lt;/a&gt; 참 잘했어요&lt;/h2&gt;
&lt;p&gt;이렇게 설정을 하고 &lt;code&gt;VS Code&lt;/code&gt; 에서 default shell 을 PowerShell로 바꾸어 주었다.&lt;/p&gt;
&lt;p&gt;그리고, &lt;code&gt;Windows Terminal&lt;/code&gt; 역시 &lt;code&gt;defaultProfile&lt;/code&gt;(실행시 처음 열리는 shell)을 PowerShell 로 바꾸어 주었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;끝 -&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Hyunseok Jeong" />
        <category term="Windows" />
        <category term="PowerShell" />
        <category term="Git" />
        <category term="Prompt" />
        <updated>2020-11-05T09:43:18.000Z</updated>
    </entry>
    <entry>
        <id>https://deepbaksu.github.io/2020/10/20/play-with-slice-of-golang/</id>
        <title>Go 슬라이스 가지고 놀아보자</title>
        <link rel="alternate" href="https://deepbaksu.github.io/2020/10/20/play-with-slice-of-golang/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/2020/10/20/play-with-slice-of-golang/nery-montenegro-3ak9PMcx048-unsplash.jpg&#34; alt=&#34;Photo by Nery Montenegro on Unsplash&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Go의 슬라이스는 배열과 비슷한 듯 다르다. 슬라이스는 세 개의 필드를 가진 데이터 구조이다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;포인터: 실제 값이 들어있는 배열의 주소를 가리킨다&lt;/li&gt;
&lt;li&gt;Length: 값이 들어있는 길이를 가리킨다.&lt;/li&gt;
&lt;li&gt;Capacity: 실제 값은 들어있지 않지만 미리 확보해놓은 메모리 공간이라 생각하면 된다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/2020/10/20/play-with-slice-of-golang/1.jpg&#34; alt=&#34;slice in golang: https://www.geeksforgeeks.org/slices-in-golang&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Capacity&lt;/code&gt; 이내 에서는 &lt;code&gt;append&lt;/code&gt;를 하더라도 다른 곳으로 메모리를 재할당 할 필요가 없다. 저장하는 메모리 공간을 이사할 필요가 없다는 것이다.&lt;/p&gt;
&lt;p&gt;적절할지 모르겠지만 비유를 해본다. 아파트의 방에 한 명씩 살아야 한다고 하자. 방 4개 짜리 아파트에 (cap&lt;mark&gt;4) 세 명이 각각 방 하나씩을 차지하고 있는 경우 (len&lt;/mark&gt;3) 한명이 더 들어와 살더라도 방 5, 6개 짜리 아파트로 이사할 필요가 없는 것이다. 하지만 여기서 한 명이라도 더 들어오면 방이 더 많은, 다른 아파트로 이사를 해야 한다.&lt;/p&gt;
&lt;p&gt;이론적인 부분은 이만 줄이고 실제 코드로 부딪혀가며 이해해보자.&lt;/p&gt;
&lt;h2 id=&#34;실습&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#실습&#34;&gt;&lt;/a&gt; 실습&lt;/h2&gt;
&lt;p&gt;실습을 통해 다음과 같은 상황을 확인해보자&lt;br /&gt;
같은 배열을 가리키는 두 슬라이드가 있다고 할 때에&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;같은 메모리 주소의 하나의 값을 변경하면 나머지 하나도 바뀔 것이다. 슬라이스의 포인터가 같은 배열을 가리키고 있기 때문이다.&lt;/li&gt;
&lt;li&gt;그러면 두 슬라이스 중에 하나가 다른 하나의 일부일 때에, 그 슬라이스를 append 한다면?
&lt;ul&gt;
&lt;li&gt;cap 이내일때는 여전히 같은 배열을 가리키겠지만&lt;/li&gt;
&lt;li&gt;cap 을 넘어서는 append 의 경우에는 두 슬라이스는 다른 배열을 가리키게 될 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;슬라이스를 함수에 값으로 전달한다면 어떻게 될까?
&lt;ul&gt;
&lt;li&gt;슬라이스가 복제된다. 포인터는 같은 배열을 가리킨다.&lt;/li&gt;
&lt;li&gt;하지만 함수 내에서 슬라이스의 len, cap 을 변경해도 원래 슬라이스의 len, cap은 변하지 않을 것이다.&lt;br /&gt;
→ 같은 배열을 가리키는 두 개의 별개의 슬라이스인 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;슬라이스를 함수에 포인터로 전달한다면 어떻게 될까?
&lt;ul&gt;
&lt;li&gt;포인터, len, cap 이 온전히 전달되고,&lt;/li&gt;
&lt;li&gt;함수내에서 이들이 바뀌면 원본 역시 변할 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;배열-함께-쓰기-이별하기&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#배열-함께-쓰기-이별하기&#34;&gt;&lt;/a&gt; 배열 함께 쓰기, 이별하기&lt;/h3&gt;
&lt;p&gt;Play ground: &lt;a href=&#34;https://play.golang.org/p/RxLFuykp9XH&#34;&gt;https://play.golang.org/p/RxLFuykp9XH&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(1) a, b, c 슬라이스는 모두 같은 배열을 가리키고 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;b는 len은 2이지만, cap은 a의 cap 나머지와 같은 3이다.&lt;/li&gt;
&lt;li&gt;c와 같이 cap도 정확히 설정할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(2) b 슬라이스를 append 해도 아직 여분의 cap 공간이 있다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;그래서 b 슬라이스가 메모리 이사를 갈 필요가 없다.&lt;/li&gt;
&lt;li&gt;그래서 a[5]와 b[3]의 값이 함께 바뀐다.&lt;/li&gt;
&lt;li&gt;포인터가 가리키는 배열의 같은 위치 원소의 주소값도 같다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(3) b 슬라이스를 한 번더 append 해보자&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이제는 b 슬라이스가 이사를 가야한다.&lt;/li&gt;
&lt;li&gt;포인터가 가리키는 배열의 같은 위치였을 원소의 주소값이 다르다.&lt;/li&gt;
&lt;li&gt;(4)를 보면 이제 완전히 별개의 두 배열을 가리키고 있는 것을 알 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/2020/10/20/play-with-slice-of-golang/2.png&#34; alt=&#34;example code1&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;함수에-슬라이스-전달하기&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#함수에-슬라이스-전달하기&#34;&gt;&lt;/a&gt; 함수에 슬라이스 전달하기&lt;/h3&gt;
&lt;p&gt;Play ground: &lt;a href=&#34;https://play.golang.org/p/5qg7NVNH2Ic&#34;&gt;https://play.golang.org/p/5qg7NVNH2Ic&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(1) len 5, cap 5 인 a 슬라이스를 만들었다.&lt;/p&gt;
&lt;p&gt;(2) (3) 은 각각 슬라이스와 슬라이스 주소값을 전달받는 함수를 선언하였다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;슬라이스의 첫번째 원소의 값을 바꾸고&lt;/li&gt;
&lt;li&gt;슬라이스에 빈 원소 3개를 append 한 다음&lt;/li&gt;
&lt;li&gt;함수 안에서 슬라이스의 변경된 길이를 출력해 보았다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(4) 함수를 실행해보니&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a 슬라이스는 len 5, cap 5로 생성이 되어있고&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;changeSliceValue 함수의 경우는 - a 슬라이스의&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;첫번째 원소의 값은 바꾸었지만&lt;/li&gt;
&lt;li&gt;len, cap 은 바꾸지 못하였다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;changeSliceReference 함수의 경우는 a 슬라이스의&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;첫번째 원소의 값을 바꾸었고&lt;/li&gt;
&lt;li&gt;len, cap 까지도 바꾸었다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/2020/10/20/play-with-slice-of-golang/3.png&#34; alt=&#34;example code2&#34; /&gt;&lt;/p&gt;
</content>
        <category term="Hyunseok Jeong" />
        <category term="Go" />
        <category term="Golang" />
        <category term="Slice" />
        <category term="example" />
        <updated>2020-10-20T09:17:05.000Z</updated>
    </entry>
    <entry>
        <id>https://deepbaksu.github.io/2020/09/27/architecture-by-martin/</id>
        <title>마틴 파울러가 말하는 소프트웨어 아키텍처</title>
        <link rel="alternate" href="https://deepbaksu.github.io/2020/09/27/architecture-by-martin/"/>
        <content type="html">&lt;h2 id=&#34;개요&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#개요&#34;&gt;&lt;/a&gt; 개요&lt;/h2&gt;
&lt;p&gt;마틴 파울러가 10 여분간 압축하여 이야기한 소프트웨어 아키텍처에 대한 생각을 유튜브를 통해 보고, 유튜브에 언급된 칼럼까지 읽고 나서 정리를 해보고 싶어졌다.&lt;/p&gt;
&lt;h2 id=&#34;tldr&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#tldr&#34;&gt;&lt;/a&gt; TL;DR&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;소프트웨어 아키텍트&lt;/code&gt;는 팀 내의 가장 노련한 개발자이다. 요구사항을 받아서 어떤 콤포넌트와 인터페이스로 구성할지를 디자인하여 개발팀에 공유하고 합의를 이루면 그것이 바로 &lt;code&gt;아키텍처&lt;/code&gt;이다. 이러한 아키텍처는 한번 정하면 바꾸기가 힘든 것들을 말한다. 그렇기에 핵심가치를 담고 있기도 하며 개발에 참여하는 모든 이가 이해하고 합의하는 최소한인 것이다.&lt;/p&gt;
&lt;p&gt;아키텍트는 &lt;code&gt;등반에서의 가이드&lt;/code&gt;와 같다. 개발팀을 이끌면서 가르쳐 전체 구성원의 역량을 끌어올리고, 난관에 부딪힐때 의지할 수 있는 존재이다. 개발팀과 프로젝트가 돌아가는 상황을 잘 알고 있으며, 작은 문제들을 발견할때마다 미리미리 대응해서 커지지 않게한다. 이를 위해서는 &lt;code&gt;개발팀 전체와 긴밀하게 협업&lt;/code&gt;을 해야 한다.&lt;/p&gt;
&lt;p&gt;아키텍처란 바꾸기 힘든 것이다. &lt;code&gt;바꾸지 힘들 수록 복잡도를 높인다.&lt;/code&gt; 아키텍처라 이름 붙일 만한 것이 적을 수록 좋은 것이다. 바꾸기 힘든 것을 바꾸기 쉽게(=유지, 보수, 기능추가가 쉽게) 만들어주면 그것은 더 이상 아키텍처가 아니다. 아키텍트는 아키텍처를 줄이려 노력하는 사람이다.&lt;/p&gt;
&lt;p&gt;고객의 눈에 보이지 않는 이러한 아키텍처는 품질에 투자할 수록 = 유지, 보수, 기능 추가가 쉽도록 개발할 수록 조금 긴 시각에서 보면 경제적으로 큰 이익이 된다.&lt;/p&gt;
&lt;h2 id=&#34;소프트웨어-아키텍처란-뭘까&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#소프트웨어-아키텍처란-뭘까&#34;&gt;&lt;/a&gt; 소프트웨어 아키텍처란 뭘까?&lt;/h2&gt;
&lt;p&gt;소프트웨어 아키텍처란 뭘까? 마틴 파울러는 랄프 존슨을 통해 얻은 통찰로 아래 둘로 표현한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;노련한 개발자가 나눠주는 시스템 디자인에 대한 이해 (Expert developers’ shared understanding of the system design)&lt;/li&gt;
&lt;li&gt;변경하기 힘든 것들 (The decision that are hard to change)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;1-expert-developers-shared-understanding-of-the-system-design&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-expert-developers-shared-understanding-of-the-system-design&#34;&gt;&lt;/a&gt; 1. Expert developers’ shared understanding of the system design&lt;/h3&gt;
&lt;p&gt;고객과 고객의 요구사항을 구현하는 개발자로 나누어 보자.&lt;br /&gt;
고객은 아키텍처를 알지도 못하고 관심도 없다. 요구한 대로 돌아가기만 하면 된다. 바꿔 말하면 개발자만 관심있는거다.&lt;/p&gt;
&lt;p&gt;요구사항을 받으면, 팀에서 짬밥이 많은 개발자들이 이를 만족하려면 어떻게 구현해야할지 고민할 것이다.&lt;br /&gt;
대략 큰 덩어리의 콤포넌트들이 떠오르고, 그것들을 연결하는 인터페이스를 요래조래 하면 되겠다 싶을 거다.&lt;br /&gt;
그러면 그걸 개발팀원들에게 공유한다. 그게 &lt;code&gt;아키텍처&lt;/code&gt;다.&lt;/p&gt;
&lt;p&gt;그러면 개발팀 내에서 어떤 합의가 이루어지게 된다. 콤포넌트와 인터페이스가 이렇게 되어야는 거구나 하는 합의이다.&lt;br /&gt;
왜 합의가 필요할까? 그만큼 중요한 것이기 때문이고, 모두가 이해하고 그에 맞게 구현해야 하기 때문이다.&lt;br /&gt;
아키텍처는 &lt;code&gt;무엇이 되었든, 중요한 것&lt;/code&gt;에 관한 것이다.&lt;/p&gt;
&lt;p&gt;아키텍처 하면 떠오르는, 아래와 같은 다이어그램과 같은 형식은 이런 공유의 결과로 만들어지는 것들을 표현(representation) 한 것 뿐이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/27/architecture-by-martin/1.png&#34; alt=&#34;Architecture - StackExchange(https://bit.ly/2Ht4rCZ)&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-the-decision-that-are-hard-to-change&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-the-decision-that-are-hard-to-change&#34;&gt;&lt;/a&gt; 2. The decision that are hard to change&lt;/h3&gt;
&lt;p&gt;아키텍처는 프로젝트 시작할때 제대로 알고 결정했어야 하는 거라는 말이 있다.&lt;br /&gt;
이걸 다르게 말하면 &lt;code&gt;바꾸기 어려운 것&lt;/code&gt;을 말한다. 쉬우면야 앞의 결정을 번복하고 새롭게 바꾸면 되니깐 말이다.&lt;br /&gt;
핵심적인 가치를 지닌 것이고, 바꾸기 힘든 것이기에 가능한 바꾸지 않으려 하는 것이다.&lt;/p&gt;
&lt;h2 id=&#34;그래서-아키텍처가-뭔데&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#그래서-아키텍처가-뭔데&#34;&gt;&lt;/a&gt; 그래서 아키텍처가 뭔데?&lt;/h2&gt;
&lt;p&gt;1번과 2번을 모아서 좋은 소프트웨어 아키텍처를 정리해본다.&lt;br /&gt;
프로젝트에서 추구하는 핵심가치, 그래서 바꾸기 어렵고 가능한 바꾸지 않으려 하는것이며, 그렇기에 프로젝트에 참여한 사람들 중에서 제일 노련하고 잘하는 사람이 정리하고 공유해주면 팀의 모든 사람들이 이를 잘 이해하고 맞게 만들어가야 하는 것이다.&lt;/p&gt;
&lt;p&gt;이 둘을 합쳐서 한 단어로 말하자면 아키텍처는 &lt;code&gt;모든 중요한 것들&lt;/code&gt;이라는 말이 된다.&lt;br /&gt;
쉽게 바꿔서는 안되고, 충분히 이해하고 만들어야 하는 중요한 것들이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/27/architecture-by-martin/2.png&#34; alt=&#34;중요한 것 그것이 아키텍쳐이다&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;아키텍트의-역할은-무엇일까&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#아키텍트의-역할은-무엇일까&#34;&gt;&lt;/a&gt; 아키텍트의 역할은 무엇일까?&lt;/h2&gt;
&lt;p&gt;아키텍처에 대해 어느정도 정의가 되었다. 그러면 아키텍트는 뭘까? 칼럼에서 다음과 같이 언급되어 있다.&lt;br /&gt;
우리가 흔히 생각하는 아키텍트는 대략 이럴 것이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;엄청나게 중요한 결정을 한다. 그런데 그 결정대로 되어야 한다 생각하지 팀원들이 그걸 감당할 수 있을지는 상관없다.&lt;/li&gt;
&lt;li&gt;이 결정은 가능한 빨리 내려야 한다. 그래야 다른 팀원들이 따라오니깐&lt;/li&gt;
&lt;li&gt;이러다보니 &lt;code&gt;아키텍트의 가치는 그가 내리는 결정의 수에 반비례 한다&lt;/code&gt;는 경험칙이 나오게 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그러면 제대로 된 아키텍트는 뭘 어떻게 하는 사람일까?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이슈들을 발견하고 큰 문제가 되기전에 미리미리 조치하는 사람이다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;그러려면&lt;/code&gt; 프로젝트 전반이 어떻게 돌아가는지를 잘 알아야 한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;그러려면&lt;/code&gt; 팀원들과 소통과 협력이 잘 되어야 한다.&lt;/li&gt;
&lt;li&gt;무엇보다 중요한 것은 개발팀의 &lt;code&gt;멘토&lt;/code&gt;가 되어야 한다는 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;칼럼에서는 이런 사람에게 아키텍트보다는 &lt;code&gt;가이드&lt;/code&gt;라는 표현이 더 낫다 이야기한다. 경험이 풍부하고, 실력이 남달라서 다른 멤버들을 가르쳐주어 개발팀 전체의 수준을 높여주고, 그래서 더 높은 요구사항을 감당할 수 있게 해주며, 어째야 할지 감이 안오는 문제를 만났을때는 의지가 될 수 있는 사람&lt;/p&gt;
&lt;h2 id=&#34;아키텍트의-또-다른-역할-소프트웨어-아키텍처-제거반&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#아키텍트의-또-다른-역할-소프트웨어-아키텍처-제거반&#34;&gt;&lt;/a&gt; 아키텍트의 또 다른 역할 - 소프트웨어 아키텍처 제거반&lt;/h2&gt;
&lt;p&gt;Enrico Zaninotoo 라는 사람은 Agile을 되돌리기 힘든 것들(irreversibility)을 줄여서 복잡성(complexity)을 줄이는 것이라고 말했다. 복잡성을 줄이면 어떻게 될까? 로버트 마틴, 밥 아저씨가 말한 소프트웨어 아키텍처의 정의, 목표가 떠오른다. &lt;code&gt;적은 인력으로 유지 보수하기 쉽게 되는 것&lt;/code&gt;이다.&lt;/p&gt;
&lt;p&gt;앞서 정의에서 아키텍처는 되돌리기 힘든거라고 했다. 그렇다면 그걸 되돌리기 쉽게 만들 수 있다면 그건 더 이상 아키텍처가 아닌게 되고, 소프트웨어의 복잡도를 줄여주게 되며, 그 결과로 적은 인력으로 유지 보수하기 좋은 소프트웨어를 만들게 되는 것이다.&lt;/p&gt;
&lt;p&gt;아키텍트는 아키텍처라 불러야 마땅한 것들을 줄여나가는 사람이다.&lt;/p&gt;
&lt;h2 id=&#34;소프트웨어-품질과-돈&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#소프트웨어-품질과-돈&#34;&gt;&lt;/a&gt; 소프트웨어 품질과 돈&lt;/h2&gt;
&lt;p&gt;좀 더 나은 품질의 소프트웨어를 고집하는 것은 장인정신 처럼 보이고, 당장의 time to market (시의 적절하게 제품을 내어놓는 것) 을 위해 품질을 희생시키는 것은 회사의 이익을 위한 선택처럼 보인다. 같은 가격, 같은 기능을 가진 제품을 개발자의 시간을 적게 들이고 팔면 이익인것 아닌가? 짧은 시각으로 보면 맞는 말처럼 보인다.&lt;/p&gt;
&lt;p&gt;반복해서 언급하게 되지만 로버트 마틴이 말하는 좋은 아키텍처는 적은 인력으로 유지 보수할 수 있는 아키텍처이다. 좋은 아키텍처, 좋은 품질의 소프트웨어란 &lt;code&gt;출시한 이후에 지속적으로 유지 보수 및 새로운 기능을 넣기 좋은 소프트웨어&lt;/code&gt;인 것이다. 이게 바로 회사의 이익, 그리고 고객의 이익이 되는 것이다.&lt;/p&gt;
&lt;p&gt;아래 그림의 good design 을 보자. 초기에 투자를 해서 좋은 소프트웨어 아키텍처를 구축했더니 - 노련한 개발자가 핵심 가치를 놓치지 않고, 최소한의 아키텍처로 디자인 한 다음, 모든 팀원이 이해하고 개발할 수 있게 만들었더니 - 그 기반위에서 새로운 기능을 넣어주거나 유지하고 보수하기가 훨씬 쉬워진 것이다. 돈과 직결되는 생산성이 비약적으로 좋아진 것이다.&lt;/p&gt;
&lt;p&gt;&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn1&#34; id=&#34;fnref1&#34;&gt;[1]&lt;/a&gt;&lt;/sup&gt;&lt;img src=&#34;/2020/09/27/architecture-by-martin/3.png&#34; alt=&#34;Design Stamina Hypothesis by Martin Fowler&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;참고-링크&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#참고-링크&#34;&gt;&lt;/a&gt; 참고 링크&lt;/h2&gt;
&lt;p&gt;유튜브 링크: &lt;a href=&#34;https://youtu.be/4E1BHTvhB7Y&#34;&gt;https://youtu.be/4E1BHTvhB7Y&lt;/a&gt;&lt;br /&gt;
유튜브에서 언급한 칼럼: &lt;a href=&#34;https://martinfowler.com/ieeeSoftware/whoNeedsArchitect.pdf&#34;&gt;https://martinfowler.com/ieeeSoftware/whoNeedsArchitect.pdf&lt;/a&gt;&lt;br /&gt;
Design Stamina Hypothesis: &lt;a href=&#34;https://martinfowler.com/bliki/DesignStaminaHypothesis.html&#34;&gt;https://martinfowler.com/bliki/DesignStaminaHypothesis.html&lt;/a&gt;&lt;/p&gt;
&lt;hr class=&#34;footnotes-sep&#34; /&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;ol class=&#34;footnotes-list&#34;&gt;
&lt;li id=&#34;fn1&#34; class=&#34;footnote-item&#34;&gt;&lt;p&gt;이미지 출처: &lt;a href=&#34;https://martinfowler.com/bliki/DesignStaminaHypothesis.html&#34;&gt;https://martinfowler.com/bliki/DesignStaminaHypothesis.html&lt;/a&gt; &lt;a href=&#34;#fnref1&#34; class=&#34;footnote-backref&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
        <category term="Hyunseok Jeong" />
        <category term="Software Architecture" />
        <category term="Agile" />
        <category term="Architect" />
        <updated>2020-09-27T09:19:18.000Z</updated>
    </entry>
    <entry>
        <id>https://deepbaksu.github.io/2020/09/22/lets-do-github-cli-part2/</id>
        <title>GitHub CLI 를 만져보자 - 2</title>
        <link rel="alternate" href="https://deepbaksu.github.io/2020/09/22/lets-do-github-cli-part2/"/>
        <content type="html">&lt;figure style=&#34;display: flex; flex-direction: column; align-items: center&#34;&gt;
  &lt;img src=&#34;./lets-do-github-cli-part2/yancy-min-842ofHC6MaI-unsplash.jpg&#34;&gt;
  &lt;figcaption&gt;Photo by &lt;a href=&#34;https://unsplash.com/@yancymin?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Yancy Min&lt;/a&gt; on &lt;a href=&#34;https://unsplash.com/s/photos/github?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Unsplash&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;gist 를 만져보며 GitHub CLI 에 대한 기대감이 커졌다. 이번에는 repo 와 관련한 기능을 써보고자 한다.&lt;br /&gt;
이렇게 신기해하며 사용법을 익히는 것보다 더욱 중요한 것은 실제로 꾸준히 쓰는 것이겠다.&lt;br /&gt;
좋은 분들과 함께하는 딥백수 커뮤니티에 블로그 포스팅을 자주하며 기능들을 내 것으로 만들어야 겠다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GitHub Repo: &lt;a href=&#34;https://github.com/cli/cli&#34;&gt;https://github.com/cli/cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Official Document: &lt;a href=&#34;https://cli.github.com/manual/&#34;&gt;https://cli.github.com/manual/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;clone-repo&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#clone-repo&#34;&gt;&lt;/a&gt; Clone repo&lt;/h2&gt;
&lt;p&gt;두 명령은 같다. 장단점이나 차이를 모르겠다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gh repo clone deepbaksu/deepbaksu.github.io
$ git clone http://github.com/deepbaksu/deepbaksu.github.io
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/22/lets-do-github-cli-part2/1.png&#34; alt=&#34;clone repo&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;create-repo&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#create-repo&#34;&gt;&lt;/a&gt; Create repo&lt;/h2&gt;
&lt;p&gt;이거 정말 유용하다. 실전에는 보통 아래와 같이 했었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;프로젝트 폴더를 만들고 기본적인 구현을 한 다음에&lt;/li&gt;
&lt;li&gt;GitHub 사이트로 가서 repo 를 생성하고 다시 local 의 repo 와 연결해주는 작업을 한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;GitHub CLI 를 이용하여 repo 를 생성하는 여러 옵션이 있지만 이렇게 쓰게 될 것 같다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;프로젝트 디렉토리를 만들고, 그 디렉토리로 들어간 다음&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ gh repo create&lt;/code&gt; 만 먹여주면 디렉토리 이름으로 repo 가 만들어진다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;실습&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#실습&#34;&gt;&lt;/a&gt; 실습&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;디렉토리를 생성하고 들어가서 바로 repo 를 생성하려 하였지만 실패!&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;git 디렉토리 이어야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;code&gt;$ git init&lt;/code&gt; 을 해주고 &lt;code&gt;$ gh repo create&lt;/code&gt; 를 해주니 성공&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;interactive 하게 repo 이름, description, public 여부를 설정해주면 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/22/lets-do-github-cli-part2/2.png&#34; alt=&#34;create repo&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;view-repo&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#view-repo&#34;&gt;&lt;/a&gt; View repo&lt;/h2&gt;
&lt;p&gt;repository 를 본다는 것이 무얼 말하는 것인지 처음에는 이해가 가지 않았다.&lt;br /&gt;
여러 옵션이 있지만 현재 CLI 화면의 git 의 GitHub repo 를 브라우저에서 열때 가장 많이 사용할 듯 하다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gh repo view // 만 쳐주면 README.md 만 보여주지만
$ gh repo view --web // 을 쳐주면 브라우저에서 GitHub repo 를 바로 열어준다.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;실습-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#실습-2&#34;&gt;&lt;/a&gt; 실습&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://README.md&#34;&gt;README.md&lt;/a&gt; 파일을 만들어준 다음,&lt;/li&gt;
&lt;li&gt;git add, commit, push 를 해주었다.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;여기서 신기했던게 --set-upstream 이 자동으로 되어 있을것만 같았는데 해줘야 한다는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/22/lets-do-github-cli-part2/3.png&#34; alt=&#34;add readme repo&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;code&gt;$ gh repo view&lt;/code&gt; 를 해주면 해당 repo 의 &lt;a href=&#34;http://README.md&#34;&gt;README.md&lt;/a&gt; 를 보여준다&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ gh repo view --web&lt;/code&gt; 옵션을 추가해주면 바로 해당 repo 의 GitHub 페이지를 브라우저에서 열어준다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/22/lets-do-github-cli-part2/4.png&#34; alt=&#34;view repo&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;아래와 같이 Browser 에서 열린다. 편리하다!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/22/lets-do-github-cli-part2/5.png&#34; alt=&#34;view repo web&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;alias&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#alias&#34;&gt;&lt;/a&gt; Alias&lt;/h2&gt;
&lt;p&gt;평소에 git 도 alias 를 잘 쓰고 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git cb // git checkout --branch
$ git cm -m // git commit -m
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 GitHub CLI 명령중 create 와 view 는 단축키를 지정해주면 편할 것 같다.&lt;br /&gt;
아래와 같이 설정 해보자&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gh repo create →  $ gh rc
$ gh repo view →   $ gh rv
$ gh repo view --web →  $ gh rvw
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/22/lets-do-github-cli-part2/6.png&#34; alt=&#34;alias&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Official document (&lt;a href=&#34;https://cli.github.com/manual/&#34;&gt;https://cli.github.com/manual/&lt;/a&gt;) 자체가 길지 않아 30분-1시간을 흝어보면 왠만한 기능은 이해가 되고, 여기처럼 실습까지 해주면 대부분의 feature 는 충분히 소화해 낼 수 있을것 같다. 마지막으로 pull request 를 잘 다뤄보고 싶은데 이건 좀더 실전 경험이 쌓이면 정리해보려 한다.&lt;/p&gt;
&lt;p&gt;GitHub CLI 에서&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;PR 을 보내거가, PR 을 리뷰하고&lt;/li&gt;
&lt;li&gt;제안된 수정사항을 검토하거나 빌드해보고&lt;/li&gt;
&lt;li&gt;merge 까지 해보는 거다.&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="Hyunseok Jeong" />
        <category term="GitHub CLI" />
        <category term="Repo" />
        <category term="Alias" />
        <updated>2020-09-22T08:36:04.000Z</updated>
    </entry>
    <entry>
        <id>https://deepbaksu.github.io/2020/09/21/lets-do-github-cli-part1/</id>
        <title>GitHub CLI 를 만져보자 - 1</title>
        <link rel="alternate" href="https://deepbaksu.github.io/2020/09/21/lets-do-github-cli-part1/"/>
        <content type="html">&lt;p&gt;GitHub CLI 가 나왔다 한다.&lt;br /&gt;
GitHub 을 이용해 본격적인 협업을 하지는 않지만 백업 용도로 잘 쓰고 있기에 이런 저런 기능이 있구나 하고 넘어가기 보다는 나의 용도에 적합한 기능들 만이라도 직접 한번 써보고자 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GitHub Repo: &lt;a href=&#34;https://github.com/cli/cli&#34;&gt;https://github.com/cli/cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Official Document: &lt;a href=&#34;https://cli.github.com/manual/&#34;&gt;https://cli.github.com/manual/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;설치&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#설치&#34;&gt;&lt;/a&gt; 설치&lt;/h2&gt;
&lt;p&gt;Chocolatey 가 설치되어 있었기에 Powershell 을 관리자 모드로 열어서 아래와 같이 gh 를 설치 완료&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/21/lets-do-github-cli-part1/1.png&#34; alt=&#34;install github cli&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;로그인&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#로그인&#34;&gt;&lt;/a&gt; 로그인&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;gh auth login&lt;/code&gt; 또는 &lt;code&gt;gh auth login --hostname github.com&lt;/code&gt; 으로 로그인을 해주면 준비 완료이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/21/lets-do-github-cli-part1/2.png&#34; alt=&#34;login github cli&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;손이-가는-명령들-사용해보기&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#손이-가는-명령들-사용해보기&#34;&gt;&lt;/a&gt; 손이 가는 명령들 사용해보기&lt;/h2&gt;
&lt;p&gt;설치하고 보니 아래와 같은 명령들이 가능하다.&lt;br /&gt;
해보고 싶은 것은&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;gist 생성하기&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;언제든 동작하는, 나중에 참고하고픈 코드들을 gist 로 백업해둘 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;repo create, clone, view&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GitHub 로 가지 않고도 바로 repo 를 생성할 수 있다.&lt;/li&gt;
&lt;li&gt;clone 은 git clone 과 뭐가 다른지 궁금하다&lt;/li&gt;
&lt;li&gt;view 기능은 정확히 어떤 기능일지 궁금하다&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;당장은 쓰지 않더라도 기대 되거나 궁금한 기능&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;alias&lt;/strong&gt;: git 도 alias 를 잘 쓰고 있기에 이것도 궁금하다&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;completion&lt;/strong&gt;: 이건 상상이 안가는데 script 관련이라니 사용처가 궁금하다&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pr&lt;/strong&gt;: gh 기능의 꽃이 pr 이 아닌가 싶다. 특히 예시로 나오는 pr checkout 을 하면, pr 을 바로 내려받아서 빌드하고 돌려볼 수 있겠다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/21/lets-do-github-cli-part1/3.png&#34; alt=&#34;commands&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;create-gist-list-gist&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#create-gist-list-gist&#34;&gt;&lt;/a&gt; create gist / list gist&lt;/h2&gt;
&lt;p&gt;이번 포스팅에서는 gist 까지만 사용해보자.&lt;br /&gt;
만들어둔 코드가 마음에 들어 gist 에 넣어두고 싶다면 아래와 같이 해주면 된다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;default 가 secret 이므로 public 으로 올리려면 &lt;code&gt;--public&lt;/code&gt; 옵션을 준다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;별도로 설명을 추가하고 싶다면 &lt;code&gt;--desc&lt;/code&gt; 옵션을 이용한다. 이걸 쓰지 않으면 파일명이 들어간다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;개인적으로 gist 의 활용은 때때로 써야할 기능들을 cloud 에 저장해놓고 필요할때 다시 가져와서 보는데 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;예를 들어 Go 언어로 AES256 암호화/복호화를 하는 코드 같은 것&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;아래와 같이 간단히 &lt;code&gt;gh gist list&lt;/code&gt; 명령으로 내가 Cloud 에 올려놓은 gist 의 리스트를 볼 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gist 가 많아진다면 query 나 간단한 regexp 로 추려낼 수 있으면 좋겠다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/21/lets-do-github-cli-part1/4.png&#34; alt=&#34;create and list gist&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;edit-gist-view-gist&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#edit-gist-view-gist&#34;&gt;&lt;/a&gt; edit gist / view gist&lt;/h2&gt;
&lt;p&gt;이 기능을 써보면서 박수를 쳤다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;list 명령으로 원하는 gist 를 찾아냈다면 해시값 (gist ID) 로 edit 하겠다는 요청을 할 수 있다.
&lt;ul&gt;
&lt;li&gt;git 에서처럼 hash 의 앞쪽 일부만으로 요청은 불가하였다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gh gist edit&lt;/code&gt; 명령만으로 지정해놓은 editor 로 바로 코드가 열린다.&lt;/li&gt;
&lt;li&gt;그리고 수정이 끝나 editor 를 닫으면 바로 Cloud 에 수정된 내용이 올라간다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;gh gist view&lt;/code&gt; 명령을 통해 gist 에 올린 원본인 mygist.go 파일은 전혀 건드리지 않고, gist 의 내용만 변경된 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/21/lets-do-github-cli-part1/5.png&#34; alt=&#34;edit and view gist&#34; /&gt;&lt;/p&gt;
&lt;p&gt;GitHub 로 가서 보면 변경된 히스토리가 모두 저장되어 있음을 알 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/21/lets-do-github-cli-part1/6.png&#34; alt=&#34;gist history&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;이어서&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#이어서&#34;&gt;&lt;/a&gt; 이어서&lt;/h2&gt;
&lt;p&gt;이어지는 posting 에 pr 과 repo 관련한 기능을 써보겠다.&lt;/p&gt;
&lt;p&gt;덧붙여 한마디 해보고 싶다. &lt;strong&gt;Learning by doing&lt;/strong&gt; 이라는 말이 있다.&lt;br /&gt;
GitHub CLI 가 정식 릴리즈 되었다는 말을 들었고 이런 저런 기능이 있다는 말 정도만 듣고 언젠가 써볼까 생각만 했었는데&lt;br /&gt;
짬을 내어 이렇게 들여다보고 손으로 직접 타이핑을 해보니 그냥 눈으로 흝어본 것과는 하늘과 땅의 차이가 난다.&lt;br /&gt;
무엇이든 손으로 직접 해보자.&lt;/p&gt;
</content>
        <category term="Hyunseok Jeong" />
        <category term="GitHub CLI" />
        <category term="Gist" />
        <category term="Leaning by Doing" />
        <updated>2020-09-21T10:42:32.000Z</updated>
    </entry>
    <entry>
        <id>https://deepbaksu.github.io/2020/09/14/make-your-routine/</id>
        <title>애기 아빠 개발자의 생활 루틴</title>
        <link rel="alternate" href="https://deepbaksu.github.io/2020/09/14/make-your-routine/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/2020/09/14/make-your-routine/my-life-journal-WI30grRfBnE-unsplash.jpg&#34; alt=&#34;Photo by My Life Journal on Unsplash&#34; /&gt;&lt;/p&gt;
&lt;p&gt;얼마전 어느 개발자 분이 자신의 생활 루틴을 꾸려나가는 방법론에 관해 소개하시는 멋진 글을 읽었습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.shiren.dev/2020-09-07&#34;&gt;하루 25분 실행하기: 하루를 대하는 14년차 개발자의 자세&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;꾸준히 자신에 맞는 방법을 고민하고, 또 실천하시는 모습이 존경스러웠습니다.&lt;br /&gt;
이를 읽고 넘기기만 할 것이 아니라 나의 루틴을 돌아보고 정리 해보는 시간, 나아가 개선점과 배울 점들을 적용해보는 시간을 가져보자는 욕심이 났습니다.&lt;/p&gt;
&lt;h2 id=&#34;공감한-부분&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#공감한-부분&#34;&gt;&lt;/a&gt; 공감한 부분&lt;/h2&gt;
&lt;p&gt;읽으며 공감이 갔던 부분은 다음과 같습니다.&lt;/p&gt;
&lt;h3 id=&#34;가장-중요한-것은-꾸준히-하는-것이다&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#가장-중요한-것은-꾸준히-하는-것이다&#34;&gt;&lt;/a&gt; 가장 중요한 것은 꾸준히 하는 것이다&lt;/h3&gt;
&lt;p&gt;중국 고전인 &lt;code&gt;중용&lt;/code&gt; 은 성실함에 대한 이야기입니다. 학교의 옛 급훈처럼 느껴지는 고리타분해 보이는 &lt;code&gt;성실&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;뜨겁게 몰입하는 것도 좋지만, 지치지 않고 꾸준히 하는 것이 더욱 어려우면서도 중요합니다.&lt;br /&gt;
혼자 공부해도 되는데 애써 학원을 끊거나 스터디에 참여하는 이유중의 하나는 바로 간접적인 제약을 통해 &lt;code&gt;꾸준&lt;/code&gt;하게 하기 위함입니다.&lt;/p&gt;
&lt;h3 id=&#34;정답은-없다&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#정답은-없다&#34;&gt;&lt;/a&gt; 정답은 없다&lt;/h3&gt;
&lt;p&gt;링크글의 개발자분도 장/단기 목표를 세워보거나 뽀모도로, GTD, 간트차트 등등의 다양한 시행착오를 거쳤다는 이야기를 하십니다. 이 분도 이렇게 자리잡은 방법, 습관을 바꾸지 않고 똑.같.이. 반복하지는 않으실 겁니다.&lt;/p&gt;
&lt;p&gt;노자의 도덕경에 &lt;code&gt;도가도 비상도&lt;/code&gt; 라는 말이 나옵니다. 도라는 것이 고정되어 버리면 더 이상 도가 아니라고 합니다.&lt;br /&gt;
현재, 바로 이 순간에 가장 적합한 정답에 다가서려 끊임없이 노력하는 것입니다. 오늘 찾은 최고의 방법이 내일도, 다음 주에도 최선이라고 할 수 없습니다. 토요다의 칸반 시스템도 끊임없이 변화하는 것이라는 이야기가 있습니다. 어느 한 순간의 모습만을 베껴서는 결코 똑같은 성과를 이룰 수 없다는 것이지요.&lt;/p&gt;
&lt;p&gt;끊임없이 새로운 것을 받아들이고, 이를 수용하고, 배제하고, 개선시켜 나가야 합니다.&lt;/p&gt;
&lt;h2 id=&#34;배운-부분-적용해보고픈-부분&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#배운-부분-적용해보고픈-부분&#34;&gt;&lt;/a&gt; 배운 부분 / 적용해보고픈 부분&lt;/h2&gt;
&lt;p&gt;이 분의 주간 계획을 가져와 봅니다.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;주 4회 이상 운동을 한다.(1회 40분 이상)&lt;br /&gt;
주 5회 이상 책을 읽는다.(1회 25분 이상)&lt;br /&gt;
주 5회 이상 명상을 한다.(1회 20분 이상)&lt;br /&gt;
주 3회 이상 글쓰기를 한다. (1회 25분 이상)&lt;br /&gt;
주 4회 이상 개발을 한다. (1회 25분 이상)&lt;br /&gt;
주 2회 이상 음악을 한다. (1회 25분 이상)&lt;br /&gt;
주 2회 이상 피아노 연습을 한다. (1회 30분 이상)&lt;br /&gt;
하루 한 시간 이상 집중해서 라임이(딸)와 놀아준다(이게 제일 힘들다)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;항목을 나누고, 이를 정량적으로 표시하여 주간 계획을 세우는 부분이 인상적이었습니다. 마치 구글의 OKR 에서 KR(Key Result)처럼 정량적으로 측정을 합니다.&lt;/p&gt;
&lt;p&gt;하루에 2회 분량을 하더라도 1회로 계산합니다. 얼마나 많이 해내었는지가 아니라 얼마나 &lt;code&gt;꾸준&lt;/code&gt;히 했는지를 보겠다는 것입니다. 꾸준히 해나가기를 독려하려는 장치로 보였습니다.&lt;/p&gt;
&lt;p&gt;25분의 마법. 이미 뽀모도로, 구글 타이머를 이용하고 있습니다만 이 분이 강조한 25분의 마법이 인상적이었습니다. &lt;code&gt;25분만 하자!&lt;/code&gt; 는 동기부여, &lt;code&gt;25분만 투자하니깐 집중하자!&lt;/code&gt; 는 집중력 강화, &lt;code&gt;25분을 실행하자!&lt;/code&gt; 는 실천력 강화. 계획이나 준비에 과하게 투자하지 않고 바로 뛰어들게 합니다.&lt;/p&gt;
&lt;h2 id=&#34;스냅샷-현재의-나의-루틴&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#스냅샷-현재의-나의-루틴&#34;&gt;&lt;/a&gt; 스냅샷, 현재의 나의 루틴&lt;/h2&gt;
&lt;p&gt;제가 실천하고 있는 일정관리의 현재 시점의 스냅샷을 적어봅니다.&lt;br /&gt;
그리고, 여기에 더해 개선할 점을 적어보려 합니다.&lt;/p&gt;
&lt;h3 id=&#34;월간-주간-루틴&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#월간-주간-루틴&#34;&gt;&lt;/a&gt; 월간, 주간 루틴&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;매 주, 매 월 &lt;code&gt;실제&lt;/code&gt; 한 일과 &lt;code&gt;회고&lt;/code&gt; 그리고 다음 &lt;code&gt;계획&lt;/code&gt;을 잡습니다.&lt;/li&gt;
&lt;li&gt;잘한 점(Good)과 못한 점(Bad)을 적고, 지난 개선 목표를 회고하며, 개선할 부분과 그 실천방안을 고민해 봅니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;주중-루틴&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#주중-루틴&#34;&gt;&lt;/a&gt; 주중 루틴&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;아침 루틴
&lt;ul&gt;
&lt;li&gt;기상 후 명상 10분, 스트레칭 10분&lt;/li&gt;
&lt;li&gt;출근길 영화, 유튜브, 독서&lt;/li&gt;
&lt;li&gt;출근 전 회사앞 카페 독서&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;회사 저녁
&lt;ul&gt;
&lt;li&gt;주 3회 정도 업무외 1-2시간 정도, 퇴근 전 업무외 시간을 할당해둡니다.&lt;/li&gt;
&lt;li&gt;개발 관련 블로그, 유튜브 등을 보며 정리하고 실습합니다.&lt;/li&gt;
&lt;li&gt;개인적 공부도 합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;운동
&lt;ul&gt;
&lt;li&gt;애기 아빠로서 별도로 운동시간을 잡기가 힘듭니다.&lt;/li&gt;
&lt;li&gt;아침 기상후 스트레칭은 빼먹지 않으려 합니다.&lt;/li&gt;
&lt;li&gt;출, 퇴근길에 걷는 코스를 두고, 회사 업무 짬짬이 숨돌릴때는 빌딩 계단을 40층 오릅니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;퇴근 후 집
&lt;ul&gt;
&lt;li&gt;주 2회 이상은 아이들이 자기전에 집에 와서 아이들 얼굴도 보고 몸으로 놀아줍니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;주말-루틴&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#주말-루틴&#34;&gt;&lt;/a&gt; 주말 루틴&lt;/h3&gt;
&lt;p&gt;주말은 온전히 가족에 투자를 합니다. 주중에는 긴 출퇴근 시간으로 많이 보지 못하는 부분을 보충합니다. 주중의 생활과 거리를 두는 효과도 있습니다.&lt;/p&gt;
&lt;p&gt;가끔은 아이들에게 보여주려는 목적으로 30분 정도 독서를 하기도 합니다.&lt;/p&gt;
&lt;h2 id=&#34;링크글을-읽고-적용해보려는-부분&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#링크글을-읽고-적용해보려는-부분&#34;&gt;&lt;/a&gt; 링크글을 읽고 적용해보려는 부분&lt;/h2&gt;
&lt;p&gt;독서, 영화, 블로그, 개발공부, 육아, 운동 등등을 카테고리화 하고 매 주 계획과 그 실천을 &lt;code&gt;정량적으로 측정&lt;/code&gt; 해보려 합니다. 측정도구로 좋은게 뭐가 있을까 고민이 되네요.&lt;/p&gt;
&lt;h2 id=&#34;끝내며&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#끝내며&#34;&gt;&lt;/a&gt; 끝내며&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;중용&lt;/code&gt; 이라는 고전을 참 좋아합니다. 꾸준함만큼 아름다운 것이 없으나 공자님마저도 어렵다 하신게 꾸준함입니다.&lt;br /&gt;
이러한 꾸준함은 의지만으로 이룰 수는 없습니다. 꾸준함을 도와주는, 오늘의 나에게 맞는 최적의 방법을 끊임없이 찾아나가야 하겠습니다.&lt;/p&gt;
</content>
        <category term="Hyunseok Jeong" />
        <category term="습관" />
        <category term="중용" />
        <category term="꾸준함" />
        <category term="성실" />
        <updated>2020-09-14T09:45:06.000Z</updated>
    </entry>
</feed>

{
    "version": "https://jsonfeed.org/version/1",
    "title": "딥백수 • All posts by \"grpc\" tag",
    "description": "우리는 '지속가능한 백수질'을 지향합니다. 고로 외롭게 공부하고 있을 당신을 응원합니다. 딥러닝에 관련된 글 뿐만 아니라, 백수생활의 넋두리도 환영합니다.",
    "home_page_url": "https://deepbaksu.github.io",
    "items": [
        {
            "id": "https://deepbaksu.github.io/2021/05/01/how-to-REST-from-gRPC/",
            "url": "https://deepbaksu.github.io/2021/05/01/how-to-REST-from-gRPC/",
            "title": "gRPC에서 REST까지",
            "date_published": "2021-05-01T20:43:00.000Z",
            "content_html": "<p>gRPC를 통해 REST 서버를 만들어 보자. gRPC 클라이언트로 연결할 수 있으면 좋지만, REST가 보편적이기 때문에 REST API를 구현해줘야 할 필요가 있다. 또한, Heroku에서는 HTTP/2 를 지원하지 않기 때문에 gRPC 를 사용할 수 없어, 어쩔 수 없이 HTTP/1.1 REST API를 노출해줘야 한다.</p>\n<p>gRPC서버를 만들어놓으면</p>\n<ul>\n<li>REST 서버</li>\n<li>OpenAPI (Swagger)</li>\n<li>OpenAPI 를 통한 클라이언트 코드</li>\n</ul>\n<p>가 자동으로 생기게 된다. Protocol Buffer를 사용하기에 타입에 대한 걱정도 없어진다.</p>\n<h2 id=\"why-grpc\"><a class=\"markdownIt-Anchor\" href=\"#why-grpc\"></a> Why gRPC?</h2>\n<p>gRPC는 Protocol Buffer를 사용해 정의한다. Protocol Buffer를 사용해서 정의해두면 클라이언트와 서버 코드 모두 생성 가능해 전송되는 데이터의 형식에 대해서 걱정하지 않아도 된다.</p>\n<p>예를 들어, 클라이언트에서는 underscore 인줄 알고 보냈는데</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;my_name&quot;</span>: <span class=\"string\">&quot;ABC&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>서버에서는 camelCase의 형식으로 생각하고 적을 수 도 있다.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;myName&quot;</span>: <span class=\"string\">&quot;ABC&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>또한, API를 먼저 protobuf로 정의해두어야 하기 때문에 API first development가 가능하다.<br />\n게다가, OpenAPI 스펙 또한 생성 가능해서 Swagger UI 뿐만 아니라 클라이언트 코드 생성이 쉽게 가능하다.</p>\n<h2 id=\"how\"><a class=\"markdownIt-Anchor\" href=\"#how\"></a> How?</h2>\n<p><img src=\"/2021/05/01/how-to-REST-from-gRPC/overview.svg\" alt=\"Overview\" /></p>\n<p><a href=\"https://github.com/grpc-ecosystem/grpc-gateway\">gRPC Gateway</a> 를 사용한다.</p>\n<p>그림에서는 gRPC Gateway 와 gRPC Server가 나뉘어져 있지만 간단한 서버라면 하나의 서버/하나의 포트에서 실행시킬 수 도 있다.</p>\n<h3 id=\"비슷한-방법들\"><a class=\"markdownIt-Anchor\" href=\"#비슷한-방법들\"></a> 비슷한 방법들</h3>\n<p>아래 두개 모두 gRPC Gateway 와 비슷한 기능을 한다. 하지만 gRPC Gateway의 장점은 하나의 서버에서 하나의 포트에서 gRPC와 REST Endpoint를 동시에 서빙 가능하다는 점이다.</p>\n<ul>\n<li>gRPC-Web</li>\n<li>Extensible Service Proxy (ESP)</li>\n</ul>\n<h2 id=\"code\"><a class=\"markdownIt-Anchor\" href=\"#code\"></a> Code</h2>\n<p>protobuf에서 <code>google.api.http</code>를 사용해 REST API를 설정해주기만 하면 된다.</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax = <span class=\"string\">&quot;proto3&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">package</span> blog.v1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;google/api/annotations.proto&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">service</span> <span class=\"title\">BlogService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">rpc</span> CreatePost (CreatePostRequest) <span class=\"keyword\">returns</span> (CreatePostResponse) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">option</span> (google.api.http) = &#123;</span><br><span class=\"line\">            post: <span class=\"string\">&quot;/v1/blog&quot;</span></span><br><span class=\"line\">            body: <span class=\"string\">&quot;*&quot;</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">rpc</span> GetPosts (GetPostsRequest) <span class=\"keyword\">returns</span> (GetPostsResponse) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">option</span> (google.api.http) = &#123;</span><br><span class=\"line\">            get: <span class=\"string\">&quot;/v1/blog/&#123;post_id&#125;&quot;</span></span><br><span class=\"line\">            additional_bindings &#123;</span><br><span class=\"line\">                get: <span class=\"string\">&quot;/v1/blog&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">rpc</span> DeletePost (DeletePostRequest) <span class=\"keyword\">returns</span> (DeletePostResponse) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">option</span> (google.api.http) = &#123;</span><br><span class=\"line\">            delete: <span class=\"string\">&quot;/v1/blog/&#123;post_id&#125;&quot;</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>예를 들어, <code>POST /v1/blog</code>를 보내면 <code>BlogService.CreatePost</code> RPC를 실행시킨다.</p>\n<p>프로토 파일을 정의했으면 <code>protoc</code> 나 <code>buf</code> 를 사용해 코드를 생성해주기만 하면 된다.</p>\n<p>Buf를 사용할 경우, <code>buf.gen.yaml</code> 를 아래와 같이 생성하고 <code>buf generate</code> 하면 된다.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># buf.gen.yaml</span></span><br><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">plugins:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">go</span></span><br><span class=\"line\">    <span class=\"attr\">out:</span> <span class=\"string\">gen/go</span></span><br><span class=\"line\">    <span class=\"attr\">opt:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">paths=source_relative</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">go-grpc</span></span><br><span class=\"line\">    <span class=\"attr\">out:</span> <span class=\"string\">gen/go</span></span><br><span class=\"line\">    <span class=\"attr\">opt:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">paths=source_relative</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">grpc-gateway</span></span><br><span class=\"line\">    <span class=\"attr\">out:</span> <span class=\"string\">gen/go</span></span><br><span class=\"line\">    <span class=\"attr\">opt:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">paths=source_relative</span></span><br></pre></td></tr></table></figure>\n<p>하나의 바이너리에서 gRPC Gateway 와 gRPC Server를 동시에 서빙하는 Go 서버 파일은 다음과 같다.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> port = flag.Int(<span class=\"string\">&quot;port&quot;</span>, <span class=\"number\">80</span>, <span class=\"string\">&quot;--port 80&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> blogImpl <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  posts []*v1.Post</span><br><span class=\"line\">  v1.UnimplementedBlogServiceServer</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 헤더를 보고 Content-Type: application/grpc 라면 gRPC 서버 핸들러를 이용하고</span></span><br><span class=\"line\"><span class=\"comment\">// 그 이외에 경우는 REST API이기 때문에 Gateway 핸들러에게 보내준다.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">allHandler</span><span class=\"params\">(grpcServer *grpc.Server, httpHandler http.Handler)</span> <span class=\"title\">http</span>.<span class=\"title\">Handler</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> h2c.NewHandler(http.HandlerFunc(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> r.ProtoMajor == <span class=\"number\">2</span> &amp;&amp; strings.Contains(r.Header.Get(<span class=\"string\">&quot;Content-Type&quot;</span>), <span class=\"string\">&quot;application/grpc&quot;</span>) &#123;</span><br><span class=\"line\">      grpcServer.ServeHTTP(w, r)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      httpHandler.ServeHTTP(w, r)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;), &amp;http2.Server&#123;&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  flag.Parse()</span><br><span class=\"line\"></span><br><span class=\"line\">  addr := fmt.Sprintf(<span class=\"string\">&quot;:%d&quot;</span>, *port)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// gRPC 서버 생성</span></span><br><span class=\"line\">  grpcServer := grpc.NewServer()</span><br><span class=\"line\">  v1.RegisterBlogServiceServer(grpcServer, &amp;blogImpl&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// gRPC Gateway 생성</span></span><br><span class=\"line\">  gwmux := runtime.NewServeMux()</span><br><span class=\"line\">  err := v1.RegisterBlogServiceHandlerFromEndpoint(context.Background(), gwmux, addr, []grpc.DialOption&#123;grpc.WithInsecure()&#125;)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  err = http.ListenAndServe(addr, allHandler(grpcServer, gwmux))</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>그러면 완성이다. 서버를 실행한 후 REST API가 제대로 작동하는지 <code>curl</code> 을 사용해 확인할 수 있다.</p>\n<p><code>POST /v1/blog</code> 를 통해 새로운 블로그 포스트 생성.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> curl -X <span class=\"string\">&#x27;POST&#x27;</span> \\</span></span><br><span class=\"line\"><span class=\"bash\">  <span class=\"string\">&#x27;https://grpc-gateway-example.herokuapp.com/v1/blog&#x27;</span> \\</span></span><br><span class=\"line\"><span class=\"bash\">  -H <span class=\"string\">&#x27;accept: application/json&#x27;</span> \\</span></span><br><span class=\"line\"><span class=\"bash\">  -H <span class=\"string\">&#x27;Content-Type: application/json&#x27;</span> \\</span></span><br><span class=\"line\"><span class=\"bash\">  -d <span class=\"string\">&#x27;&#123;</span></span></span><br><span class=\"line\">  &quot;content&quot;: &quot;내용 내용 내용&quot;</span><br><span class=\"line\">&#125;&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;post&quot;: &#123;</span><br><span class=\"line\">    &quot;id&quot;: &quot;1619938066293158896&quot;,</span><br><span class=\"line\">    &quot;content&quot;: &quot;내용 내용 내용&quot;,</span><br><span class=\"line\">    &quot;createdAt&quot;: &quot;2021-05-02T06:47:46.293159328Z&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>GET /v1/blog</code> 를 통해 작성된 블로그 포스트 가져오기.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> curl -X <span class=\"string\">&#x27;GET&#x27;</span> \\</span></span><br><span class=\"line\"><span class=\"bash\">  <span class=\"string\">&#x27;https://grpc-gateway-example.herokuapp.com/v1/blog&#x27;</span> \\</span></span><br><span class=\"line\"><span class=\"bash\">  -H <span class=\"string\">&#x27;accept: application/json&#x27;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;posts&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;id&quot;: &quot;1619938066293158896&quot;,</span><br><span class=\"line\">      &quot;content&quot;: &quot;내용 내용 내용&quot;,</span><br><span class=\"line\">      &quot;createdAt&quot;: &quot;2021-05-02T06:47:46.293159328Z&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>정리하면, gRPC 를 사용할 경우</p>\n<ul>\n<li>완전한 API First Development가 가능하다.\n<ul>\n<li>일반적인 경우 swagger.json 파일을 손으로 작성하기 매우 까다롭기 때문에 API First Development가 매우 어렵다.</li>\n</ul>\n</li>\n<li>인터페이스가 프로토콜버퍼에 정의되어 있어 클라이언트와 서버와 서로 잘못된 데이터를 사용하는 일이 없다.</li>\n<li>코드가 자동으로 생성되어 boilerplate 코드를 훨씬 줄일 수 있다.</li>\n</ul>\n<p>실제 이 코드는</p>\n<p><img src=\"/2021/05/01/how-to-REST-from-gRPC/swagger.png\" alt=\"Protobuf에서 생성된 Swagger UI\" /></p>\n<ul>\n<li><a href=\"https://grpc-gateway-example.herokuapp.com/swagger-ui\">https://grpc-gateway-example.herokuapp.com/swagger-ui</a> 에서 테스트 가능하다.</li>\n</ul>\n<p>더 자세한 코드는 <a href=\"https://github.com/kkweon/grpc-rest-via-gateway\">https://github.com/kkweon/grpc-rest-via-gateway</a> 에서 볼 수 있다.</p>\n",
            "tags": [
                "gRPC",
                "Go",
                "REST"
            ]
        }
    ]
}
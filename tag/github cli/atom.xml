<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://deepbaksu.github.io</id>
    <title>딥백수 • Posts by &#34;github cli&#34; tag</title>
    <link href="https://deepbaksu.github.io" />
    <updated>2020-09-22T08:36:04.000Z</updated>
    <category term="Mo Kweon" />
    <category term="go" />
    <category term="golang" />
    <category term="dependency injection" />
    <category term="wire" />
    <category term="uber-go" />
    <category term="fx" />
    <category term="Hyunggi Chang" />
    <category term="AI" />
    <category term="딥러닝" />
    <category term="로보틱스" />
    <category term="YouTube" />
    <category term="News" />
    <category term="Hyunseok Jeong" />
    <category term="Software Architecture" />
    <category term="Agile" />
    <category term="Architect" />
    <category term="Jinyoung Song" />
    <category term="데이터분석" />
    <category term="통계분석" />
    <category term="통계학" />
    <category term="통계역사" />
    <category term="비트코인" />
    <category term="제국주의" />
    <category term="미래전망" />
    <category term="플랫폼전략" />
    <category term="디지털자산" />
    <category term="microservice" />
    <category term="CQRS" />
    <category term="architecture" />
    <category term="software engineering" />
    <category term="선지원" />
    <category term="후고민" />
    <category term="선지원 후고민" />
    <category term="실험" />
    <category term="Apply Driven Study" />
    <category term="생존" />
    <category term="멘토링" />
    <category term="용기" />
    <category term="free web server" />
    <category term="heroku" />
    <category term="aws" />
    <category term="gcp" />
    <category term="netlify" />
    <category term="github actions" />
    <category term="구글애널리틱스" />
    <category term="GA" />
    <category term="Google Analytics" />
    <category term="Data Analysis" />
    <category term="Web Log Analysis" />
    <category term="Happy working" />
    <category term="Mindfulness" />
    <category term="Noble Eightfold Path" />
    <category term="gRPC" />
    <category term="Go" />
    <category term="REST" />
    <category term="존버" />
    <category term="jonber" />
    <category term="딥백수" />
    <category term="회고" />
    <category term="bluehole" />
    <category term="krafton" />
    <category term="communication" />
    <category term="GitHub CLI" />
    <category term="Gist" />
    <category term="Leaning by Doing" />
    <category term="Repo" />
    <category term="Alias" />
    <category term="습관" />
    <category term="중용" />
    <category term="꾸준함" />
    <category term="성실" />
    <category term="대화" />
    <category term="비폭력대화" />
    <category term="Golang" />
    <category term="Slice" />
    <category term="example" />
    <category term="Windows" />
    <category term="PowerShell" />
    <category term="PowerShell script" />
    <category term="Git" />
    <category term="Prompt" />
    <category term="Martin Fowler" />
    <category term="Refactoring" />
    <category term="Principles" />
    <category term="파이썬" />
    <category term="실무" />
    <category term="데이터분석 실무" />
    <category term="네트워크 분석" />
    <category term="최적화" />
    <category term="시뮬레이션" />
    <category term="자연어처리" />
    <category term="회귀" />
    <category term="예측 분석" />
    <category term="semantic release" />
    <category term="semantic version" />
    <category term="slack" />
    <category term="bot" />
    <category term="oauth" />
    <category term="Github Action" />
    <category term="Slack" />
    <category term="Automation" />
    <category term="자동화" />
    <category term="cron" />
    <category term="Seunghwan Chang" />
    <category term="English" />
    <category term="would" />
    <category term="ppt" />
    <category term="발표" />
    <category term="consulting" />
    <category term="보고서" />
    <category term="파워포인트" />
    <category term="PT고자" />
    <category term="ppt고자" />
    <category term="ppt공포" />
    <category term="슬라이드" />
    <category term="Martin Hwang" />
    <category term="Ray" />
    <category term="distributed computing" />
    <category term="parallel computing" />
    <entry>
        <id>https://deepbaksu.github.io/2020/09/22/lets-do-github-cli-part2/</id>
        <title>GitHub CLI 를 만져보자 - 2</title>
        <link rel="alternate" href="https://deepbaksu.github.io/2020/09/22/lets-do-github-cli-part2/"/>
        <content type="html">&lt;figure style=&#34;display: flex; flex-direction: column; align-items: center&#34;&gt;
  &lt;img src=&#34;./lets-do-github-cli-part2/yancy-min-842ofHC6MaI-unsplash.jpg&#34;&gt;
  &lt;figcaption&gt;Photo by &lt;a href=&#34;https://unsplash.com/@yancymin?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Yancy Min&lt;/a&gt; on &lt;a href=&#34;https://unsplash.com/s/photos/github?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Unsplash&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;gist 를 만져보며 GitHub CLI 에 대한 기대감이 커졌다. 이번에는 repo 와 관련한 기능을 써보고자 한다.&lt;br /&gt;
이렇게 신기해하며 사용법을 익히는 것보다 더욱 중요한 것은 실제로 꾸준히 쓰는 것이겠다.&lt;br /&gt;
좋은 분들과 함께하는 딥백수 커뮤니티에 블로그 포스팅을 자주하며 기능들을 내 것으로 만들어야 겠다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GitHub Repo: &lt;a href=&#34;https://github.com/cli/cli&#34;&gt;https://github.com/cli/cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Official Document: &lt;a href=&#34;https://cli.github.com/manual/&#34;&gt;https://cli.github.com/manual/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;clone-repo&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#clone-repo&#34;&gt;&lt;/a&gt; Clone repo&lt;/h2&gt;
&lt;p&gt;두 명령은 같다. 장단점이나 차이를 모르겠다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gh repo clone deepbaksu/deepbaksu.github.io
$ git clone http://github.com/deepbaksu/deepbaksu.github.io
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/22/lets-do-github-cli-part2/1.png&#34; alt=&#34;clone repo&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;create-repo&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#create-repo&#34;&gt;&lt;/a&gt; Create repo&lt;/h2&gt;
&lt;p&gt;이거 정말 유용하다. 실전에는 보통 아래와 같이 했었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;프로젝트 폴더를 만들고 기본적인 구현을 한 다음에&lt;/li&gt;
&lt;li&gt;GitHub 사이트로 가서 repo 를 생성하고 다시 local 의 repo 와 연결해주는 작업을 한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;GitHub CLI 를 이용하여 repo 를 생성하는 여러 옵션이 있지만 이렇게 쓰게 될 것 같다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;프로젝트 디렉토리를 만들고, 그 디렉토리로 들어간 다음&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ gh repo create&lt;/code&gt; 만 먹여주면 디렉토리 이름으로 repo 가 만들어진다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;실습&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#실습&#34;&gt;&lt;/a&gt; 실습&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;디렉토리를 생성하고 들어가서 바로 repo 를 생성하려 하였지만 실패!&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;git 디렉토리 이어야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;code&gt;$ git init&lt;/code&gt; 을 해주고 &lt;code&gt;$ gh repo create&lt;/code&gt; 를 해주니 성공&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;interactive 하게 repo 이름, description, public 여부를 설정해주면 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/22/lets-do-github-cli-part2/2.png&#34; alt=&#34;create repo&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;view-repo&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#view-repo&#34;&gt;&lt;/a&gt; View repo&lt;/h2&gt;
&lt;p&gt;repository 를 본다는 것이 무얼 말하는 것인지 처음에는 이해가 가지 않았다.&lt;br /&gt;
여러 옵션이 있지만 현재 CLI 화면의 git 의 GitHub repo 를 브라우저에서 열때 가장 많이 사용할 듯 하다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gh repo view // 만 쳐주면 README.md 만 보여주지만
$ gh repo view --web // 을 쳐주면 브라우저에서 GitHub repo 를 바로 열어준다.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;실습-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#실습-2&#34;&gt;&lt;/a&gt; 실습&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://README.md&#34;&gt;README.md&lt;/a&gt; 파일을 만들어준 다음,&lt;/li&gt;
&lt;li&gt;git add, commit, push 를 해주었다.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;여기서 신기했던게 --set-upstream 이 자동으로 되어 있을것만 같았는데 해줘야 한다는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/22/lets-do-github-cli-part2/3.png&#34; alt=&#34;add readme repo&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;code&gt;$ gh repo view&lt;/code&gt; 를 해주면 해당 repo 의 &lt;a href=&#34;http://README.md&#34;&gt;README.md&lt;/a&gt; 를 보여준다&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ gh repo view --web&lt;/code&gt; 옵션을 추가해주면 바로 해당 repo 의 GitHub 페이지를 브라우저에서 열어준다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/22/lets-do-github-cli-part2/4.png&#34; alt=&#34;view repo&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;아래와 같이 Browser 에서 열린다. 편리하다!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/22/lets-do-github-cli-part2/5.png&#34; alt=&#34;view repo web&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;alias&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#alias&#34;&gt;&lt;/a&gt; Alias&lt;/h2&gt;
&lt;p&gt;평소에 git 도 alias 를 잘 쓰고 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git cb // git checkout --branch
$ git cm -m // git commit -m
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 GitHub CLI 명령중 create 와 view 는 단축키를 지정해주면 편할 것 같다.&lt;br /&gt;
아래와 같이 설정 해보자&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gh repo create →  $ gh rc
$ gh repo view →   $ gh rv
$ gh repo view --web →  $ gh rvw
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/22/lets-do-github-cli-part2/6.png&#34; alt=&#34;alias&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Official document (&lt;a href=&#34;https://cli.github.com/manual/&#34;&gt;https://cli.github.com/manual/&lt;/a&gt;) 자체가 길지 않아 30분-1시간을 흝어보면 왠만한 기능은 이해가 되고, 여기처럼 실습까지 해주면 대부분의 feature 는 충분히 소화해 낼 수 있을것 같다. 마지막으로 pull request 를 잘 다뤄보고 싶은데 이건 좀더 실전 경험이 쌓이면 정리해보려 한다.&lt;/p&gt;
&lt;p&gt;GitHub CLI 에서&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;PR 을 보내거가, PR 을 리뷰하고&lt;/li&gt;
&lt;li&gt;제안된 수정사항을 검토하거나 빌드해보고&lt;/li&gt;
&lt;li&gt;merge 까지 해보는 거다.&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="Hyunseok Jeong" />
        <category term="GitHub CLI" />
        <category term="Repo" />
        <category term="Alias" />
        <updated>2020-09-22T08:36:04.000Z</updated>
    </entry>
    <entry>
        <id>https://deepbaksu.github.io/2020/09/21/lets-do-github-cli-part1/</id>
        <title>GitHub CLI 를 만져보자 - 1</title>
        <link rel="alternate" href="https://deepbaksu.github.io/2020/09/21/lets-do-github-cli-part1/"/>
        <content type="html">&lt;p&gt;GitHub CLI 가 나왔다 한다.&lt;br /&gt;
GitHub 을 이용해 본격적인 협업을 하지는 않지만 백업 용도로 잘 쓰고 있기에 이런 저런 기능이 있구나 하고 넘어가기 보다는 나의 용도에 적합한 기능들 만이라도 직접 한번 써보고자 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GitHub Repo: &lt;a href=&#34;https://github.com/cli/cli&#34;&gt;https://github.com/cli/cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Official Document: &lt;a href=&#34;https://cli.github.com/manual/&#34;&gt;https://cli.github.com/manual/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;설치&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#설치&#34;&gt;&lt;/a&gt; 설치&lt;/h2&gt;
&lt;p&gt;Chocolatey 가 설치되어 있었기에 Powershell 을 관리자 모드로 열어서 아래와 같이 gh 를 설치 완료&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/21/lets-do-github-cli-part1/1.png&#34; alt=&#34;install github cli&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;로그인&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#로그인&#34;&gt;&lt;/a&gt; 로그인&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;gh auth login&lt;/code&gt; 또는 &lt;code&gt;gh auth login --hostname github.com&lt;/code&gt; 으로 로그인을 해주면 준비 완료이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/21/lets-do-github-cli-part1/2.png&#34; alt=&#34;login github cli&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;손이-가는-명령들-사용해보기&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#손이-가는-명령들-사용해보기&#34;&gt;&lt;/a&gt; 손이 가는 명령들 사용해보기&lt;/h2&gt;
&lt;p&gt;설치하고 보니 아래와 같은 명령들이 가능하다.&lt;br /&gt;
해보고 싶은 것은&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;gist 생성하기&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;언제든 동작하는, 나중에 참고하고픈 코드들을 gist 로 백업해둘 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;repo create, clone, view&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GitHub 로 가지 않고도 바로 repo 를 생성할 수 있다.&lt;/li&gt;
&lt;li&gt;clone 은 git clone 과 뭐가 다른지 궁금하다&lt;/li&gt;
&lt;li&gt;view 기능은 정확히 어떤 기능일지 궁금하다&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;당장은 쓰지 않더라도 기대 되거나 궁금한 기능&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;alias&lt;/strong&gt;: git 도 alias 를 잘 쓰고 있기에 이것도 궁금하다&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;completion&lt;/strong&gt;: 이건 상상이 안가는데 script 관련이라니 사용처가 궁금하다&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pr&lt;/strong&gt;: gh 기능의 꽃이 pr 이 아닌가 싶다. 특히 예시로 나오는 pr checkout 을 하면, pr 을 바로 내려받아서 빌드하고 돌려볼 수 있겠다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/21/lets-do-github-cli-part1/3.png&#34; alt=&#34;commands&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;create-gist-list-gist&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#create-gist-list-gist&#34;&gt;&lt;/a&gt; create gist / list gist&lt;/h2&gt;
&lt;p&gt;이번 포스팅에서는 gist 까지만 사용해보자.&lt;br /&gt;
만들어둔 코드가 마음에 들어 gist 에 넣어두고 싶다면 아래와 같이 해주면 된다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;default 가 secret 이므로 public 으로 올리려면 &lt;code&gt;--public&lt;/code&gt; 옵션을 준다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;별도로 설명을 추가하고 싶다면 &lt;code&gt;--desc&lt;/code&gt; 옵션을 이용한다. 이걸 쓰지 않으면 파일명이 들어간다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;개인적으로 gist 의 활용은 때때로 써야할 기능들을 cloud 에 저장해놓고 필요할때 다시 가져와서 보는데 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;예를 들어 Go 언어로 AES256 암호화/복호화를 하는 코드 같은 것&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;아래와 같이 간단히 &lt;code&gt;gh gist list&lt;/code&gt; 명령으로 내가 Cloud 에 올려놓은 gist 의 리스트를 볼 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gist 가 많아진다면 query 나 간단한 regexp 로 추려낼 수 있으면 좋겠다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/21/lets-do-github-cli-part1/4.png&#34; alt=&#34;create and list gist&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;edit-gist-view-gist&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#edit-gist-view-gist&#34;&gt;&lt;/a&gt; edit gist / view gist&lt;/h2&gt;
&lt;p&gt;이 기능을 써보면서 박수를 쳤다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;list 명령으로 원하는 gist 를 찾아냈다면 해시값 (gist ID) 로 edit 하겠다는 요청을 할 수 있다.
&lt;ul&gt;
&lt;li&gt;git 에서처럼 hash 의 앞쪽 일부만으로 요청은 불가하였다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gh gist edit&lt;/code&gt; 명령만으로 지정해놓은 editor 로 바로 코드가 열린다.&lt;/li&gt;
&lt;li&gt;그리고 수정이 끝나 editor 를 닫으면 바로 Cloud 에 수정된 내용이 올라간다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;gh gist view&lt;/code&gt; 명령을 통해 gist 에 올린 원본인 mygist.go 파일은 전혀 건드리지 않고, gist 의 내용만 변경된 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/21/lets-do-github-cli-part1/5.png&#34; alt=&#34;edit and view gist&#34; /&gt;&lt;/p&gt;
&lt;p&gt;GitHub 로 가서 보면 변경된 히스토리가 모두 저장되어 있음을 알 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2020/09/21/lets-do-github-cli-part1/6.png&#34; alt=&#34;gist history&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;이어서&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#이어서&#34;&gt;&lt;/a&gt; 이어서&lt;/h2&gt;
&lt;p&gt;이어지는 posting 에 pr 과 repo 관련한 기능을 써보겠다.&lt;/p&gt;
&lt;p&gt;덧붙여 한마디 해보고 싶다. &lt;strong&gt;Learning by doing&lt;/strong&gt; 이라는 말이 있다.&lt;br /&gt;
GitHub CLI 가 정식 릴리즈 되었다는 말을 들었고 이런 저런 기능이 있다는 말 정도만 듣고 언젠가 써볼까 생각만 했었는데&lt;br /&gt;
짬을 내어 이렇게 들여다보고 손으로 직접 타이핑을 해보니 그냥 눈으로 흝어본 것과는 하늘과 땅의 차이가 난다.&lt;br /&gt;
무엇이든 손으로 직접 해보자.&lt;/p&gt;
</content>
        <category term="Hyunseok Jeong" />
        <category term="GitHub CLI" />
        <category term="Gist" />
        <category term="Leaning by Doing" />
        <updated>2020-09-21T10:42:32.000Z</updated>
    </entry>
</feed>

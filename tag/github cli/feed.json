{
    "version": "https://jsonfeed.org/version/1",
    "title": "딥백수 • All posts by \"github cli\" tag",
    "description": "우리는 '지속가능한 백수질'을 지향합니다. 고로 외롭게 공부하고 있을 당신을 응원합니다. 딥러닝에 관련된 글 뿐만 아니라, 백수생활의 넋두리도 환영합니다.",
    "home_page_url": "https://deepbaksu.github.io",
    "items": [
        {
            "id": "https://deepbaksu.github.io/2020/09/22/lets-do-github-cli-part2/",
            "url": "https://deepbaksu.github.io/2020/09/22/lets-do-github-cli-part2/",
            "title": "GitHub CLI 를 만져보자 - 2",
            "date_published": "2020-09-22T08:36:04.000Z",
            "content_html": "<figure style=\"display: flex; flex-direction: column; align-items: center\">\n  <img src=\"./lets-do-github-cli-part2/yancy-min-842ofHC6MaI-unsplash.jpg\">\n  <figcaption>Photo by <a href=\"https://unsplash.com/@yancymin?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Yancy Min</a> on <a href=\"https://unsplash.com/s/photos/github?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></figcaption>\n</figure>\n<p>gist 를 만져보며 GitHub CLI 에 대한 기대감이 커졌다. 이번에는 repo 와 관련한 기능을 써보고자 한다.<br />\n이렇게 신기해하며 사용법을 익히는 것보다 더욱 중요한 것은 실제로 꾸준히 쓰는 것이겠다.<br />\n좋은 분들과 함께하는 딥백수 커뮤니티에 블로그 포스팅을 자주하며 기능들을 내 것으로 만들어야 겠다.</p>\n<ul>\n<li>GitHub Repo: <a href=\"https://github.com/cli/cli\">https://github.com/cli/cli</a></li>\n<li>Official Document: <a href=\"https://cli.github.com/manual/\">https://cli.github.com/manual/</a></li>\n</ul>\n<h2 id=\"clone-repo\"><a class=\"markdownIt-Anchor\" href=\"#clone-repo\"></a> Clone repo</h2>\n<p>두 명령은 같다. 장단점이나 차이를 모르겠다.</p>\n<pre><code>$ gh repo clone deepbaksu/deepbaksu.github.io\n$ git clone http://github.com/deepbaksu/deepbaksu.github.io\n</code></pre>\n<p><img src=\"/2020/09/22/lets-do-github-cli-part2/1.png\" alt=\"clone repo\" /></p>\n<h2 id=\"create-repo\"><a class=\"markdownIt-Anchor\" href=\"#create-repo\"></a> Create repo</h2>\n<p>이거 정말 유용하다. 실전에는 보통 아래와 같이 했었다.</p>\n<ol>\n<li>프로젝트 폴더를 만들고 기본적인 구현을 한 다음에</li>\n<li>GitHub 사이트로 가서 repo 를 생성하고 다시 local 의 repo 와 연결해주는 작업을 한다.</li>\n</ol>\n<p>GitHub CLI 를 이용하여 repo 를 생성하는 여러 옵션이 있지만 이렇게 쓰게 될 것 같다.</p>\n<ol>\n<li>프로젝트 디렉토리를 만들고, 그 디렉토리로 들어간 다음</li>\n<li><code>$ gh repo create</code> 만 먹여주면 디렉토리 이름으로 repo 가 만들어진다.</li>\n</ol>\n<h3 id=\"실습\"><a class=\"markdownIt-Anchor\" href=\"#실습\"></a> 실습</h3>\n<ol>\n<li>디렉토리를 생성하고 들어가서 바로 repo 를 생성하려 하였지만 실패!</li>\n</ol>\n<ul>\n<li>git 디렉토리 이어야 한다.</li>\n</ul>\n<ol start=\"2\">\n<li><code>$ git init</code> 을 해주고 <code>$ gh repo create</code> 를 해주니 성공</li>\n</ol>\n<ul>\n<li>interactive 하게 repo 이름, description, public 여부를 설정해주면 된다.</li>\n</ul>\n<p><img src=\"/2020/09/22/lets-do-github-cli-part2/2.png\" alt=\"create repo\" /></p>\n<h2 id=\"view-repo\"><a class=\"markdownIt-Anchor\" href=\"#view-repo\"></a> View repo</h2>\n<p>repository 를 본다는 것이 무얼 말하는 것인지 처음에는 이해가 가지 않았다.<br />\n여러 옵션이 있지만 현재 CLI 화면의 git 의 GitHub repo 를 브라우저에서 열때 가장 많이 사용할 듯 하다.</p>\n<pre><code>$ gh repo view // 만 쳐주면 README.md 만 보여주지만\n$ gh repo view --web // 을 쳐주면 브라우저에서 GitHub repo 를 바로 열어준다.\n</code></pre>\n<h3 id=\"실습-2\"><a class=\"markdownIt-Anchor\" href=\"#실습-2\"></a> 실습</h3>\n<ol>\n<li><a href=\"http://README.md\">README.md</a> 파일을 만들어준 다음,</li>\n<li>git add, commit, push 를 해주었다.</li>\n</ol>\n<ul>\n<li>여기서 신기했던게 --set-upstream 이 자동으로 되어 있을것만 같았는데 해줘야 한다는 것</li>\n</ul>\n<p><img src=\"/2020/09/22/lets-do-github-cli-part2/3.png\" alt=\"add readme repo\" /></p>\n<ol start=\"3\">\n<li><code>$ gh repo view</code> 를 해주면 해당 repo 의 <a href=\"http://README.md\">README.md</a> 를 보여준다</li>\n<li><code>$ gh repo view --web</code> 옵션을 추가해주면 바로 해당 repo 의 GitHub 페이지를 브라우저에서 열어준다.</li>\n</ol>\n<p><img src=\"/2020/09/22/lets-do-github-cli-part2/4.png\" alt=\"view repo\" /></p>\n<ol start=\"5\">\n<li>아래와 같이 Browser 에서 열린다. 편리하다!</li>\n</ol>\n<p><img src=\"/2020/09/22/lets-do-github-cli-part2/5.png\" alt=\"view repo web\" /></p>\n<h2 id=\"alias\"><a class=\"markdownIt-Anchor\" href=\"#alias\"></a> Alias</h2>\n<p>평소에 git 도 alias 를 잘 쓰고 있다.</p>\n<pre><code>$ git cb // git checkout --branch\n$ git cm -m // git commit -m\n</code></pre>\n<p>위 GitHub CLI 명령중 create 와 view 는 단축키를 지정해주면 편할 것 같다.<br />\n아래와 같이 설정 해보자</p>\n<pre><code>$ gh repo create →  $ gh rc\n$ gh repo view →   $ gh rv\n$ gh repo view --web →  $ gh rvw\n</code></pre>\n<p><img src=\"/2020/09/22/lets-do-github-cli-part2/6.png\" alt=\"alias\" /></p>\n<p>Official document (<a href=\"https://cli.github.com/manual/\">https://cli.github.com/manual/</a>) 자체가 길지 않아 30분-1시간을 흝어보면 왠만한 기능은 이해가 되고, 여기처럼 실습까지 해주면 대부분의 feature 는 충분히 소화해 낼 수 있을것 같다. 마지막으로 pull request 를 잘 다뤄보고 싶은데 이건 좀더 실전 경험이 쌓이면 정리해보려 한다.</p>\n<p>GitHub CLI 에서</p>\n<ol>\n<li>PR 을 보내거가, PR 을 리뷰하고</li>\n<li>제안된 수정사항을 검토하거나 빌드해보고</li>\n<li>merge 까지 해보는 거다.</li>\n</ol>\n",
            "tags": [
                "Hyunseok Jeong",
                "GitHub CLI",
                "Repo",
                "Alias"
            ]
        },
        {
            "id": "https://deepbaksu.github.io/2020/09/21/lets-do-github-cli-part1/",
            "url": "https://deepbaksu.github.io/2020/09/21/lets-do-github-cli-part1/",
            "title": "GitHub CLI 를 만져보자 - 1",
            "date_published": "2020-09-21T10:42:32.000Z",
            "content_html": "<p>GitHub CLI 가 나왔다 한다.<br />\nGitHub 을 이용해 본격적인 협업을 하지는 않지만 백업 용도로 잘 쓰고 있기에 이런 저런 기능이 있구나 하고 넘어가기 보다는 나의 용도에 적합한 기능들 만이라도 직접 한번 써보고자 한다.</p>\n<ul>\n<li>GitHub Repo: <a href=\"https://github.com/cli/cli\">https://github.com/cli/cli</a></li>\n<li>Official Document: <a href=\"https://cli.github.com/manual/\">https://cli.github.com/manual/</a></li>\n</ul>\n<h2 id=\"설치\"><a class=\"markdownIt-Anchor\" href=\"#설치\"></a> 설치</h2>\n<p>Chocolatey 가 설치되어 있었기에 Powershell 을 관리자 모드로 열어서 아래와 같이 gh 를 설치 완료</p>\n<p><img src=\"/2020/09/21/lets-do-github-cli-part1/1.png\" alt=\"install github cli\" /></p>\n<h2 id=\"로그인\"><a class=\"markdownIt-Anchor\" href=\"#로그인\"></a> 로그인</h2>\n<p><code>gh auth login</code> 또는 <code>gh auth login --hostname github.com</code> 으로 로그인을 해주면 준비 완료이다.</p>\n<p><img src=\"/2020/09/21/lets-do-github-cli-part1/2.png\" alt=\"login github cli\" /></p>\n<h2 id=\"손이-가는-명령들-사용해보기\"><a class=\"markdownIt-Anchor\" href=\"#손이-가는-명령들-사용해보기\"></a> 손이 가는 명령들 사용해보기</h2>\n<p>설치하고 보니 아래와 같은 명령들이 가능하다.<br />\n해보고 싶은 것은</p>\n<p><strong>gist 생성하기</strong></p>\n<ul>\n<li>언제든 동작하는, 나중에 참고하고픈 코드들을 gist 로 백업해둘 수 있다.</li>\n</ul>\n<p><strong>repo create, clone, view</strong></p>\n<ul>\n<li>GitHub 로 가지 않고도 바로 repo 를 생성할 수 있다.</li>\n<li>clone 은 git clone 과 뭐가 다른지 궁금하다</li>\n<li>view 기능은 정확히 어떤 기능일지 궁금하다</li>\n</ul>\n<p>당장은 쓰지 않더라도 기대 되거나 궁금한 기능</p>\n<ul>\n<li><strong>alias</strong>: git 도 alias 를 잘 쓰고 있기에 이것도 궁금하다</li>\n<li><strong>completion</strong>: 이건 상상이 안가는데 script 관련이라니 사용처가 궁금하다</li>\n<li><strong>pr</strong>: gh 기능의 꽃이 pr 이 아닌가 싶다. 특히 예시로 나오는 pr checkout 을 하면, pr 을 바로 내려받아서 빌드하고 돌려볼 수 있겠다.</li>\n</ul>\n<p><img src=\"/2020/09/21/lets-do-github-cli-part1/3.png\" alt=\"commands\" /></p>\n<h2 id=\"create-gist-list-gist\"><a class=\"markdownIt-Anchor\" href=\"#create-gist-list-gist\"></a> create gist / list gist</h2>\n<p>이번 포스팅에서는 gist 까지만 사용해보자.<br />\n만들어둔 코드가 마음에 들어 gist 에 넣어두고 싶다면 아래와 같이 해주면 된다.</p>\n<ol>\n<li>\n<p>default 가 secret 이므로 public 으로 올리려면 <code>--public</code> 옵션을 준다.</p>\n</li>\n<li>\n<p>별도로 설명을 추가하고 싶다면 <code>--desc</code> 옵션을 이용한다. 이걸 쓰지 않으면 파일명이 들어간다.</p>\n</li>\n<li>\n<p>개인적으로 gist 의 활용은 때때로 써야할 기능들을 cloud 에 저장해놓고 필요할때 다시 가져와서 보는데 있다.</p>\n</li>\n<li>\n<p>예를 들어 Go 언어로 AES256 암호화/복호화를 하는 코드 같은 것</p>\n</li>\n<li>\n<p>아래와 같이 간단히 <code>gh gist list</code> 명령으로 내가 Cloud 에 올려놓은 gist 의 리스트를 볼 수 있다.</p>\n<ul>\n<li>gist 가 많아진다면 query 나 간단한 regexp 로 추려낼 수 있으면 좋겠다.</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"/2020/09/21/lets-do-github-cli-part1/4.png\" alt=\"create and list gist\" /></p>\n<h2 id=\"edit-gist-view-gist\"><a class=\"markdownIt-Anchor\" href=\"#edit-gist-view-gist\"></a> edit gist / view gist</h2>\n<p>이 기능을 써보면서 박수를 쳤다.</p>\n<ol>\n<li>list 명령으로 원하는 gist 를 찾아냈다면 해시값 (gist ID) 로 edit 하겠다는 요청을 할 수 있다.\n<ul>\n<li>git 에서처럼 hash 의 앞쪽 일부만으로 요청은 불가하였다.</li>\n</ul>\n</li>\n<li><code>gh gist edit</code> 명령만으로 지정해놓은 editor 로 바로 코드가 열린다.</li>\n<li>그리고 수정이 끝나 editor 를 닫으면 바로 Cloud 에 수정된 내용이 올라간다.</li>\n</ol>\n<p><code>gh gist view</code> 명령을 통해 gist 에 올린 원본인 mygist.go 파일은 전혀 건드리지 않고, gist 의 내용만 변경된 것을 확인할 수 있다.</p>\n<p><img src=\"/2020/09/21/lets-do-github-cli-part1/5.png\" alt=\"edit and view gist\" /></p>\n<p>GitHub 로 가서 보면 변경된 히스토리가 모두 저장되어 있음을 알 수 있다.</p>\n<p><img src=\"/2020/09/21/lets-do-github-cli-part1/6.png\" alt=\"gist history\" /></p>\n<h2 id=\"이어서\"><a class=\"markdownIt-Anchor\" href=\"#이어서\"></a> 이어서</h2>\n<p>이어지는 posting 에 pr 과 repo 관련한 기능을 써보겠다.</p>\n<p>덧붙여 한마디 해보고 싶다. <strong>Learning by doing</strong> 이라는 말이 있다.<br />\nGitHub CLI 가 정식 릴리즈 되었다는 말을 들었고 이런 저런 기능이 있다는 말 정도만 듣고 언젠가 써볼까 생각만 했었는데<br />\n짬을 내어 이렇게 들여다보고 손으로 직접 타이핑을 해보니 그냥 눈으로 흝어본 것과는 하늘과 땅의 차이가 난다.<br />\n무엇이든 손으로 직접 해보자.</p>\n",
            "tags": [
                "Hyunseok Jeong",
                "GitHub CLI",
                "Gist",
                "Leaning by Doing"
            ]
        }
    ]
}
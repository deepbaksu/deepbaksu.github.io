{
    "version": "https://jsonfeed.org/version/1",
    "title": "딥백수 • All posts by \"mo kweon\" tag",
    "description": "우리는 '지속가능한 백수질'을 지향합니다. 고로 외롭게 공부하고 있을 당신을 응원합니다. 딥러닝에 관련된 글 뿐만 아니라, 백수생활의 넋두리도 환영합니다.",
    "home_page_url": "https://deepbaksu.github.io",
    "items": [
        {
            "id": "https://deepbaksu.github.io/2020/09/17/lesson-learned-at-bluehole/",
            "url": "https://deepbaksu.github.io/2020/09/17/lesson-learned-at-bluehole/",
            "title": "나는 블루홀에서 무엇을 배웠나",
            "date_published": "2020-09-17T17:49:37.000Z",
            "content_html": "<p>한국에서 여러 회사에 다닌 곳 중에서 가장 기억에 남는 곳은 블루홀(현재는 크래프톤) 입니다. 그때 운이 좋게도 이상균 디렉터님으로부터 &quot;의도&quot;를 전달하는 커뮤니케이션에 대해 알게 되었고 깊이 익혀 항상 커뮤니케이션을 잘한다는 소리를 주변으로부터 들어올 수 있었습니다.</p>\n<p>보통 일반적인 회사에서의 커뮤니케이션 문제는 다음 그림과 같이 '의도’가 명확하게 드러나지 않은 소통을 하기 때문에 발생합니다.</p>\n<p><img src=\"/2020/09/17/lesson-learned-at-bluehole/communication.jpg\" alt=\"이상균 - 게임 디렉팅 튜토리얼 중\" /></p>\n<h2 id=\"전시-행동-강령\"><a class=\"markdownIt-Anchor\" href=\"#전시-행동-강령\"></a> 전시 행동 강령</h2>\n<p>모든 부대에는 전시에 특별한 지시 없어도 일사불란하게 움직이도록 “전시 행동 강령” 이라는 게 있습니다. 예를 들어, 이상균 님은 카투사로 복무하면서 다음과 같은 전시 행동 강령을 부여받았습니다.</p>\n<ul>\n<li>모든 문서를 파기하고 하드디스크를 뽑아 들고</li>\n<li>용산 고등학교 운동장에서 헬기를 타는 것</li>\n</ul>\n<p>그런데 말입니다. 용산 고등학교가 파괴되었다면? 단순 지시사항이 저게 전부였다면 용산 고등학교 근처에서 우왕좌왕했을 것입니다.</p>\n<p>그런데 만약 “최신 카투사 신병 자료를 캠프 헨리까지 옮겨야 한다” 는 의도가 전달되었다면?</p>\n<p>탈것을 구하든, 걸어서든 캠프 헨리까지 가려고 했을 것입니다.</p>\n<p><img src=\"/2020/09/17/lesson-learned-at-bluehole/commander_intent.jpg\" alt=\"지휘관의 의도\" /></p>\n<h2 id=\"지휘관의-의도\"><a class=\"markdownIt-Anchor\" href=\"#지휘관의-의도\"></a> 지휘관의 의도</h2>\n<ul>\n<li>1980년 미 육군에서 대부분의 전시 행동 강령과 작전계획이 무용지물이 된다는 걸 깨닫고 대안으로 제시한 개념</li>\n<li>모든 명령서에는 최상단에 의도를 짧게 서술</li>\n<li>강령보다 의도를 중심</li>\n<li>하드디스크를 들고 용산 고등학교로 가라 (X)</li>\n<li>최신 카투사 신병 자료를 캠프 헨리의 작전 본부까지 옮겨라 (O)</li>\n</ul>\n<h2 id=\"지시를-전달할-때는-왜냐하면-이-들어간다\"><a class=\"markdownIt-Anchor\" href=\"#지시를-전달할-때는-왜냐하면-이-들어간다\"></a> 지시를 전달할 때는 “왜냐하면” 이 들어간다.</h2>\n<div style=\"display: flex;\">\n  <div style=\"display: flex; flex-direction: column;\">\n    <img alt=\"의도가 없는 기획서\" src=\"./lesson-learned-at-bluehole/design_doc_1.jpg\">\n  </div>\n  <div style=\"display: flex; flex-direction: column;\">\n    <img alt=\"의도가 있는 기획서\" src=\"./lesson-learned-at-bluehole/design_doc_2.jpg\">\n  </div>\n</div>\n<p>고기는 오전 9시, 자정, 오후 6시, 오후 9시에 채워집니다. <strong>왜냐하면</strong> 출근(등교), 점심, 퇴근(하교) 자기 직전 시간에 게임 플레이를 유도하고 싶습니다.</p>\n<blockquote>\n<p>의도를 전달하지 않으면 &quot;내 마음을 맞춰봐&quot;와 같다.</p>\n</blockquote>\n<p>맨 위에 나온 슬픈 대화 내용도 디렉터가 의도를 전달했다면 다음과 같을 것입니다.</p>\n<p><img src=\"/2020/09/17/lesson-learned-at-bluehole/director_intent.jpg\" alt=\"디렉터의 의도\" /></p>\n<h2 id=\"디렉팅이-아니더라도-의도-전달은-중요하다\"><a class=\"markdownIt-Anchor\" href=\"#디렉팅이-아니더라도-의도-전달은-중요하다\"></a> 디렉팅이 아니더라도 의도 전달은 중요하다.</h2>\n<p>이 글을 쓴 목적이 이것입니다. 디렉팅이 아니어도 의도 전달은 중요합니다.</p>\n<p>실제로 겪은 한가지 예는 다음과 같은 상황입니다.</p>\n<blockquote>\n<p>“CLI 애플리케이션을 위해 A 라이브러리 사용법을 문의하고 싶은데요 <strong>왜냐하면</strong> 코드를 제출할 때마다 주요 체크리스트를 점검할 수 있도록 유저가 로컬에서 돌려볼 수 있게 하고 싶습니다.”</p>\n</blockquote>\n<p>그러면 종종 저는 &quot;그런 경우라면 CLI보다 린터 서버를 구성해 자동으로 실행되도록 하는 것이 어떨까요?&quot;라는 답변을 들을 수 있습니다. 의도를 전달하지 않았다면 저는 A 라이브러리 사용법에 대해 듣고 그것이 최선인 방법인 것으로 알고 계속 진행했을 것입니다.</p>\n<p>코드 리뷰를 하더라도 항상 의도를 적어주면 오해가 적어지게 됩니다.</p>\n<blockquote>\n<p>“여기서는 하드코딩으로 변경해주세요 <strong>왜냐하면</strong> Example 코드로 문서화되기 때문에 유저가 변수를 찾기 위해 점프하는 일이 없도록 하고 싶습니다.”</p>\n</blockquote>\n<p>위는 예시를 든 것이고 회의에서 의견을 제시하더라도 <strong>왜냐하면</strong>을 붙여준다면 오해가 적어지고 또 다른 좋은 의견을 끌어내게 됩니다.</p>\n<h2 id=\"결론\"><a class=\"markdownIt-Anchor\" href=\"#결론\"></a> 결론</h2>\n<p>업무에서 의사소통하면서 &quot;왜냐하면&quot;을 사용하고 있는지 되돌아보시길 바랍니다. 이 외에도 이상균님으로부터 배운 지식들로는 DRI(Directly Responsible Individual) 등 및 좋은 결정을 하는 방법 등이 있습니다.</p>\n<p>그리고 위에 적은대로 의도 전달만으로는 충분하지 않을 수 있습니다.</p>\n<p><img src=\"/2020/09/17/lesson-learned-at-bluehole/understanding_disparity.jpg\" alt=\"디렉터와 멤버간 이해 차이\" /></p>\n<p>디렉터와 멤버간의 이해차이가 발생하였고 디렉터는 의도 전달을 통해 디렉팅을 하지만 여전히 제대로 된 의도 전달이 안되었을 수 도 있습니다.</p>\n<p><img src=\"/2020/09/17/lesson-learned-at-bluehole/understanding_disparity_2.jpg\" alt=\"디렉팅 후 멤버간 이해 차이\" /></p>\n<p>그래서 중요한 것이 피드백을 잘하는 방법입니다.</p>\n<p><img src=\"/2020/09/17/lesson-learned-at-bluehole/feedback_summary.jpg\" alt=\"피드백 하는법 요약\" /></p>\n<p>더 궁금하신 분들은 꼭 이상균 님의 <a href=\"https://www.slideshare.net/iyooha/ss-69350767/31\">게임 디렉팅 튜토리얼</a>을 살펴보시기를 추천드립니다.</p>\n<p>이외에도 더 좋은 내용 디스커션을 원하시는 분들은 <a href=\"https://bit.ly/2Sqdnws\">딥백수 슬랙</a>을 방문해주세요.</p>\n<h2 id=\"레퍼런스\"><a class=\"markdownIt-Anchor\" href=\"#레퍼런스\"></a> 레퍼런스</h2>\n<ul>\n<li>이상균 - 게임 디렉팅 튜토리얼: <a href=\"https://www.slideshare.net/iyooha/ss-69350767/31\">https://www.slideshare.net/iyooha/ss-69350767/31</a></li>\n<li>이상균 - 프로그래머에게 사랑받는 게임 기획서 작성법: <a href=\"https://www.slideshare.net/iyooha/20101002-53482961\">https://www.slideshare.net/iyooha/20101002-53482961</a></li>\n</ul>\n",
            "tags": [
                "Mo Kweon",
                "bluehole",
                "krafton",
                "communication"
            ]
        },
        {
            "id": "https://deepbaksu.github.io/2020/09/06/free-web-server-for-your-portfolio/",
            "url": "https://deepbaksu.github.io/2020/09/06/free-web-server-for-your-portfolio/",
            "title": "무료로 개인 프로젝트 호스팅 하기",
            "date_published": "2020-09-06T11:23:04.000Z",
            "content_html": "<p><img src=\"/2020/09/06/free-web-server-for-your-portfolio/heroku_projects.jpg\" alt=\"Heroku 에서 무로료 호스팅 중인 프로젝트들\" /></p>\n<p>많은 기업에서 채용을 위한 조건으로 포트폴리오를 내걸고 있습니다. 그래서 보통 열심히 코딩을 하며 개인 프로젝트를 수행합니다. 그런데 포트폴리오 소스코드를 만들었다 해도, 다른 분들에게 보여줄 수 없다면 큰 의미가 없을겁니다. 그래서 호스팅을 해야 하는데, 서버가 24시간 돌아가야하는 호스팅의 특성상 무료가 아닌 경우가 많습니다.</p>\n<p>개인프로젝트들을 무료로 호스팅할 수 있는 방법들을 무엇이 있을까요? 예를 들어 24시간 상주해있어야 되는 봇도 무료로 배포할 수 있습니다. 예를 들어 저희 딥백수 커뮤니티에서는 여러 봇들이 상주하고 있는데 소수를 제외하면 전부 무료로 운영하고 있습니다. 또한, 개인 프로젝트들 또한 무료로 전부 데모를 호스팅하거나 공식문서를 무료로 호스팅하고 있습니다.</p>\n<p>이 글에서 프로젝트들은 다음과 같이 분류하고 있습니다.</p>\n<ol>\n<li>CSS, HTML, JS 로만 이루어진 프론트엔드</li>\n<li>일정한 스케쥴에 따라 작동하는 크론잡</li>\n<li>백엔드 서비스가 필요한 경우</li>\n<li>데이터 저장이 필요한 경우</li>\n</ol>\n<p>한가지 범위에만 속하지 않을 수 도 있습니다. 예를 들어 백엔드 서비스가 필요하면서 데이터 저장이 필요한 경우는 꽤 자주 있는 경우입니다. 또한 당연히 프로젝트가 어느정도 규모로 커지게 되면 무료로는 한계가 있습니다.</p>\n<h2 id=\"프론트엔드\"><a class=\"markdownIt-Anchor\" href=\"#프론트엔드\"></a> 프론트엔드</h2>\n<p>배포하고자 하는 프로젝트가 전부 스태틱 파일이라면 이런 경우에 속합니다. 이런 경우 <a href=\"https://pages.github.com/\">GitHub Pages</a> 를 통해서 배포해주는게 제일 간편합니다. 예를 들어 현재 이 블로그는 <a href=\"https://github.com/deepbaksu/deepbaksu.github.io/tree/master\">https://github.com/deepbaksu/deepbaksu.github.io/tree/master</a> 에서 GitHub pages 로 호스팅 되고 있습니다.</p>\n<p>예를 들어 오픈소스로 라이브러리를 만든다면 라이브러리에 대한 문서를 GitHub Pages 를 통해 배포하는 것이 일반적입니다.</p>\n<p>혹은 <a href=\"https://www.netlify.com/\">Netlify</a> 를 이용하는 방법도 있습니다. 하지만 Netlify 는 단순히 스태틱 파일을 호스팅하는 용도로는 Overkill 에 가깝습니다. Bandwidth 제한도 존재하구요.</p>\n<p>어떤걸 사용하던지 GitHub Actions 같은 CI 도구를 이용해 자동으로 배포가 되도록 하면 항상 최신 버전의 데모를 보여줄 수 있습니다.</p>\n<h2 id=\"일정한-스케쥴에-따라-작동하는-크론잡\"><a class=\"markdownIt-Anchor\" href=\"#일정한-스케쥴에-따라-작동하는-크론잡\"></a> 일정한 스케쥴에 따라 작동하는 크론잡</h2>\n<p>딥백수에서는 매 1시간마다 슬랙 내용을 엘라스틱서치로 백업하는 봇이 상주하고 있습니다. 이런 식으로 매일 1시에 이메일을 보내야 한다던지 혹은 메시지를 보내야 하는 경우 <a href=\"https://docs.github.com/en/actions\">GitHub Action</a> 을 이용하면 가능합니다.</p>\n<p>아래 예시는 딥백수 슬랙 메시지를 백업하는 스케쥴 작업으로 마지막으로 백업한 메시지의 timestamp.txt 를 깃헙리포에 저장해놓고<br />\n다음번 작업에서 그 시간부터 현재시간까지의 메시지를 슬랙으로부터 가져와 엘라스틱서치로 보내는 예시입니다.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Fetch</span> <span class=\"string\">slack</span> <span class=\"string\">messages</span> <span class=\"string\">and</span> <span class=\"string\">push.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># every hour.</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">&quot;0 * * * *&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">repository_dispatch:</span></span><br><span class=\"line\">    <span class=\"attr\">types:</span> <span class=\"string\">manual-trigger</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># A workflow run is made up of one or more jobs that can run sequentially or in parallel</span></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"comment\"># This workflow contains a single job called &quot;build&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">build:</span></span><br><span class=\"line\">    <span class=\"comment\"># The type of runner that the job will run on</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Steps represent a sequence of tasks that will be executed as part of the job</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"comment\"># Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Prepare</span> <span class=\"string\">credentials.json</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">PASSPHRASE:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.GPG_PASSPHRASE</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          gpg --quiet --batch --yes --decrypt --passphrase=$PASSPHRASE --output credentials.json credentials.json.gpg</span></span><br><span class=\"line\"><span class=\"string\"></span>      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Prepare</span> <span class=\"string\">token.json</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">PASSPHRASE:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.GPG_PASSPHRASE</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          gpg --quiet --batch --yes --decrypt --passphrase=$PASSPHRASE --output token.json token.json.gpg</span></span><br><span class=\"line\"><span class=\"string\"></span>      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span> <span class=\"string\">the</span> <span class=\"string\">docker</span> <span class=\"string\">script</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">SLACK_TOKEN:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.SLACK_TOKEN</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">SHEET_ID:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.SHEET_ID</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">LB_IP:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.LB_IP</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">ES_USERNAME:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.ES_USERNAME</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">ES_PASSWORD:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.ES_PASSWORD</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">make</span> <span class=\"string\">run_prod</span> <span class=\"string\">put_data</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Commit</span> <span class=\"string\">last_timestamp.txt</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          git config --global user.name &#x27;GitHub Action&#x27;</span></span><br><span class=\"line\"><span class=\"string\">          git config --global user.email &#x27;kkweon@gmail.com&#x27;</span></span><br><span class=\"line\"><span class=\"string\">          git commit -am &#x27;Update last_timestamp.txt&#x27;</span></span><br><span class=\"line\"><span class=\"string\">          git push</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"백엔드-서비스가-필요한-경우\"><a class=\"markdownIt-Anchor\" href=\"#백엔드-서비스가-필요한-경우\"></a> 백엔드 서비스가 필요한 경우</h2>\n<p><img src=\"/2020/08/17/slack-bot/timebot_demo.png\" alt=\"미국/한국 시간을 변환해주는 서비스\" /></p>\n<p>저희 딥백수에서는 한국 시간이 메시지로 올라오면 자동으로 미국 시간으로 변환해주는 봇이 존재합니다. 이런 경우 서버에서 메시지를 받을 수 있어야 하기 때문에 앞에 나온 방법으로는 불가능합니다.</p>\n<p>AWS와 구글클라우드의 무료티어도 방법이지만 매우 간편한 <a href=\"https://en.wikipedia.org/wiki/Platform_as_a_service\">PaaS</a> 인 <a href=\"https://www.heroku.com/\">Heroku</a> 를 추천합니다. Docker도 지원하고 GitHub 에서 자동으로 배포되도록 연동도 쉽게 가능합니다.</p>\n<p>또 주로 사용하는 다른 방법은 AWS Lambda 를 사용하는 방법도 있습니다. 어느정도 관대한 정책 덕분에 또 트래픽이 많지 않은 개인 프로젝트 같은 경우 서버리스가 최적이라고 할 수 있습니다. 대신 단점은 서버리스 프레임워크/라이브러리를 사용해야 된다는 점이 있으나 큰 문제는 아닙니다.</p>\n<h2 id=\"데이터-저장이-필요한-경우\"><a class=\"markdownIt-Anchor\" href=\"#데이터-저장이-필요한-경우\"></a> 데이터 저장이 필요한 경우</h2>\n<p>서비스보다는 말그대로 데이터베이스만 필요한 경우, 3가지 정도로 나눠서 작업하고 있습니다.</p>\n<ul>\n<li>위에서 나온 가장 마지막 메시지의 시간을 저장하는 등의 어플리케이션 상태를 저장하는 경우</li>\n<li>데이터베이스가 필요하다기보다 그냥 기록으로 저장해두는 공간이 필요한 경우</li>\n<li>데이터베이스가 필요한 경우</li>\n</ul>\n<h3 id=\"어플리케이션-상태를-저장하는-경우\"><a class=\"markdownIt-Anchor\" href=\"#어플리케이션-상태를-저장하는-경우\"></a> 어플리케이션 상태를 저장하는 경우</h3>\n<p>저희는 이런 경우 GitHub Repo 에 체크인하는 식으로 코드를 사용합니다. 말그대로 커밋하고 푸시하는 식으로 작성합니다. 특히 상태가 있는 크론잡의 경우 GitHub Action 을 통해 매우 자주 사용되는 경우입니다.</p>\n<p><img src=\"/2020/09/06/free-web-server-for-your-portfolio/application_state_in_repo.jpg\" alt=\"Application 상태를 GitHub Repo 에 저장해두는 경우\" /></p>\n<h3 id=\"단순하기-기록을-저장할-필요가-있는-경우\"><a class=\"markdownIt-Anchor\" href=\"#단순하기-기록을-저장할-필요가-있는-경우\"></a> 단순하기 기록을 저장할 필요가 있는 경우</h3>\n<p>예를 들어 메시지를 단순히 저장하고 싶은 경우 구글 스프레드시트 API 를 사용해 구글 스프레드시트를 일종의 데이터베이스로 사용할 수 있습니다. 뜨 구글 스프레드시트 앱 내부에서 크론잡 또한 가능함으로 모니터링 시스템을 구축할 수 도 있습니다.</p>\n<p><img src=\"/2020/09/06/free-web-server-for-your-portfolio/spreadsheet_as_database.jpg\" alt=\"구글 스프레드시트를 통해 슬랙 메시지를 백업\" /></p>\n<h3 id=\"데이터베이스가-필요한-경우\"><a class=\"markdownIt-Anchor\" href=\"#데이터베이스가-필요한-경우\"></a> 데이터베이스가 필요한 경우</h3>\n<p>만약 데이터베이스가 필요하다면 2가지 방법을 사용하고 있습니다.</p>\n<ul>\n<li>파이어베이스를 사용하거나</li>\n<li><a href=\"https://elements.heroku.com/addons\">Heroku Add-ons</a> 을 사용하거나</li>\n<li><a href=\"https://www.mongodb.com/cloud/atlas\">MongoDB Atlas</a> 를 사용합니다.</li>\n</ul>\n<p>파이어베이스는 쉽고 간편한 대신 벤더락인(Vendor Lock-In)<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup> 이 된다는 단점이 있습니다.</p>\n<p><img src=\"/2020/09/06/free-web-server-for-your-portfolio/firebase_pricing.jpg\" alt=\"Firebase 가격 정보\" /></p>\n<p>두번째는 Heroku Add-ons 을 사용하는 방법입니다. Redis, Postgres, MySQL 등등 필요한 서비스를 찾을 수 있습니다.</p>\n<p><img src=\"/2020/09/06/free-web-server-for-your-portfolio/heroku_addons.jpg\" alt=\"Heroku Addons. Redis, Postgres, MySQL 등을 찾을 수 있다\" /></p>\n<p>세번째는 MongoDB Atlas 도 원래 mLab 을 통해서 Heroku Addons에서 존재했었는데 Heroku Addons 으로서 결별하여 지금은 MongoDB Atlas 플랫폼을 통해서 사용해야 됩니다. 대신에 512MB 까지 무료로 사용 가능하고 관대한 편이라 거의 자주 사용하고 있습니다.</p>\n<p><img src=\"/2020/09/06/free-web-server-for-your-portfolio/mongodb_atlas_pricing.jpg\" alt=\"MongoDB Atlas 가격\" /></p>\n<h2 id=\"마무리\"><a class=\"markdownIt-Anchor\" href=\"#마무리\"></a> 마무리</h2>\n<p>무료 서비스 이외에도 사용가능한 방법으로는 라즈베리파이를 이용하는 방법도 있습니다. 라즈베리파이4는 메모리가 8GB 까지 존재하며 아이피주소는 공유기에 존재하는 <a href=\"https://en.wikipedia.org/wiki/Dynamic_DNS\">Dynamic DNS</a> 를 사용하면 됩니다. 실제로 저는 라즈베리파이에 k3s 을 이용해 쿠버네티스를 이용한 서비스들도 사용하고 있습니다. 좀더 스케일이 필요한 경우에는 저렴한 Digital Ocean 을 주로 사용합니다.</p>\n<p>더 자세히 알고 싶으신 분은 <a href=\"https://bit.ly/2Sqdnws\">딥백수 슬랙</a> 에서 뵈요 😄</p>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>벤더락인이란 특정 플랫폼 벤더에 종속성이 생기는 현상입니다. <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "Mo Kweon",
                "free web server",
                "heroku",
                "aws",
                "gcp",
                "netlify",
                "github actions"
            ]
        },
        {
            "id": "https://deepbaksu.github.io/2020/08/21/Go-wire-dependency-injection-tutorial/",
            "url": "https://deepbaksu.github.io/2020/08/21/Go-wire-dependency-injection-tutorial/",
            "title": "Go Dependency Injection Tutorial (feat. Wire)",
            "date_published": "2020-08-21T15:15:25.000Z",
            "content_html": "<p>Dependency Injection(DI)을 한국어로 의존성 주입이라고도 하지만 실제로는 DI라고 했을때 우리는 DI Framework/Library 를 의미합니다. 우선 Dependency Injection 이 무엇인지 에 대해 설명하겠습니다.</p>\n<p>예를 들어 <code>PostService</code> 는 블로그 포스트를 작성해주는 서비스가 있다고 가정합니다.</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> PostService <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  CreatePost(Post) Post</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>이때 우리는 블로그 포스트를 데이터베이스에 저장하고 싶습니다. 그러기 위해서 <code>CreatePost(Post)</code> 함수 안에서</p>\n<ol>\n<li>데이터베이스에 연결하고</li>\n<li>Post 를 INSERT 한다.</li>\n</ol>\n<p>이런식으로 할 수 도 있습니다. 하지만 이런식으로 하기보다는 비지니스 로직과 데이터베이스를 다루는 코드를 분리하여 데이터베이스에 저장하는 코드는 <code>PostRepository</code> 에 대행시킬 것입니다.</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> PostRepository <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  StorePost(Post) <span class=\"keyword\">bool</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/08/21/Go-wire-dependency-injection-tutorial/architecture.jpg\" alt=\"Architecture\" /></p>\n<p>즉 보시다싶이 <code>PostService</code> 가 <code>PostRepository</code> 에 의존하고 있습니다.<br />\n그러면 <code>PostService</code> 를 생성하기 위해 다음과 같은 코드를 작성할 것입니다.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewPostService</span><span class=\"params\">(repo PostRepository)</span> <span class=\"title\">PostService</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;postService&#123;</span><br><span class=\"line\">\t\tRepo: repo,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>이게 Dependency Injection 입니다. 이때 만약 Postgres가 아니라 Sqlite 나 심지어 메모리에 저장하고 싶으면 어떻게 될까요? 그에 해당하는 PostRepository 객체를 바꿔껴주기만 하면 됩니다.</p>\n<p><img src=\"/2020/08/21/Go-wire-dependency-injection-tutorial/different_repository.svg\" alt=\"InMemoryPostRepository\" /></p>\n<p>이렇게 의존성이 간단하면 Dependency Injection 프레임워크가 없더라도 손으로 Dependency Injection 설계도 가능합니다. 하지만 이렇게 의존하는 서비스가 많아진다면?</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewPostService</span><span class=\"params\">(someService SomeService, otherService OtherService, repo PostRepository, ...)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.go</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  otherSerivce := NewOtherService(<span class=\"string\">&quot;secret&quot;</span>)</span><br><span class=\"line\">  someService := NewSomeService(otherService)</span><br><span class=\"line\">  postRepository := NewPostRepository(<span class=\"string\">&quot;dburl&quot;</span>)</span><br><span class=\"line\">  potService := NewPostService(someService, otherService, postRepository)</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>일일히 손으로 바꿔주는게 매우 귀찮고 손이 많이갑니다. 순서도 맞춰줘야 되고 argument 위치나 귀찮은게 한두가지가 아닙니다. 이걸 자동으로 해주는 것이 바로 Dependency Injection Framework 이고 Go 에서는 <a href=\"https://github.com/google/wire\">wire</a> 와 <a href=\"https://github.com/uber-go/fx\">fx</a> 가 있습니다.</p>\n<h2 id=\"준비물\"><a class=\"markdownIt-Anchor\" href=\"#준비물\"></a> 준비물</h2>\n<p>여기서는 구글의 <a href=\"https://github.com/google/wire\">wire</a> 를 사용하도록 하겠습니다.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/google/wire/cmd/wire</span><br></pre></td></tr></table></figure>\n<h2 id=\"프로젝트-구조\"><a class=\"markdownIt-Anchor\" href=\"#프로젝트-구조\"></a> 프로젝트 구조</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── cmd</span><br><span class=\"line\">│   └── server.go</span><br><span class=\"line\">├── go.mod</span><br><span class=\"line\">├── go.sum</span><br><span class=\"line\">├── module</span><br><span class=\"line\">│   └── wire.go</span><br><span class=\"line\">└── post</span><br><span class=\"line\">    ├── postrepository.go</span><br><span class=\"line\">    └── postservice.go</span><br><span class=\"line\"></span><br><span class=\"line\">3 directories, 6 files</span><br></pre></td></tr></table></figure>\n<p>각 <code>postservice.go</code> 와 <code>postrepository.go</code> 파일은 이전에서 본것과 동일합니다.</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// postservice.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> post</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// (skip)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// PostService 를 생성하는 factory function</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewPostService</span><span class=\"params\">(repository PostRepository)</span> *<span class=\"title\">PostService</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;PostService&#123;Repo: repository&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// postrepository.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> post</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> PostRepository <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tStorePost(Post) <span class=\"keyword\">bool</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> InMemoryPostRepository <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tcache <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]Post</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(i *InMemoryPostRepository)</span> <span class=\"title\">StorePost</span><span class=\"params\">(post Post)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\ti.cache[post.id] = post</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 인메모리 포스트리포지토리를 생성하는 팩토리 함수</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewInMemoryPostRepository</span><span class=\"params\">()</span> <span class=\"title\">PostRepository</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;InMemoryPostRepository&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>이제 <code>module/wire.go</code> 파일은 다음과 같습니다.</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//+build wireinject  &lt;--- 매우 중요</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> module</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;example/post&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/google/wire&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">InitializePostService</span><span class=\"params\">()</span> *<span class=\"title\">post</span>.<span class=\"title\">PostService</span></span> &#123;</span><br><span class=\"line\">\twire.Build(post.NewInMemoryPostRepository, post.NewPostService) <span class=\"comment\">// &lt;-- Factory 함수들</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;post.PostService&#123;&#125; <span class=\"comment\">// &lt;-- Return Type을 마추기 위한 더미로 중요하지 않음</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>이제 shell 에서 <code>wire</code> 커맨드를 치면 코드가 생성이 됩니다.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wire module/wire.go</span><br></pre></td></tr></table></figure>\n<p>아래는 생성된 코드입니다. <code>PostRepository</code> 와 <code>PostService</code> 가 올바른 순서로 생성된 것을 볼 수 있습니다.</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">InitializePostService</span><span class=\"params\">()</span> *<span class=\"title\">post</span>.<span class=\"title\">PostService</span></span> &#123;</span><br><span class=\"line\">\tpostRepository := post.NewInMemoryPostRepository()</span><br><span class=\"line\">\tpostService := post.NewPostService(postRepository)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> postService</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>자세한 내용은 <a href=\"https://bit.ly/2Sqdnws\">https://bit.ly/2Sqdnws</a> 에 참여하셔서 문의주세요 😄</p>\n",
            "tags": [
                "Mo Kweon",
                "go",
                "golang",
                "dependency injection",
                "wire",
                "uber-go",
                "fx"
            ]
        },
        {
            "id": "https://deepbaksu.github.io/2020/08/17/slack-bot/",
            "url": "https://deepbaksu.github.io/2020/08/17/slack-bot/",
            "title": "슬랙봇 Distribute 가능하게 만들기 (OAuth)",
            "date_published": "2020-08-17T08:32:54.000Z",
            "content_html": "<p>딥백수에는 여러 슬랙봇들이 상주하고 있습니다.</p>\n<p><img src=\"/2020/08/17/slack-bot/timebot_demo.png\" alt=\"캘리포니아/한국 시간 변환해주는 timebot\" /></p>\n<p>이렇게 만들어 둔 봇이 유용해서 다른 슬랙 workspace 에서 사용하고 싶을 때가 있습니다. 그러기 위해 distribute 가능하게 봇을 작성해야 합니다. 그러기 위해 OAuth를 사용해야 합니다.</p>\n<h2 id=\"oauth-란\"><a class=\"markdownIt-Anchor\" href=\"#oauth-란\"></a> OAuth 란?</h2>\n<p>OAuth는 엑세스를 관리하는 방법중에 표준으로 사용되는 방법입니다. A라는 애플리케이션에서 B사이트의 유저 정보가 필요하다면 B사이트로 OAuth Request 를 보내는 방식입니다.</p>\n<p>여기서 슬랙봇이 A 애플리케이션이고 슬랙이 B에 해당합니다.</p>\n<h2 id=\"실제-slack-작동-구조\"><a class=\"markdownIt-Anchor\" href=\"#실제-slack-작동-구조\"></a> 실제 Slack 작동 구조</h2>\n<p><img src=\"https://a.slack-edge.com/fbd3c/img/api/articles/oauth_scopes_tutorial/slack_oauth_flow_diagram.png\" alt=\"OAuth\" /></p>\n<p>위 그림에서 구현해야 될게 많은 것으로 보이지만 실제로 <code>GET /api/oauth?code=XXXXX</code> 엔드포인트를 서버에 만들어주고 토큰을 저장할 데이터베이스만 있으면 완성입니다.</p>\n<p>예를 들어, 유저가 <a href=\"https://slack.com/oauth/v2/authorize?client_id=288745980535.515443770183&scope=channels:history,channels:join,channels:read,chat:write,chat:write.customize,chat:write.public,commands,dnd:read,emoji:read,groups:history,groups:read,groups:write,im:history,im:read,im:write,links:read,links:write,mpim:history,mpim:read,mpim:write,pins:read,pins:write,reactions:read,reactions:write,reminders:read,reminders:write,remote_files:read,remote_files:share,remote_files:write,team:read,usergroups:read,usergroups:write,users.profile:read,users:read,users:read.email,users:write,app_mentions:read&user_scope=\"><img alt=\"Add to Slack\" height=\"40\" width=\"139\" src=\"https://platform.slack-edge.com/img/add_to_slack.png\" srcSet=\"https://platform.slack-edge.com/img/add_to_slack.png 1x, https://platform.slack-edge.com/img/add_to_slack@2x.png 2x\" /></a> 이 버튼을 누르고 동의를 하게 되면 timebot 서버로 GET /api/oauth?code=XXXX 리퀘스트를 보내게 됩니다. (step 2 에 해당)</p>\n<p>그럼 이 code=XXX 를 사용하여 슬랙 서버에 OAuth 요청을 보내고(step 3) 받은 토큰을 데이터베이스에 저장해주면 됩니다 (step 4).</p>\n<p>수도 코드는 아래와 같이 되어 있습니다.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">OauthHandler</span><span class=\"params\">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// GET ?code=XXXX 읽음</span></span><br><span class=\"line\">  code, ok := request.URL.Query()[<span class=\"string\">&quot;code&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// CODE를 보냄 (POST https://api.slack.com/methods/oauth.v2.access)</span></span><br><span class=\"line\">  resp, err := getOAuthV2Response(slackClientId, slackClientSecret, code[<span class=\"number\">0</span>], <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// TeamID 및 AccessToken 저장</span></span><br><span class=\"line\">  store(resp.TeamID, resp.AccessToken)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ... send ok response</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>POST https://api.slack.com/methods/oauth.v2.access</code> 의 예시 response</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;ok&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;access_token&quot;</span>: <span class=\"string\">&quot;xoxb-17653672481-19874698323-pdFZKVeTuE8sk7oOcBrzbqgy&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;token_type&quot;</span>: <span class=\"string\">&quot;bot&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;scope&quot;</span>: <span class=\"string\">&quot;commands,incoming-webhook&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;bot_user_id&quot;</span>: <span class=\"string\">&quot;U0KRQLJ9H&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;app_id&quot;</span>: <span class=\"string\">&quot;A0KRD7HC3&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;team&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;Slack Softball Team&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;id&quot;</span>: <span class=\"string\">&quot;T9TK3CUKW&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">&quot;enterprise&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;slack-sports&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;id&quot;</span>: <span class=\"string\">&quot;E12345678&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">&quot;authed_user&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;id&quot;</span>: <span class=\"string\">&quot;U1234&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;scope&quot;</span>: <span class=\"string\">&quot;chat:write&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;access_token&quot;</span>: <span class=\"string\">&quot;xoxp-1234&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;token_type&quot;</span>: <span class=\"string\">&quot;user&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>이때 TeamID(workspace) 와 코드를 함께 저장해주면 나중에 유저 메시지로부터 반응하는 봇을 만들때 유저 메시지에 포함된 TeamID를 읽어 Access Token 을 DB에서 불러오는 식으로 사용합니다.</p>\n<p><img src=\"/2020/08/17/slack-bot/timebot_sequential.svg\" alt=\"timebot 순서도\" /></p>\n<p>자세한 내용은 <a href=\"https://bit.ly/2Sqdnws\">https://bit.ly/2Sqdnws</a> 에 참여하셔서 문의주세요 😄</p>\n",
            "tags": [
                "Mo Kweon",
                "go",
                "slack",
                "bot",
                "oauth"
            ]
        },
        {
            "id": "https://deepbaksu.github.io/2020/08/15/cqrs/",
            "url": "https://deepbaksu.github.io/2020/08/15/cqrs/",
            "title": "Command Query Responsibility Segregation",
            "date_published": "2020-08-15T11:56:22.000Z",
            "content_html": "<p>제가 서비스를 만들 때 가장 좋아하는 패턴인 <abbr title=\"Command Query Responsibility Segregation\">CQRS</abbr> 에 대해서 적어보겠습니다.</p>\n<h2 id=\"cqrs란\"><a class=\"markdownIt-Anchor\" href=\"#cqrs란\"></a> CQRS란?</h2>\n<p>원 단어를 보면 어려우 것 같지만 쉽게 얘기하면 <code>read</code> 와 <code>write</code> operation 을 나누어서 서비스를 만드는 것을 의미합니다. 특히 일반적으로 event sourcing 과 함께 구현됩니다.</p>\n<p><img src=\"/2020/08/15/cqrs/cqrs_diagram.svg\" alt=\"CQRS Diagram\" /></p>\n<h2 id=\"왜-사용하는가\"><a class=\"markdownIt-Anchor\" href=\"#왜-사용하는가\"></a> 왜 사용하는가?</h2>\n<p>쓰는 작업과 읽는 작업이 분리가 되있을 경우 (많은 서비스가 그러합니다) 한 서비스에서 둘다 처리할 경우 유용합니다. 만약에 한 서비스에서 처리하는데 쓰는 작업에 어떤 문제가 발생할 경우 읽는 작업 또한 불가능해지게 될 것입니다.</p>\n<p><img src=\"/2020/08/15/cqrs/dead_cqrs.svg\" alt=\"Dead Service Monolithic\" /></p>\n<p>또 쓰는 작업은 트래픽의 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0.01</mn><mi mathvariant=\"normal\">%</mi></mrow><annotation encoding=\"application/x-tex\">0.01\\%</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">1</span><span class=\"mord\">%</span></span></span></span> 정도 밖에 안되고 읽는 서비스가 대부분의 트래픽을 차지할 수 도 있습니다.</p>\n<h2 id=\"예시\"><a class=\"markdownIt-Anchor\" href=\"#예시\"></a> 예시</h2>\n<p>CQRS 을 <a href=\"https://youtube.com/premium\">YouTube Premium</a> 서비스를 사용해 예시를 들어보도록 하겠습니다.</p>\n<p><img src=\"https://www.gstatic.com/youtube/img/promos/growth/ytr_lp2_logo_premium_desktop_552x71.png\" alt=\"YouTube Premium\" /></p>\n<h3 id=\"functional-requirements\"><a class=\"markdownIt-Anchor\" href=\"#functional-requirements\"></a> Functional Requirements</h3>\n<ul>\n<li>유저는 Youtube Premium 을 signup 할 수 있습니다.</li>\n<li>YouTube Premium 유저는 광고를 스킵합니다.</li>\n</ul>\n<p>위 요구사항을 통해 다음과 같이 두개의 서비스로 나타낼 수 있습니다.</p>\n<ul>\n<li>Premium Service\n<ul>\n<li>실제 Premium 회원 가입을 받는 서비스</li>\n</ul>\n</li>\n<li>Premium Access Service\n<ul>\n<li>Premium Access 를 가진 유저인지 확인하는 서비스</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/2020/08/15/cqrs/premium_service.svg\" alt=\"Premium Service Diagram\" /></p>\n<p>어느 날 무슨 이유로 Premium Service 가 다운 됬을 경우에도 기존의 Premium User들은 아무 문제 없이 광고 없이 동영상 시청이 가능합니다.</p>\n<p><img src=\"/2020/08/15/cqrs/premium_service_down.svg\" alt=\"Premium Service is down\" /></p>\n<p>실제로도 이런 CQRS 패턴을 사용해 구현되어 있습니다.</p>\n<h2 id=\"sync\"><a class=\"markdownIt-Anchor\" href=\"#sync\"></a> Sync</h2>\n<p>그럼 이제 문제는 Query의 DB와 Command를 받는 DB의 consistency 를 어떻게 유지하는지가 관건일 것입니다. 이 문제는 <a href=\"https://microservices.io/patterns/data/event-sourcing.html\">event sourcing</a> 패턴을 사용합니다. 이벤트소싱에 대해서는 다음 포스트에서 쓰도록 하겠습니다.</p>\n<p>오신 김에 딥백수 그룹에 관심 있으신 분들은 <a href=\"/about\">소개 페이지</a> 를 방문해주세요!</p>\n",
            "tags": [
                "Mo Kweon",
                "microservice",
                "CQRS",
                "architecture",
                "software engineering"
            ]
        }
    ]
}
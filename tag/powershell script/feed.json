{
    "version": "https://jsonfeed.org/version/1",
    "title": "딥백수 • All posts by \"powershell script\" tag",
    "description": "우리는 '지속가능한 백수질'을 지향합니다. 고로 외롭게 공부하고 있을 당신을 응원합니다. 딥러닝에 관련된 글 뿐만 아니라, 백수생활의 넋두리도 환영합니다.",
    "home_page_url": "https://deepbaksu.github.io",
    "items": [
        {
            "id": "https://deepbaksu.github.io/2020/11/12/powershell-prompt-script/",
            "url": "https://deepbaksu.github.io/2020/11/12/powershell-prompt-script/",
            "title": "윈도우 PowerShell - custom prompt 스크립트 만들기",
            "date_published": "2020-11-12T10:27:12.000Z",
            "content_html": "<p><img src=\"/2020/11/12/powershell-prompt-script/kerensa-pickett-sTnZRUJm-kI-unsplash.jpg\" alt=\"Photo by Kerensa Pickett on Unsplash\" /></p>\n<p>지난번에는 git 자동 완성기능을 사용하고, prompt에 git 정보를 추가하고 싶어서<br />\n재빨리 구글링하여 PowerShell 에서 원하는 기능을 만들었다.</p>\n<p>참고링크: <a href=\"https://jusths.tistory.com/180\">https://jusths.tistory.com/180</a></p>\n<p>아래는 그 결과물이다.</p>\n<ol>\n<li>git 자동완성이 되며</li>\n<li>git 정보가 prompt 에 나오며</li>\n<li>마지막 명령의 실행 소요시간이 표시된다.</li>\n</ol>\n<p><img src=\"/2020/11/12/powershell-prompt-script/1.png\" alt=\"previous result\" /></p>\n<p>이번에는 이를 위해 사용한 스크립트를 조금 더 분석하여 나만의 prompt 를 만들어 보았다.</p>\n<ol>\n<li>디렉토리를 Linux 스타일로 표현하고, 이어서 <code>posh-git</code>의 git 정보가 표시된다.\n<ul>\n<li>디렉토리가 너무 길면 … 으로 줄여서 표현한다.</li>\n</ul>\n</li>\n<li>명령의 실행 소요시간을 우측 정렬로 노란색 배경컬러로 표시했다.</li>\n<li>이어서 User 정보, 현재 시간을 표시하였다. User 정보는 Administrator 이면 Admin 으로 표시된다.</li>\n<li>프롬프트는 다음줄에 작고 앙증맞은 → 화살표로 하였다.</li>\n</ol>\n<p><img src=\"/2020/11/12/powershell-prompt-script/2.png\" alt=\"final result\" /></p>\n<p>최종 결과는 GitHub Gist 에 올려두었다.<br />\nGitHub Gist: <a href=\"https://gist.github.com/83ea6615ff5a8c2baf5682443f39dc42\">https://gist.github.com/83ea6615ff5a8c2baf5682443f39dc42</a></p>\n<h2 id=\"스크립트-간단-분석\"><a class=\"markdownIt-Anchor\" href=\"#스크립트-간단-분석\"></a> 스크립트 간단 분석</h2>\n<p>본인의 PowerShell prompt 에 적용하려면 user 디렉토리의 Documents\\PowerShell 로 들어가서 profile.ps1 파일에 Gist의 스크립트를 덮어쓰면 된다.</p>\n<ol>\n<li>PowerShell이 실행될 때마다 <code>function Prompt()</code> 를 가져와서 PowerShell 의 prompt 를 그릴때에 사용한다.</li>\n<li><code>Write-Host</code> 는 echo 와 같다고 보면 된다. 화면에 출력을 해주는 기능이다.\n<ul>\n<li>명령들 사이에 한 줄을 띄워주려 사용하였다. 줄 바꿈을 하지 않으려면 <code>-NoNewLine</code> 옵션을 주면 된다.</li>\n</ul>\n</li>\n<li>PowerShell 의 배열을 다루는 함수들을 사용하여 현재 디렉토리 경로 문자열을 다듬었다.\n<ul>\n<li>Linux 처럼 보이게 콜론(:)을 없애고, 역슬래시()를 기준으로 문자열을 나누어 배열에 담은 다음</li>\n<li>배열의 개수가 3개 이상인지 여부로 분기하여, 너무 긴 경로는 <code>…</code> 로 줄여줄 수 있도록 하였다.</li>\n<li>그리고 <code>-join</code> 을 사용하여 슬래시(/)로 Linux 느낌이 나게 다시 경로 문자열을 만들었다.</li>\n</ul>\n</li>\n<li>만든 문자열을 <code>Write-Host</code> 로 출력하여 첫번째 출력을 완성하였다.\n<ul>\n<li>이때 <code>-ForegroundColor Cyan</code> 옵션을 이용하여 글자색을 바꾸어 보았으며</li>\n<li>같은 라인에 추가적인 정보를 담으려 하기에 <code>-NoNewLine</code> 으로 줄바꿈을 방지했다.</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Prompt</span></span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Write-Host</span> <span class=\"comment\"># one blank line</span></span><br><span class=\"line\">    <span class=\"comment\"># 1. pwd</span></span><br><span class=\"line\">    <span class=\"variable\">$pwdArray</span> = <span class=\"variable\">$</span>(<span class=\"variable\">$pwd</span>.path <span class=\"operator\">-replace</span> <span class=\"string\">&#x27;:&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>).split(<span class=\"string\">&#x27;\\&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$pwdArray</span>.count <span class=\"operator\">-gt</span> <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$linuxPath</span> = <span class=\"string\">&quot;/<span class=\"variable\">$</span>(<span class=\"variable\">$pwdArray</span>[0], &#x27;...&#x27;, <span class=\"variable\">$pwdArray</span>[-2], <span class=\"variable\">$pwdArray</span>[-1] -join (&#x27;/&#x27;))&quot;</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable\">$linuxPath</span> = <span class=\"string\">&quot;/<span class=\"variable\">$</span>(<span class=\"variable\">$pwdArray</span> -join (&#x27;/&#x27;))&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">write-host</span> <span class=\"variable\">$linuxPath</span> <span class=\"literal\">-ForegroundColor</span> Cyan <span class=\"literal\">-NoNewline</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>vcsStatus 출력은 Posh-git 이 import 되었는지를 확인하여, Write-VcsStatus 를 이용하여 출력을 하였다.</li>\n<li>이 출력부분 역시 costomize 가능한 것으로 알고 있는데 심심할 때 한 번 들여다보고 싶은 부분이다.</li>\n</ol>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 2. git status</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">Get-Module</span> Posh<span class=\"literal\">-git</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable\">$vcsStatus</span> = <span class=\"built_in\">Write-VcsStatus</span></span><br><span class=\"line\">    <span class=\"built_in\">write-host</span> <span class=\"variable\">$vcsStatus</span> <span class=\"literal\">-NoNewline</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"오른쪽-정렬하여-출력할-세-가지-정보\"><a class=\"markdownIt-Anchor\" href=\"#오른쪽-정렬하여-출력할-세-가지-정보\"></a> 오른쪽 정렬하여 출력할 세 가지 정보</h3>\n<p>마지막 실행한 명령의 실행 소요시간, Administrator 인지를 포함한 User 정보, 현재 시간을 오른쪽 정렬로 뿌려보려고 한다.<br />\n이를 위해서 각각의 정보를 우선 문자열로 뽑아 보았다.</p>\n<p><code>$elapsedTime</code> 은 마지막 명령의 실행 소요시간을 담고 있다.<br />\n참고 코드는 소요시간의 범위에 따라 다른 색깔, 다른 포맷으로 출력이 되도록 분기한 것이었는데,<br />\n그 결과를 바로 출력하지 않고 문자열에 담도록 하고, 색깔과 관련한 부분은 제외하였다.<br />\n조금 복잡해 보이지만 차근히 따라가면 이해가 될 것이다.</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 3. get command execution time</span></span><br><span class=\"line\"><span class=\"variable\">$history</span> = <span class=\"built_in\">Get-History</span> <span class=\"literal\">-ErrorAction</span> Ignore <span class=\"literal\">-Count</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$history</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable\">$elapsedTime</span> = <span class=\"string\">&quot; &quot;</span></span><br><span class=\"line\">    <span class=\"variable\">$ts</span> = <span class=\"built_in\">New-TimeSpan</span> <span class=\"variable\">$history</span>.StartExecutionTime <span class=\"variable\">$history</span>.EndExecutionTime</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (<span class=\"variable\">$ts</span>) &#123;</span><br><span class=\"line\">        &#123; <span class=\"variable\">$_</span>.TotalSeconds <span class=\"operator\">-lt</span> <span class=\"number\">1</span> &#125; &#123;</span><br><span class=\"line\">            [<span class=\"built_in\">int</span>]<span class=\"variable\">$d</span> = <span class=\"variable\">$_</span>.TotalMilliseconds</span><br><span class=\"line\">            <span class=\"variable\">$elapsedTime</span> += <span class=\"string\">&#x27;&#123;0&#125;ms&#x27;</span> <span class=\"operator\">-f</span> (<span class=\"variable\">$d</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#123; <span class=\"variable\">$_</span>.totalminutes <span class=\"operator\">-lt</span> <span class=\"number\">1</span> &#125; &#123;</span><br><span class=\"line\">            [<span class=\"built_in\">int</span>]<span class=\"variable\">$d</span> = <span class=\"variable\">$_</span>.TotalSeconds</span><br><span class=\"line\">            <span class=\"variable\">$elapsedTime</span> += <span class=\"string\">&#x27;&#123;0&#125;s&#x27;</span> <span class=\"operator\">-f</span> (<span class=\"variable\">$d</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#123; <span class=\"variable\">$_</span>.totalminutes <span class=\"operator\">-ge</span> <span class=\"number\">1</span> &#125; &#123;</span><br><span class=\"line\">            <span class=\"variable\">$elapsedTime</span> += <span class=\"string\">&quot;&#123;0:HH:mm:ss&#125;&quot;</span> <span class=\"operator\">-f</span> ([<span class=\"built_in\">datetime</span>]<span class=\"variable\">$ts</span>.Ticks)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Default &#123;</span><br><span class=\"line\">            <span class=\"variable\">$elapsedTime</span> += <span class=\"string\">&#x27;&#123;0&#125;ms&#x27;</span> <span class=\"operator\">-f</span> (<span class=\"variable\">$d</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable\">$elapsedTime</span> += <span class=\"string\">&quot; &quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>$adminHeader</code> 는 PowerShell 이 Administrator 로 실행되고 있는지 확인하여, Admin 또는 USERNAME 으로 문자열을 저장해둔다.</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 4. check if admin</span></span><br><span class=\"line\"><span class=\"variable\">$currentUser</span> = [<span class=\"type\">Security.Principal.WindowsPrincipal</span>](</span><br><span class=\"line\">    [<span class=\"type\">Security.Principal.WindowsIdentity</span>]::GetCurrent())</span><br><span class=\"line\"><span class=\"variable\">$isAdminProcess</span> = <span class=\"variable\">$currentUser</span>.IsInRole(</span><br><span class=\"line\">    [<span class=\"type\">Security.Principal.WindowsBuiltInRole</span>]::Administrator)</span><br><span class=\"line\"><span class=\"variable\">$adminHeader</span> = <span class=\"keyword\">if</span> (<span class=\"variable\">$isAdminProcess</span>) &#123; <span class=\"string\">&#x27; Admin &#x27;</span> &#125; <span class=\"keyword\">else</span> &#123; <span class=\"string\">&quot; <span class=\"variable\">$env:USERNAME</span> &quot;</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>현재 시간을 <code>$now</code> 변수에 담는다.</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 5. time</span></span><br><span class=\"line\"><span class=\"variable\">$now</span> = <span class=\"built_in\">get-date</span> <span class=\"literal\">-format</span> <span class=\"string\">&quot; HH:mm:ss &quot;</span></span><br></pre></td></tr></table></figure>\n<p>만들어둔 세 문자열 <code>$elapsedTime</code>, <code>$adminHeader</code>, <code>$now</code> 을 오른쪽 정렬로 출력한다.</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 6. align right: elapsedTime, adminHeader, now</span></span><br><span class=\"line\"><span class=\"variable\">$rightInfo</span> = <span class=\"string\">&quot;<span class=\"variable\">$elapsedTime</span><span class=\"variable\">$adminHeader</span><span class=\"variable\">$now</span>  &quot;</span></span><br><span class=\"line\"><span class=\"variable\">$startposx</span> = <span class=\"variable\">$Host</span>.UI.RawUI.windowsize.width - <span class=\"variable\">$rightInfo</span>.length</span><br><span class=\"line\"><span class=\"variable\">$startposy</span> = <span class=\"variable\">$Host</span>.UI.RawUI.CursorPosition.Y</span><br><span class=\"line\"><span class=\"variable\">$Host</span>.UI.RawUI.CursorPosition = <span class=\"built_in\">New-Object</span> System.Management.Automation.Host.Coordinates <span class=\"variable\">$startposx</span>,<span class=\"variable\">$startposy</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$elapsedTime</span>.length <span class=\"operator\">-ne</span> <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">write-host</span> <span class=\"variable\">$elapsedTime</span> <span class=\"literal\">-ForegroundColor</span> Black <span class=\"literal\">-NoNewline</span> <span class=\"literal\">-BackgroundColor</span> DarkYellow</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">write-host</span> <span class=\"variable\">$adminHeader</span> <span class=\"literal\">-ForegroundColor</span> Black <span class=\"literal\">-NoNewline</span> <span class=\"literal\">-BackgroundColor</span> DarkGreen</span><br><span class=\"line\"><span class=\"built_in\">write-host</span> <span class=\"variable\">$now</span> <span class=\"literal\">-ForegroundColor</span> Gray <span class=\"literal\">-NoNewline</span>  <span class=\"literal\">-BackgroundColor</span> Red</span><br></pre></td></tr></table></figure>\n<p>화살표를 출력한다. 왜 마지막 줄은 Write-Host 를 사용하지 않아도 출력이 되는 것인지는 모르겠다.<br />\n이렇게 하면 <code>PS&gt;</code> 라는 prompt 도 사라진다. 이것 역시 정확한 이유는 알지 못한다.</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 8. prompt arrow</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$host</span>.UI.RawUI.CursorPosition.X <span class=\"operator\">-gt</span> <span class=\"number\">0</span>) &#123; <span class=\"built_in\">Write-Host</span> &#125;</span><br><span class=\"line\"><span class=\"string\">&quot;<span class=\"variable\">$</span>([char]0x2192) &quot;</span></span><br></pre></td></tr></table></figure>\n<p>마지막으로 posh-git 을 import 해주면 된다.</p>\n<p><code>Import-Module posh-git</code> 은 말 그대로 posh-git 을 가져와서 git 과 관련한 정보를 쓸 수 있게 해준다.</p>\n<p>끝</p>\n",
            "tags": [
                "Hyunseok Jeong",
                "Windows",
                "PowerShell",
                "PowerShell script",
                "Git",
                "Prompt"
            ]
        }
    ]
}